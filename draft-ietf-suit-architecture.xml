<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-architecture-13" category="info">

  <front>
    <title abbrev="A Firmware Update Architecture for IoT">A Firmware Update Architecture for Internet of Things</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="D." surname="Brown" fullname="David Brown">
      <organization>Linaro</organization>
      <address>
        <email>david.brown@linaro.org</email>
      </address>
    </author>
    <author initials="M." surname="Meriac" fullname="Milosch Meriac">
      <organization>Consultant</organization>
      <address>
        <email>milosch@meriac.com</email>
      </address>
    </author>

    <date year="2020" month="October" day="16"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Vulnerabilities with Internet of Things (IoT) devices have raised
the need for a reliable and secure firmware update mechanism
suitable for devices with resource constraints. Incorporating such an
update mechanism is a fundamental requirement for fixing vulnerabilities
but it also enables other important capabilities such as updating
configuration settings
as well as adding new functionality.</t>

<t>In addition to the definition of terminology and an architecture
this document motivates the standardization of a manifest format
as a transport-agnostic means for describing and protecting firmware
updates.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Firmware updates can help to fix security vulnerabilities and are
considered to be an important building block in securing IoT devices.
Due to rising concerns about insecure IoT devices the Internet
Architecture Board (IAB) organized a ‘Workshop on Internet of Things
(IoT) Software Update (IOTSU)’, which took place at Trinity College
Dublin, Ireland on the 13th and 14th of June, 2016 to take a look at
the bigger picture. A report about this workshop can be found at
<xref target="RFC8240"/>. The workshop revealed a number of challenges for developers
and led to the formation of the IETF
Software Updates for Internet of Things (SUIT) working group.</t>

<t>Developing secure Internet of Things (IoT) devices is not an easy
task and supporting a firmware update solution requires skillful
engineers. Once devices are deployed, firmware updates play a
critical part in their lifecycle management, particularly when devices have a
long lifetime, or are deployed in remote or inaccessible areas where manual
intervention is cost prohibitive or otherwise difficult. Firmware updates<vspace />
for IoT devices are expected to work automatically, i.e. without user
involvement. Automatic updates that do not require human intervention
are key to a scalable solution for fixing software vulnerabilities.</t>

<t>Firmware updates are not only done to fix
bugs, but they can also add new functionality, and re-configure
the device to work in new environments or to behave differently in
an already deployed context.</t>

<t>The firmware update process has to ensure that</t>

<t><list style="symbols">
  <t>The firmware image is authenticated and integrity protected.
Attempts to flash a maliciously modified firmware image or an image from
an unknown, untrusted source must be prevented. In examples this document
uses asymmetric cryptography because it is the preferred approach by
many IoT deployments. The use of symmetric credentials is also supported
and can be used by very constrained IoT devices.</t>
  <t>The firmware image can be confidentiality protected so that
attempts by an adversary to recover the plaintext binary can
be mitigated or at least made more difficult. Obtaining the firmware is often one of
the first steps to mount an attack since it gives the adversary
valuable insights into the software libraries used, configuration
settings and generic functionality. Even though reverse
engineering the binary can be a tedious process modern reverse
engineering frameworks have made this task a lot easier.</t>
</list></t>

<t>While the standardization work has been informed by and optimized for firmware
update use cases of Class 1 devices (according to the device class
definitions in RFC 7228 <xref target="RFC7228"/>) devices, there is nothing in
the architecture that restricts its use to only these constrained IoT devices.
Moreover, this architecture is not limited to managing software updates,
but can also be applied to managing the delivery of arbitrary data, such
as configuration information and keys. Unlike higher end devices, like
laptops and desktop PCs, many IoT devices do not have user interfaces
and support for unattended updates is, therefore, essential for the design
of a practical solution. Constrained IoT devices often use a
software engineering model where a developer is responsible for creating
and compiling all software running on the device into a single, monolithic
firmware image. On higher end devices application software is, on the other
hand, often downloaded separately and even obtained from developers different
to the developers of the lower level software. The details for how to obtain
those application layer software binaries then depends heavily on the platform,
programming language uses and the sandbox the software is executed in.</t>

<t>While the IETF standardization work has been focused on the
manifest format, a fully interoperable solution needs more than a standardized
manifest. For example, protocols for transferring firmware images
and manifests to the device need to be available as well as the status tracker
functionality. Devices also require a mechanism to discover the status
tracker(s) and/or firmware servers.
These building blocks have been developed by various organizations
under the umbrella of an IoT device management solution. The LwM2M protocol is one
IoT device management protocol.</t>

<t>There are, however, several areas that (partially) fall outside the scope of the IETF
and other standards organizations but need to be considered by firmware authors,
as well as device and network operators. Here are some of them, as highlighted during
the IOTSU workshop:</t>

<t><list style="symbols">
  <t>Installing firmware updates in a robust fashion so that the
update does not break the device functionality of the environment
this device operates in. This requires proper testing and offering
recovery strategies when a firmware update is unsuccessful.</t>
  <t>Making firmware updates available in a timely fashion considering the
complexity of the decision making process for updating devices,
potential re-certification requirements, the length of a supply chain
an update needs to go through before it reaches the end customer,
and the need for user consent to install updates.</t>
  <t>Ensuring an energy efficient design of a battery-powered IoT devices because a
firmware update, particularly writing the firmware image to flash, is a heavy
task for a device.</t>
  <t>Creating incentives for device operators to use a firmware update mechanism and to
demand the integration of it from IoT device vendors.</t>
  <t>Ensuring that firmware updates addressing critical flaws can be
obtained even after a product is discontinued or a vendor goes out of
business.</t>
</list></t>

<t>This document starts with a terminology followed by the description of the architecture.
We then explain the bootloader and how it integrates with the firmware update mechanism.
Subsequently, we offer a categorization of IoT devices in terms of their hardware
capabilities relevant for firmware updates. Next, we talk about the manifest structure
and how to use it to secure firmware updates. We conclude with a more detailed example.</t>

</section>
<section anchor="terminology" title="Conventions and Terminology">

<section anchor="terms" title="Terms">

<t>This document uses the following terms:</t>

<t><list style="symbols">
  <t>Firmware Image: The firmware image, or image, is a binary
that may contain the complete software of a device or a subset of
it. The firmware image may consist of multiple images, if
the device contains more than one microcontroller. Often
it is also a compressed archive that contains code,
configuration data, and even the entire file system. The
image may consist of a differential update for performance
reasons.  <vspace blankLines='1'/>
The terms,
firmware image, firmware, and image, are used in this
document and are interchangeable. We use the term application firmware
image to differentiate it from a firmware image that
contains the bootloader. An application firmware image, as the
name indicates, contains the application program often including
all the necessary code to run it (such as protocol stacks, and
embedded operating system).</t>
  <t>Manifest: The manifest contains meta-data about the firmware
image. The manifest is protected against modification and
provides information about the author.</t>
  <t>Microcontroller (MCU for microcontroller unit): An MCU is a
compact integrated circuit designed for use in embedded systems.
A typical microcontroller includes a processor, memory (RAM and
flash), input/output (I/O) ports and other features connected via
some bus on a single chip. The term ’system on chip (SoC)’ is
often used interchangeably with MCU, but MCU tends to imply more
limited peripheral functions.</t>
  <t>Rich Execution Environment (REE): An environment that is provided
and governed by a typical OS (e.g., Linux, Windows, Android, iOS),
potentially in conjunction with other supporting operating systems
and hypervisors; it is outside of the TEE.  This environment and
applications running on it are considered un-trusted.</t>
  <t>System on Chip (SoC): An SoC is an integrated circuit that
contains all components of a computer, such as CPU, memory,
input/output ports, secondary storage, a bus to connect the
components, and other hardware blocks of logic.</t>
  <t>Trust Anchor: A trust anchor, as defined in <xref target="RFC6024"/>, represents
an authoritative entity via a public key and associated data.  The
public key is used to verify digital signatures, and the associated
data is used to constrain the types of information for which the
trust anchor is authoritative.”</t>
  <t>Trust Anchor Store: A trust anchor store, as defined in <xref target="RFC6024"/>,
is a set of one or more trust anchors stored in a device.  A device
may have more than one trust anchor store, each of which may be used
by one or more applications. A trust anchor store must resist
modification against unauthorized insertion, deletion, and modification.</t>
  <t>Trusted Applications (TAs): An application component that runs in
a TEE.</t>
  <t>Trusted Execution Environments (TEEs): An execution environment
that runs alongside of, but is isolated from, an REE. For more
information about TEEs see <xref target="I-D.ietf-teep-architecture"/>.</t>
</list></t>

</section>
<section anchor="stakeholders" title="Stakeholders">

<t>The following stakeholders are used in this document:</t>

<t><list style="symbols">
  <t>Author: The author is the entity that creates the firmware image.
There may be multiple authors involved in producing firmware running
on an IoT device. <xref target="device"/> talks about those IoT device deployment cases.</t>
  <t>Device Operator: The device operator is responsible for the day-to-day operation
of a fleet of IoT devices. Customers of IoT devices, as the owners of
IoT devices - such as enterprise customers or end users, interact
with their IoT devices indirectly through the device operator via
web or smart phone apps.</t>
  <t>Network Operator: The network operator is responsible for the operation of a
network to which IoT devices connect.</t>
  <t>Trust Provisioning Authority (TPA): The TPA distributes
trust anchors and authorization policies to various stakeholders.
The TPA may also delegate rights to stakeholders. For example,
in some cases, the Original Design Manufacturer (ODM), which is a
company that designs and manufactures a product, may act as a
TPA and may decide to remain in full control over the firmware
update process of their products.</t>
</list></t>

</section>
<section anchor="functions" title="Functions">

<t><list style="symbols">
  <t>(IoT) Device: A device refers to the entire IoT product, which
consists of one or many MCUs, sensors and/or actuators. Many IoT
devices sold today contain multiple MCUs and therefore a single
device may need to obtain more than one firmware image and
manifest to successfully perform an update.</t>
  <t>Status Tracker: The status tracker has a client and a server component
and performs three tasks:
1) It communicates the availability of a new firmware version. This
   information will flow from the server to the client. <vspace />
2) It conveys information about software and hardware characteristics of
   the device. The information flow is from the client to the server. <vspace />
3) It can remotely trigger the firmware update process. The
   information flow is from the server to the client.  <vspace blankLines='1'/>
For example, a device operator may want to read the installed firmware
version number running on the device and information
about available flash memory. Once an update has been triggered, the device
operator may want to obtain information about the state of the firmware
update. If errors occurred, the device operator may want to
troubleshoot problems by first obtaining diagnostic information (typically
using a device management protocol).  <vspace blankLines='1'/>
We make no
assumptions about where the server-side component is deployed. The
deployment of status trackers is flexible and may be found at<vspace />
cloud-based servers, on-premise servers, or may be embedded in edge
computing device. A status tracker server component may even be
deployed on an IoT device. For example, if the IoT device contains
multiple MCUs, then the main MCU may act as a status tracker towards the
other MCUs. Such deployment is useful when updates have to be
synchronized across MCUs.  <vspace blankLines='1'/>
The status tracker may be operated by any suitable stakeholder;
typically the Author, Device Operator, or Network Operator.</t>
  <t>Firmware Consumer: The firmware consumer is the recipient of the
firmware image and the manifest. It is responsible for parsing
and verifying the received manifest and for storing the obtained
firmware image. The firmware consumer plays the role of the
update component on the IoT device typically running in the
application firmware. It interacts with the firmware server and
with the status tracker client (locally).</t>
  <t>Firmware Server: The firmware server stores firmware images and
manifests and distributes them to IoT devices. Some deployments
may require a store-and-forward concept, which requires storing
the firmware images/manifests on more than one entity before<vspace />
they reach the device. There is typically some interaction between the
firmware server and the status tracker and these two entities are often
physically separated on different devices for scalability reasons.</t>
  <t>Bootloader: A bootloader is a piece of software that is
executed once a microcontroller has been reset. It is
responsible for deciding what code to execute.</t>
</list></t>

</section>
</section>
<section anchor="architecture" title="Architecture">

<t>More devices today than ever before are connected to the Internet,
which drives the need for firmware updates to be provided over the
Internet rather than through traditional interfaces, such as USB or
RS-232. Updating updates over the Internet requires the device to fetch
the new firmware image as well as the manifest.</t>

<t>Hence, the following components are necessary on a device for a firmware
update solution:</t>

<t><list style="symbols">
  <t>the Internet protocol stack for firmware downloads. Because firmware images are often multiple kilobytes, sometimes
exceeding one hundred kilobytes, in size for low end IoT devices and even
several megabytes large for IoT devices running full-fledged operating systems
like Linux, the protocol mechanism for retrieving these images needs
to offer features like congestion control, flow control, fragmentation
and reassembly, and mechanisms to resume interrupted or corrupted transfers.</t>
  <t>the capability to write the received firmware image to
persistent storage (most likely flash memory).</t>
  <t>a manifest parser with code to verify a digital
signature or a message authentication code.</t>
  <t>the ability to unpack, to decompress and/or to decrypt the
received firmware image.</t>
  <t>(optionally) a status tracker.</t>
</list></t>

<t>The features listed above are most likely offered by code in the application firmware
image running
on the device rather than by the bootloader itself. Note that
cryptographic algorithms will likely run in a trusted execution
environment, on a separate MCU, in a hardware security module, or in a secure element
rather than in the same context with the application code.</t>

<t><xref target="arch-figure"/> shows the architecture where a
firmware image is created by an author, and made available to a firmware
server. For security reasons, the author will not have the permissions to
upload firmware images to the firmware server and to initiate an update him- or herself.
Instead, authors will make firmware images available to the device operators. Note that
there may be a longer supply chain involved to pass software updates from the author all
the way to the party that can then finally make a decision to deploy it with IoT devices.</t>

<t>As a first step in the firmware update process, the status tracker client need to be
made aware of the availability of a new firmware update by the status tracker server.
This can be accomplished via polling (client-initiated), push notifications (server-initiated),
or more complex mechanisms (such as a hybrid approach):</t>

<t><list style="symbols">
  <t>Client-initiated updates take the form of a status tracker client proactively
checking (polling) for updates.</t>
  <t>With Server-initiated updates the server-side component of the status tracker
learns about a new firmware version and determines what devices qualify for a
firmware update. Once the relevant devices have been selected, the
status tracker informs these devices and the firmware consumers obtain those
images and manifests. Server-initiated updates are important because they allow a quick
response time. Note that the client-side status tracker needs to be reachable by the server-side
component. This may require devices to keep reachability information on the
server-side up-to-date and state at NATs and stateful packet filtering
firewalls alive.</t>
  <t>Using a hybrid approach the server-side of the status tracker
pushes notifications of availability of an update to the client side and requests
the firmware consumer to pull the manifest and the firmware image from the
firmware server.</t>
</list></t>

<t>Once the device operator triggers update via the status tracker, it will keep
track of the update process on the device. This allows the device operator to know what
devices have received an update and which of them are still pending an update.</t>

<t>Firmware images can be conveyed to devices in a variety of ways,
including USB, UART, WiFi, BLE, low-power WAN technologies, mesh networks and many more.
At the application layer
a variety of protocols are also available: MQTT, CoAP, and HTTP are the
most popular application layer protocols used by IoT devices. This architecture
does not make assumptions about how the firmware images are distributed to the
devices and therefore aims to support all these technologies.</t>

<t>In some cases it may be desirable to distribute firmware images using a multicast
or broadcast protocol. This architecture does not make recommendations for any
such protocol. However, given that broadcast may be desirable for some networks,
updates must cause the least disruption possible both in metadata
and firmware transmission. For an update to be broadcast friendly, it cannot rely on link
layer, network layer, or transport layer security. A solution has
to rely on security protection applied to the manifest and firmware image
instead. In addition,
the same manifest must be deliverable to many devices, both those
to which it applies and those to which it does not, without a
chance that the wrong device will accept the update. Considerations
that apply to network broadcasts apply equally to the use of
third-party content distribution networks for payload distribution.</t>

<figure title="Architecture." anchor="arch-figure"><artwork><![CDATA[
                                                      +----------+
                                                      |          |
                                                      |  Author  |
                                                      |          |
                                                      +----------+
                       Firmware + Manifest                 |
              +----------------------------------+         | Firmware +
              |                                  |         | Manifest
              |                               ---+-------  |
              |                           ----   |       --|-
              |                         //+----------+     | \\
             -+--                      // |          |     |   \
        ----/ |  ----                |/   | Firmware |<-+  |    \
      //      |      \\              |    | Server   |  |  |     \
     /        |        \             /    |          |  +  +      \
    /         |         \           /     +----------+   \ /       |
   / +--------+--------+ \         /                      |        |
  /  |        v        |  \       /                       v        |
 |   | +------------+  |   |     |          +----------------+      |
 |   | |  Firmware  |  |                    |     Device     |      |
 |   | |  Consumer  |  |   |     |          |     Management |      |
|    | +------------+  |    |    |          |                |      |
|    | +------------+  |    |    |          |    +--------+  |      |
|    | |  Status    |<-+--------------------+->  |        |  |      |
|    | |  Tracker   |  |    |    |          |    | Status |  |      |
|    | |  Client    |  |    |    |          |    | Tracker|  |     |
 |   | +------------+  |   |     |          |    | Server |  |     |
 |   |    Device       |   |      |         |    +--------+  |     |
 |   +-----------------+   |       \        |                |    /
  \                       /         \       +----------------+   /
   \       Network       /           \                          /
    \     Operator      /             \     Device Operator    /
      \\             //                \ \                   //
        ----     ----                     ----           ----
            -----                             -----------
]]></artwork></figure>

<t>Firmware images and manifests may be conveyed as a bundle or detached. The
manifest must support both approaches.</t>

<t>For distribution as a bundle, the firmware image is embedded into the manifest.
This is a useful approach for deployments where devices are not connected
to the Internet and cannot contact a dedicated firmware server for the firmware
download. It is also applicable when the firmware update happens via a
USB sticks or short range radio technologies (such as Bluetooth Smart).</t>

<t>Alternatively, the manifest is distributed detached from the firmware image.
Using this approach, the firmware consumer is presented with the manifest first
and then needs to obtain one or more firmware images as dictated in the
manifest.</t>

<t>The pre-authorisation step involves verifying whether the entity
signing the manifest is indeed authorized to perform an update.
The firmware consumer must also determine whether it should fetch and
process a firmware image, which is referenced in a manifest.</t>

<t>A dependency resolution phase is needed when more than one
component can be updated or when a differential update is used.
The necessary dependencies must be available prior to installation.</t>

<t>The download step is the process of acquiring a local copy of the
firmware image.  When the download is client-initiated, this means
that the firmware consumer chooses when a download occurs and initiates
the download process.  When a download is server-initiated,
this means that the status tracker tells
the device when to download or that it initiates the transfer
directly to the firmware consumer. For example, a download from an
HTTP/1.1-based firmware server is client-initiated. Pushing a manifest
and firmware image to the Package resource of the LwM2M
Firmware Update object <xref target="LwM2M"/> is server-initiated update.</t>

<t>If the firmware consumer has downloaded a new firmware image and is ready to
install it, to initiate the installation, it may
- either need to wait for a trigger from the status tracker,
- or trigger the update automatically,
- or go through a more complex decision making process to determine
the appropriate timing for an update. Sometimes the final decision may
require confirmation of the user of the device for safety reasons.</t>

<t>Installation is the act of processing the payload into a format that
the IoT device can recognize and the bootloader is responsible for
then booting from the newly installed firmware image.
This process is different when a bootloader is not involved. For example,
when an application is updated in a full-featured operating system, the
updater may halt and restart the application in isolation. Devices must
not fail when a disruption occurs during the update process.
For example, a power failure or network disruption during the update
process must not cause the device to fail.</t>

</section>
<section anchor="invocation" title="Invoking the Firmware">

<t><xref target="architecture"/> describes the steps for getting the firmware image and the manifest
from the author to the firmware consumer on the IoT device. Once the firmware consumer
has retrieved and successfully processed the manifest and the firmware image it needs
to invoke the new firmware image. This is managed in many different ways, depending
on the type of device, but it typically involves halting the current version of the
firmware, handing control over to a firmware with a higher privilege/trust level
(the firmware verifier)
verifying the new firmware’s authenticity &amp; integrity, and then invoking it.</t>

<t>In an execute-in-place microcontroller, this is often done by rebooting into a
bootloader (simultaneously halting the application &amp; handing over to the higher
privilege level) then executing a secure boot process (verifying and invoking
the new image).</t>

<t>In a rich OS, this may be done by halting one or more processes, then invoking
new applications. In some OSs, this implicitly involves the kernel verifying
the code signatures on the new applications.</t>

<t>The invocation process is security sensitive. An attacker will typically try to
retrieve a firmware image from the device for reverse engineering or will try to get
the firmware verifier to execute an attacker-modified firmware image. The
firmware verifier will therefore have to perform security checks on the
firmware image before it can be invoked. These security checks by the
firmware verifier happen in addition to the security checks that took place
when the firmware image and the manifest were downloaded by the firmware consumer.</t>

<t>The overlap between the firmware consumer and the firmware verifier
functionality comes in two forms, namely</t>

<t><list style="symbols">
  <t>A firmware verifier must verify the firmware image it boots as
part of the secure boot process. Doing so requires meta-data to be
stored alongside the firmware image so that the firmware verifier can
cryptographically verify the firmware image before booting it to
ensure it has not been tampered with or replaced. This meta-data
used by the firmware verifier may well be the same manifest obtained with the
firmware image during the update process.</t>
  <t>An IoT device needs a recovery strategy in case the firmware
update / invocation process fails. The recovery
strategy may include storing two or more application firmware images
on the device or offering the ability to invoke a recovery image to
perform the firmware update process again using firmware updates over
serial, USB or even wireless connectivity like Bluetooth Smart.
In the latter case the firmware consumer functionality is contained in the
recovery image and requires the necessary functionality for
executing the firmware update process, including manifest parsing.</t>
</list></t>

<t>While this document assumes that the firmware verifier itself is
distinct from the role of the firmware consumer and therefore does not
manage the firmware update process, this is not a requirement and these
roles may be combined in practice.</t>

<t>Using a bootloader as the firmware verifier requires some special
considerations, particularly when the bootloader
implements the robustness requirements identified by the IOTSU workshop <xref target="RFC8240"/>.</t>

<section anchor="bootloader" title="The Bootloader">

<t>In most cases the MCU must restart in order to hand over control to the bootloader.
Once the MCU has initiated a restart, the bootloader determines whether a newly available
firmware image should be executed. If the bootloader concludes that the newly available
firmware image is invalid, a recovery strategy is necessary. There are only two
approaches recovering from an invalid firmware: either the bootloader must be able
to select a different, valid firmware, or it must be able to obtain a new, valid firmware.
Both of these approaches have implications for the architecture of the update system.</t>

<t>Assuming the first approach, there are (at least) three firmware images available
on the device:</t>

<t><list style="symbols">
  <t>First, the bootloader is also firmware. If a bootloader is updatable then its
firmware image is treated like any other application firmware image.</t>
  <t>Second, the firmware image that has to be replaced is still available on the
device as a backup in case the freshly downloaded firmware image does not
boot or operate correctly.</t>
  <t>Third, there is the newly downloaded firmware image.</t>
</list></t>

<t>Therefore, the firmware consumer must know where to store the new firmware.
In some cases, this may be implicit, for example replacing the least-recently-used
firmware image. In other cases, the storage location of the new firmware must be
explicit, for example when a device has one or more application firmware images
and a recovery image with limited functionality, sufficient only to perform an update.</t>

<t>Since many low end IoT devices use non-relocatable code,
either the bootloader needs to copy the newly downloaded application firmware image
into the location of the old application firmware image and vice versa or
multiple versions of the firmware need to be prepared for different locations.</t>

<t>In general, it is assumed that the bootloader itself, or a minimal part of it,
will not be updated since a failed update of the bootloader poses a
reliability risk.</t>

<t>For a bootloader to offer a secure boot functionality it needs to
implement the following functionality:</t>

<t><list style="symbols">
  <t>The bootloader needs to fetch the manifest (or manifest-alike headers)
from nonvolatile storage and parse its
contents for subsequent cryptographic verification.</t>
  <t>Cryptographic libraries with hash functions, digital signatures
(for asymmetric crypto), keyed message digests (for symmetric
crypto) need to be accessible.</t>
  <t>The device needs to have a trust anchor store to verify the
digital signature. (Alternatively, access to a key store for use
with the keyed message digest.)</t>
  <t>Ability to expose boot process-related data to the application
firmware (such as to the status tracker).  This allows
to share information about the current firmware version, and the
status of the firmware update process and whether errors have occurred.</t>
  <t>Produce boot measurements as part of an attestation solution. See
<xref target="I-D.ietf-rats-architecture"/> for more information. (optional)</t>
  <t>Ability to decrypt firmware images, in case confidentiality protection
was applied). This requires a solution for key management. (optional)</t>
</list></t>

</section>
</section>
<section anchor="device" title="Types of IoT Devices">

<t>There are billions of MCUs used in devices today produced by a large
number of silicon manufacturers. While MCUs can vary significantly
in their characteristics, there are a number of similiaries allowing
us to categorize in groups.</t>

<t>The firmware update architecture, and the manifest format in particular,
needs to offer enough flexibility to cover these common deployment cases.</t>

<section anchor="single-mcu" title="Single MCU">

<t>The simplest, and currently most common, architecture consists of
a single MCU along with its own peripherals.  These SoCs generally
contain some amount of flash memory for code and fixed data, as
well as RAM for working storage.  A notable characteristic of these
SoCs is that the primary code is generally execute in place (XIP).
Due to the non-relocatable nature of the code, the firmware image
needs to be placed in a specific location in flash since the code
cannot be executed from an arbitrary location in flash. Hence, then
the firmware image is updated it is necessary to swap the old and
the new image.</t>

</section>
<section anchor="single-cpu-with-secure-normal-mode-partitioning" title="Single CPU with Secure - Normal Mode Partitioning">

<t>Another configuration consists of a similar architecture to the
previous, with a single CPU.  However, this CPU supports a security
partitioning scheme that allows memory (in addition to other things)
to be divided into secure and normal mode.  There will generally be
two images, one for secure mode, and one for normal mode.  In this
configuration, firmware upgrades will generally be done by the CPU
in secure mode, which is able to write to both areas of the flash
device. In addition, there are requirements to be able to update
either image independently, as well as to update them together
atomically, as specified in the associated manifests.</t>

</section>
<section anchor="symmetric-multiple-cpus" title="Symmetric Multiple CPUs">

<t>In more complex SoCs with symmetric multi-processing support, advanced
operating systems, such as Linux, are often used. These SoCs frequently
use an external storage medium, such as raw NAND flash or eMMC. Due to
the higher quantity of resources, these devices are often capable of
storing multiple copies of their firmware images and selecting the most
appropriate one to boot. Many SoCs also support bootloaders that are
capable of updating the firmware image, however this is typically a last
resort because it requires the device to be held in the bootloader while
the new firmware is downloaded and installed, which results in down-time
for the device. Firmware updates in this class of device are typically
not done in-place.</t>

</section>
<section anchor="dual-cpu-shared-memory" title="Dual CPU, shared memory">

<t>This configuration has two or more heterogeneous CPUs in a single SoC that
share memory (flash and RAM).  Generally, there will be a mechanism to prevent
one CPU from unintentionally accessing memory currently allocated to the other.
Upgrades in this case will typically be done by one of the CPUs, and is
similar to the single CPU with secure mode.</t>

</section>
<section anchor="dual-cpu-other-bus" title="Dual CPU, other bus">

<t>This configuration has two or more heterogeneous CPUs, each having their own memory.
There will be a communication channel between them, but it will be
used as a peripheral, not via shared memory.  In this case, each CPU
will have to be responsible for its own firmware upgrade.  It is
likely that one of the CPUs will be considered the primary CPU, and will
direct the other CPU to do the upgrade.  This configuration is
commonly used to offload specific work to other CPUs.  Firmware
dependencies are similar to the other solutions above, sometimes
allowing only one image to be upgraded, other times requiring several
to be upgraded atomically.  Because the updates are happening on
multiple CPUs, upgrading the two images atomically is challenging.</t>

</section>
</section>
<section anchor="manifests" title="Manifests">

<t>In order for a firmware consumer to apply an update, it has to make several decisions
using manifest-provided information and data available on the device itself. For more
detailed information and a longer list of information elements in the manifest consult the
information model specification <xref target="I-D.ietf-suit-information-model"/>, which offers justifications
for each element, and the manifest, see <xref target="I-D.ietf-suit-manifest"/>, for details about how this
information is included in the manifest.</t>

<t><xref target="manifest-info"/> provides examples of decisions to be made.</t>

<texttable title="Firmware Update Decisions." anchor="manifest-info">
      <ttcol align='right'>Decision</ttcol>
      <ttcol align='left'>Information Elements</ttcol>
      <c>Should I trust the author of the firmware?</c>
      <c>Trust anchors and authorization policies on the device</c>
      <c>Has the firmware been corrupted?</c>
      <c>Digital signature and MAC covering the firmware image</c>
      <c>Does the firmware update apply to this device?</c>
      <c>Conditions with Vendor ID, Class ID and Device ID</c>
      <c>Is the update older than the active firmware?</c>
      <c>Sequence number in the manifest (1)</c>
      <c>When should the device apply the update?</c>
      <c>Wait directive</c>
      <c>How should the device apply the update?</c>
      <c>Manifest commands</c>
      <c>What kind of firmware binary is it?</c>
      <c>Unpack algorithms to interpret a format.</c>
      <c>Where should the update be obtained?</c>
      <c>Dependencies on other manifests and firmware image URI in Manifest</c>
      <c>Where should the firmware be stored?</c>
      <c>Storage Location and Component Identifier</c>
</texttable>

<t>(1): A device presented with an old, but valid manifest and firmware
must not be tricked into installing such firmware since a
vulnerability in the old firmware image may allow an attacker to
gain control of the device.</t>

<t>Keeping the code size and complexity of a manifest parsers small is important
for constrained IoT devices. Since the manifest parsing code may
also be used by the bootloader it is part of the trusted computing base.</t>

<t>A manifest may not only be used to protect firmware images but also
configuration data such as network credentials or personalization data
related to firmware or software.
Personalization data demonstrates the need for mutually-distrustful
delivery of two or more images into a device. Personalization data
is used with
Trusted Execution Environments (TEEs), which
benefit from a protocol for managing the lifecycle of trusted
applications (TAs) running inside a TEE. TEEs may obtain TAs
from different authors and those TAs may require personalization data,
such as payment information, to be securely conveyed to the TEE. The
TA’s author does not want to expose the TA to the user, and the user
does not want to expose the payment information to the TA’s author.</t>

</section>
<section anchor="securing" title="Securing Firmware Updates">

<t>Using firmware updates to fix vulnerabilities in devices is important but securing this
update mechanism is equally important since security problems are
exacerbated by the update mechanism: update is essentially authorized
remote code execution, so any security problems in the update process
expose that remote code execution system. Failure
to secure the firmware update process will help attackers to take control over devices.</t>

<t>End-to-end security mechanisms are used to protect the firmware
image and the manifest. The following assumptions are made to allow
the firmware consumer to verify the received firmware image and
manifest before updating software:</t>

<t><list style="symbols">
  <t>Authentication ensures that the device can cryptographically identify
the author(s) creating firmware images and manifests. Authenticated
identities may be used as input to the authorization process. Not all
entities creating and signing manifests have the same
permissions. A device needs to determine whether the requested action
is indeed covered by the permission of the party that signed the manifest.
Informing the device about the permissions of the different parties
also happens in an out-of-band fashion and is also a duty of the
Trust Provisioning Authority.</t>
  <t>Integrity protection ensures that no third party can modify the manifest
or the firmware image. To accept an update, a device needs to verify the signature covering
the manifest. There may be one or multiple manifests that need to be
validated, potentially signed by different parties. The device needs
to be in possession of the trust anchors to verify those signatures.
Installing trust anchors to devices via the Trust Provisioning Authority
happens in an out-of-band fashion prior to the firmware update process.</t>
  <t>For confidentiality protection of the firmware image, it must be done in such a
way that the intended firmware consumer(s), other authorized parties,
and no one else can decrypt it. The information
that is encrypted individually for each device/recipient must maintain
friendliness to Content Distribution Networks, bulk storage, and
broadcast protocols. For confidentiality protection of firmware images the author needs
to be in possession of the certificate/public key or a pre-shared key
of a device. The use of confidentiality protection of firmware images
is optional.</t>
</list></t>

<t>A manifest specification must support different cryptographic algorithms
and algorithm extensibility. Moreover, since RSA- and ECC-based signature
schemes may become vulnerable to quantum-accelerated key extraction in the
future, unchangeable bootloader code in ROM is recommended to use post-quantum
secure signature schemes such as hash-based signatures <xref target="RFC8778"/>. A
bootloader author must carefully consider the service lifetime of their
product and the time horizon for quantum-accelerated key extraction.
The worst-case estimate, at time of writing, for the time horizon to key
extraction with quantum acceleration is approximately 2030, based on
current research <xref target="quantum-factorization"/>.</t>

<t>When a device obtains a monolithic firmware image from a single author
without any additional approval steps then the authorization flow is
relatively simple. There are, however, other cases where more complex
policy decisions need to be made before updating a device.</t>

<t>In this architecture the authorization policy is separated from
the underlying communication architecture. This is accomplished
by separating the entities from their permissions. For example,
an author may not have the authority to install a firmware image
on a device in critical infrastructure without the authorization
of a device operator. In this case, the device may be programmed
to reject firmware updates unless they are signed both by the
firmware author and by the device operator.</t>

<t>Alternatively, a device may trust precisely one entity, which
does all permission management and coordination. This entity
allows the device to offload complex permissions
calculations for the device.</t>

</section>
<section anchor="example" title="Example">

<t><xref target="firmware-update"/> illustrates an example message flow
for distributing a firmware image to a device. The firmware
and manifest are stored on the same firmware server and
distributed in a detached manner.</t>

<figure title="First Example Flow for a Firmware Update." anchor="firmware-update"><artwork><![CDATA[
+--------+    +-----------------+    +-----------------------------+
|        |    | Firmware Server |    |         IoT Device          |
| Author |    | Status Tracker  |    | +------------+ +----------+ |
+--------+    | Server          |    | |  Firmware  | |Bootloader| |
  |           +-----------------+    | |  Consumer  | |          | |
  |                   |              | +------------+ +----------+ |
  |                   |              |      |                |     |
  |                   |              |  +-----------------------+  |
  | Create Firmware   |              |  | Status Tracker Client |  |
  |--------------+    |              |  +-----------------------+  |
  |              |    |               `''''''''''''''''''''''''''''
  |<-------------+    |                     |        |       |
  |                   |                     |        |       |
  | Upload Firmware   |                     |        |       |
  |------------------>|                     |        |       |
  |                   |                     |        |       |
  | Create Manifest   |                     |        |       |
  |---------------+   |                     |        |       |
  |               |   |                     |        |       |
  |<--------------+   |                     |        |       |
  |                   |                     |        |       |
  | Sign Manifest     |                     |        |       |
  |-------------+     |                     |        |       |
  |             |     |                     |        |       |
  |<------------+     |                     |        |       |
  |                   |                     |        |       |
  | Upload Manifest   |                     |        |       |
  |------------------>|  Notification of    |        |       |
  |                   |  new firmware image |        |       |
  |                   |----------------------------->|       |
  |                   |                     |        |       |
  |                   |                     |Initiate|       |
  |                   |                     | Update |       |
  |                   |                     |<-------|       |
  |                   |                     |        |       |
  |                   |   Query Manifest    |        |       |
  |                   |<--------------------|        .       |
  |                   |                     |        .       |
  |                   |   Send Manifest     |        .       |
  |                   |-------------------->|        .       |
  |                   |                     | Validate       |
  |                   |                     | Manifest       |
  |                   |                     |--------+       |
  |                   |                     |        |       |
  |                   |                     |<-------+       |
  |                   |                     |        .       |
  |                   |  Request Firmware   |        .       |
  |                   |<--------------------|        .       |
  |                   |                     |        .       |
  |                   | Send Firmware       |        .       |
  |                   |-------------------->|        .       |
  |                   |                     | Verify .       |
  |                   |                     | Firmware       |
  |                   |                     |--------+       |
  |                   |                     |        |       |
  |                   |                     |<-------+       |
  |                   |                     |        .       |
  |                   |                     | Store  .       |
  |                   |                     | Firmware       |
  |                   |                     |--------+       |
  |                   |                     |        |       |
  |                   |                     |<-------+       |
  |                   |                     |        .       |
  |                   |                     |        .       |
  |                   |                     |        .       |
  |                   |                     |        |       |
  |                   |                     | Update |       |
  |                   |                     |Complete|       |
  |                   |                     |------->|       |
  |                   |                              |       |
  |                   |  Firmware Update Completed   |       |
  |                   |<-----------------------------|       |
  |                   |                              |       |
  |                   |  Reboot                      |       |
  |                   |----------------------------->|       |
  |                   |                     |        |       |
  |                   |                     |        |       |
                      |                     |        |Reboot |
  |                   |                     |        |------>|
  |                   |                     |        |       |
  |                   |                     |        .       |
  |                   |                 +---+----------------+--+
  |                   |                S|   |                |  |
  |                   |                E|   | Verify         |  |
  |                   |                C|   | Firmware       |  |
  |                   |                U|   | +--------------|  |
  |                   |                R|   | |              |  |
  |                   |                E|   | +------------->|  |
  |                   |                 |   |                |  |
  |                   |                B|   | Activate new   |  |
  |                   |                O|   | Firmware       |  |
  |                   |                O|   | +--------------|  |
  |                   |                T|   | |              |  |
  |                   |                 |   | +------------->|  |
  |                   |                P|   |                |  |
  |                   |                R|   | Boot new       |  |
  |                   |                O|   | Firmware       |  |
  |                   |                C|   | +--------------|  |
  |                   |                E|   | |              |  |
  |                   |                S|   | +------------->|  |
  |                   |                S|   |                |  |
  |                   |                 +---+----------------+--+
  |                   |                     |        .       |
  |                   |                     |        |       |
  |                   |                     .        |       |
  |                   |  Device running new firmware |       |
  |                   |<-----------------------------|       |
  |                   |                     .        |       |
  |                   |                              |       |
]]></artwork></figure>

<t><xref target="firmware-update2"/> shows an exchange that starts with the
status tracker querying the device for its current firmware version.
Later, a new firmware version becomes available and since this
device is running an older version the status tracker server interacts
with the device to initiate an update.</t>

<t>The manifest and the firmware are stored on different servers in this
example. When the device processes the manifest it learns where to
download the new firmware version. The firmware consumer downloads
the firmware image with the newer version X.Y.Z after successful validation
of the manifest. Subsequently, a reboot is initiated and the secure
boot process starts. Finally, the device reports the successful boot
of the new firmware version.</t>

<figure title="Second Example Flow for a Firmware Update." anchor="firmware-update2"><artwork><![CDATA[
 +---------+   +-----------------+    +-----------------------------+
 | Status  |   | Firmware Server |    | +------------+ +----------+ |
 | Tracker |   | Status Tracker  |    | |  Firmware  | |Bootloader| |
 | Server  |   | Server          |    | |  Consumer  | |          | |
 +---------+   +-----------------+    | |  +Status   | +----------+ |
      |                |              | |  Tracker   |        |     |
      |                |              | |  Client    |        |     |
      |                |              | +------------+        |     |
      |                |              |      |  IoT Device    |     |
      |                |               `''''''''''''''''''''''''''''
      |                |                     |                |
      |        Query Firmware Version        |                |
      |------------------------------------->|                |
      |        Firmware Version A.B.C        |                |
      |<-------------------------------------|                |
      |                |                     |                |
      |         <<some time later>>          |                |
      |                |                     |                |
    _,...._         _,...._                  |                |
  ,'       `.     ,'       `.                |                |
 |   New     |   |   New     |               |                |
 \ Manifest  /   \ Firmware  /               |                |
  `.._   _,,'     `.._   _,,'                |                |
      `''             `''                    |                |
      |            Push manifest             |                |
      |----------------+-------------------->|                |
      |                |                     |                |
      |                '                     |                '
      |                |                     | Validate       |
      |                |                     | Manifest       |
      |                |                     |---------+      |
      |                |                     |         |      |
      |                |                     |<--------+      |
      |                | Request firmware    |                |
      |                | X.Y.Z               |                |
      |                |<--------------------|                |
      |                |                     |                |
      |                | Firmware X.Y.Z      |                |
      |                |-------------------->|                |
      |                |                     |                |
      |                |                     | Verify         |
      |                |                     | Firmware       |
      |                |                     |--------------+ |
      |                |                     |              | |
      |                |                     |<-------------+ |
      |                |                     |                |
      |                |                     | Store          |
      |                |                     | Firmware       |
      |                |                     |-------------+  |
      |                |                     |             |  |
      |                |                     |<------------+  |
      |                |                     |                |
      |                |                     |                |
      |                |                     | Trigger Reboot |
      |                |                     |--------------->|
      |                |                     |                |
      |                |                     |                |
      |                |                     | __..-------..._'
      |                |                    ,-'               `-.
      |                |                   |      Secure Boot    |
      |                |                   `-.                 _/
      |                |                     |`--..._____,,.,-'
      |                |                     |                |
      | Device running firmware X.Y.Z        |                |
      |<-------------------------------------|                |
      |                |                     |                |
      |                |                     |                |
]]></artwork></figure>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document describes terminology, requirements and an architecture for
firmware updates of IoT devices. The content of the document is thereby
focused on improving security of IoT devices via firmware update mechanisms
and informs the standardization of a manifest format.</t>

<t>An in-depth examination of the security considerations of the
architecture is presented in <xref target="I-D.ietf-suit-information-model"/>.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their feedback:</t>

<t><list style="symbols">
  <t>Geraint Luff</t>
  <t>Amyas Phillips</t>
  <t>Dan Ros</t>
  <t>Thomas Eichinger</t>
  <t>Michael Richardson</t>
  <t>Emmanuel Baccelli</t>
  <t>Ned Smith</t>
  <t>Jim Schaad</t>
  <t>Carsten Bormann</t>
  <t>Cullen Jennings</t>
  <t>Olaf Bergmann</t>
  <t>Suhas Nandakumar</t>
  <t>Phillip Hallam-Baker</t>
  <t>Marti Bolivar</t>
  <t>Andrzej Puzdrowski</t>
  <t>Markus Gueller</t>
  <t>Henk Birkholz</t>
  <t>Jintao Zhu</t>
  <t>Takeshi Takahashi</t>
  <t>Jacob Beningo</t>
  <t>Kathleen Moriarty</t>
  <t>Bob Briscoe</t>
  <t>Roman Danyliw</t>
  <t>Brian Carpenter</t>
  <t>Theresa Enghardt</t>
  <t>Rich Salz</t>
</list></t>

<t>We would also like to thank the WG chairs, Russ Housley, David Waltermire,
Dave Thaler for their support and their reviews.</t>

</section>


  </middle>

  <back>


    <references title='Informative References'>





<reference  anchor="RFC8240" target='https://www.rfc-editor.org/info/rfc8240'>
<front>
<title>Report from the Internet of Things Software Update (IoTSU) Workshop 2016</title>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<date year='2017' month='September' />
<abstract><t>This document provides a summary of the Internet of Things Software Update (IoTSU) Workshop that took place at Trinity College Dublin, Ireland on the 13th and 14th of June, 2016.  The main goal of the workshop was to foster a discussion on requirements, challenges, and solutions for bringing software and firmware updates to IoT devices. This report summarizes the discussions and lists recommendations to the standards community.</t><t>Note that this document is a report on the proceedings of the workshop.  The views and positions documented in this report are those of the workshop participants and do not necessarily reflect IAB views and positions.</t></abstract>
</front>
<seriesInfo name='RFC' value='8240'/>
<seriesInfo name='DOI' value='10.17487/RFC8240'/>
</reference>



<reference  anchor="RFC6024" target='https://www.rfc-editor.org/info/rfc6024'>
<front>
<title>Trust Anchor Management Requirements</title>
<author initials='R.' surname='Reddy' fullname='R. Reddy'><organization /></author>
<author initials='C.' surname='Wallace' fullname='C. Wallace'><organization /></author>
<date year='2010' month='October' />
<abstract><t>A trust anchor represents an authoritative entity via a public key and associated data.  The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative.  A relying party uses trust anchors to determine if a digitally signed object is valid by verifying a digital signature using the trust anchor's public key, and by enforcing the constraints expressed in the associated data for the trust anchor.  This document describes some of the problems associated with the lack of a standard trust anchor management mechanism and defines requirements for data formats and push-based protocols designed to address these problems.  This  document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract>
</front>
<seriesInfo name='RFC' value='6024'/>
<seriesInfo name='DOI' value='10.17487/RFC6024'/>
</reference>



<reference  anchor="RFC7228" target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='M.' surname='Ersue' fullname='M. Ersue'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2014' month='May' />
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference  anchor="RFC8778" target='https://www.rfc-editor.org/info/rfc8778'>
<front>
<title>Use of the HSS/LMS Hash-Based Signature Algorithm with CBOR Object Signing and Encryption (COSE)</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='2020' month='April' />
<abstract><t>This document specifies the conventions for using the Hierarchical Signature System (HSS) / Leighton-Micali Signature (LMS) hash-based signature algorithm with the CBOR Object Signing and Encryption (COSE) syntax. The HSS/LMS algorithm is one form of hash-based digital signature; it is described in RFC 8554.</t></abstract>
</front>
<seriesInfo name='RFC' value='8778'/>
<seriesInfo name='DOI' value='10.17487/RFC8778'/>
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>An Information Model for Firmware Updates in IoT Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='June' day='2' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality.  One component of such a firmware update is a concise and machine- processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-07' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-07.txt' />
</reference>



<reference anchor="I-D.ietf-teep-architecture">
<front>
<title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>

<author initials='M' surname='Pei' fullname='Mingliang Pei'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<author initials='D' surname='Wheeler' fullname='David Wheeler'>
    <organization />
</author>

<date month='July' day='13' year='2020' />

<abstract><t>A Trusted Execution Environment (TEE) is an environment that enforces that any code within that environment cannot be tampered with, and that any data used by such code cannot be read or tampered with by any code outside that environment.  This architecture document motivates the design and standardization of a protocol for managing the lifecycle of trusted applications running inside such a TEE.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-12' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-teep-architecture-12.txt' />
</reference>



<reference anchor="I-D.ietf-suit-manifest">
<front>
<title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<author initials='K' surname='Zandberg' fullname='Koen Zandberg'>
    <organization />
</author>

<date month='July' day='13' year='2020' />

<abstract><t>This specification describes the format of a manifest.  A manifest is a bundle of metadata about the firmware for an IoT device, where to find the firmware, the devices to which it applies, and cryptographic information protecting the manifest.  Firmware updates and secure boot both tend to use sequences of common operations, so the manifest encodes those sequences of operations, rather than declaring the metadata.  The manifest also serves as a building block for secure boot.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-09' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-manifest-09.txt' />
</reference>



<reference anchor="I-D.ietf-rats-architecture">
<front>
<title>Remote Attestation Procedures Architecture</title>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<author initials='M' surname='Richardson' fullname='Michael Richardson'>
    <organization />
</author>

<author initials='N' surname='Smith' fullname='Ned Smith'>
    <organization />
</author>

<author initials='W' surname='Pan' fullname='Wei Pan'>
    <organization />
</author>

<date month='September' day='1' year='2020' />

<abstract><t>In network protocol exchanges, it is often the case that one entity (a Relying Party) requires evidence about a remote peer to assess the peer's trustworthiness, and a way to appraise such evidence.  The evidence is typically a set of claims about its software and hardware platform.  This document describes an architecture for such remote attestation procedures (RATS).</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-rats-architecture-06' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-rats-architecture-06.txt' />
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC8392" target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='E.' surname='Wahlstroem' fullname='E. Wahlstroem'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2018' month='May' />
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>


<reference anchor="quantum-factorization" target="https://www.nature.com/articles/s41598-018-36058-z">
  <front>
    <title>Quantum Annealing for Prime Factorization</title>
    <author initials="." surname="Department of Computer Science, Purdue University" fullname="Shuxian Jiang">
      <organization></organization>
    </author>
    <author initials="." surname="Quantum Computing Institute, Oak Ridge National Laboratory" fullname="Keith A. Britt">
      <organization></organization>
    </author>
    <author initials="." surname="Quantum Computing Institute, Oak Ridge National Laboratory" fullname="Alexander J. McCaskey">
      <organization></organization>
    </author>
    <author initials="." surname="Quantum Computing Institute, Oak Ridge National Laboratory" fullname="Travis S. Humble">
      <organization></organization>
    </author>
    <author initials="." surname="Department of Chemistry, Physics and Birck Nanotechnology Center, Purdue University" fullname="Sabre Kais">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="LwM2M" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf">
  <front>
    <title>Lightweight Machine to Machine Technical Specification, Version 1.0.2</title>
    <author initials="." surname="OMA" fullname="Open Mobile Alliance">
      <organization></organization>
    </author>
    <date year="2018" month="February" day="09"/>
  </front>
  <format type="PDF" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf"/>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAKKhiV8AA+19e3Pc1pXn//gUqLhqTEbdTVlOJonGmxmKkmMl1mNEKpqd
cpWD7kazEaKBDoAm1bY0tV9jv95+kj2/87gPAKRIyYl3q4blsrobuK9zzz3v
c+50Ok26oivzh+lx+nXRbK6yJk9fb5dZl6fHzWJddPmi29Fvq7pJn1Zd3lR5
l9ar9GxdVOdtks3nTX55u9b1WbKsF1W2odGWTbbqpkXerabtruimWfD29Isv
kwV1cV43+4dpUa3qJCm2zcO0a3Zt9+D+/d/df5DQSNnD9DRf7Jqi2ydXdXNx
3tS7Lf32+ulZcpHv6aflQzfn6WOMmCRtl1XL77OyrmgW+7xNtsXDJE2b1SJf
tt2+1F/TtKsXwceiWuZVZz+0ddM1+ap13/eb6GvXFAv38qLebKite1pUZVH5
YfK33bQs2m5Knczrkl6b1r+8R08IVptsuyUwy7vZrlvXDU12Sg/5r6jo7Uez
9FndZJX9KPB91OTVMqviR3VznlXFD1lX1BVtWbNJvy02BPWlvZBvsqJ0jWfc
+N+yZjOjNST9gb+ZpWftYl2v8qo4j0f/JquqvB15fNsZrLmDWec6uHYWj2c0
3fqqt/zH2WWxjB/EQ39bVFlT90ZdotVsjlb/VvILM2o1GPIZQTxvimwRj/ms
KGuab+9ZPOxJXbW7klCw6w29kcb/tuHGslJgfrOhlpc5UPTV1ye/ffCr+/rx
n+8/+JV+/M2DB7+1F37zG/74dPp45g+X66iuppt6mZfRK12eb6PzN+xgQ0tY
5W0XPWmyrh20C+aAmf36i9/Zr1/+7gE+/m1Hi99tpqts0dWNAYah0WXNeU7H
Zt112/bh0dHV1dWsytAz4HGUNV2xKPP2qP3VF7/+3W+n97/47fTLf77/699O
f5DmQsf+XQZIjwmDMtrFcyY+L5tik6dfh4NyI3eo+M/ts+JWvqVBcXhB8U7q
zXZHxCQ9XRR5tcgn6ctds9wRwatoh5oWZCiNMOJ0vXtb0CH8I/3vfHwIm610
jtk+rVpaCQ00SV9kF+mrYnmep895xlmZfpvN6VDSIvpj/SkvunV6jNNQdN3f
ebDjMn9LZJRg8Uc6C4uTrCV6+3ce86yh09mmp7P0m91mXuY/9ZaNNV/nG6LM
zZ7arfdtsWhTWnX6qGgWFzTjqibEX1d1WZ/v05McjOYWOJERw0z/lBUg/t9e
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

-->

</rfc>

