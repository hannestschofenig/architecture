<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-architecture-05" category="info">

  <front>
    <title abbrev="IoT Firmware Update Architecture">A Firmware Update Architecture for Internet of Things Devices</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="M." surname="Meriac" fullname="Milosch Meriac">
      <organization>Consultant</organization>
      <address>
        <email>milosch@meriac.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="D." surname="Brown" fullname="David Brown">
      <organization>Linaro</organization>
      <address>
        <email>david.brown@linaro.org</email>
      </address>
    </author>

    <date year="2019" month="April" day="09"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Vulnerabilities with Internet of Things (IoT) devices have raised 
the need for a solid and secure firmware update mechanism that is 
also suitable for constrained devices. Incorporating such update 
mechanism to fix vulnerabilities, to update configuration settings 
as well as adding new functionality is recommended by security 
experts.</t>

<t>This document lists requirements and describes an architecture for 
a firmware update mechanism suitable for IoT devices. The 
architecture is agnostic to the transport of the firmware images 
and associated meta-data.</t>

<t>This version of the document assumes asymmetric cryptography and 
a public key infrastructure. Future versions may also describe 
a symmetric key approach for very constrained devices.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>When developing IoT devices, one of the most difficult problems 
to solve is how to update the firmware on the device. Once the 
device is deployed, firmware updates play a critical part in its 
lifetime, particularly when devices have a long lifetime, are 
deployed in remote or inaccessible areas where manual 
intervention is cost prohibitive or otherwise difficult. Updates 
to the firmware of an IoT device are done to fix bugs in software, 
to add new functionality, and to re-configure the device to work 
in new environments or to behave differently in an already 
deployed context.</t>

<t>The firmware update process, among other goals, has to ensure that</t>

<t><list style="symbols">
  <t>The firmware image is authenticated and integrity protected. 
Attempts to flash a modified firmware image or an image from 
an unknown source are prevented.</t>
  <t>The firmware image can be confidentiality protected so that 
attempts by an adversary to recover the plaintext binary can 
be prevented. Obtaining the firmware is often one of 
the first steps to mount an attack since it gives the adversary 
valuable insights into used software libraries, configuration 
settings and generic functionality (even though reverse 
engineering the binary can be a tedious process).</t>
</list></t>

<t>More details about the security goals are discussed in 
<xref target="architecture"/> and requirements are described in <xref target="requirements"/>.</t>

</section>
<section anchor="terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, 
“SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT 
RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are 
to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t>

<t>This document uses the following terms:</t>

<t><list style="symbols">
  <t>Manifest: The manifest contains meta-data about the firmware 
image. The manifest is protected against modification and 
provides information about the author.</t>
  <t>Firmware Image: The firmware image is a binary that may 
contain the complete software of a device or a subset of 
it. The firmware image may consist of multiple images, if 
the device contains more than one microcontroller. The 
image may consist of a differential update for performance 
reasons. Firmware is the more universal term. Both terms 
are used in this document and are interchangeable.</t>
  <t>Bootloader: A bootloader is a piece of software that is 
executed once a microcontroller has been reset. It is 
responsible for deciding whether to boot a firmware image 
that is present or whether to obtain and verify a new 
firmware image. Since the bootloader is a security critical 
component its functionality may be split into separate stages. 
Such a multi-stage bootloader may offer very basic functionality 
in the first stage and resides in ROM whereas the second stage 
may implement more complex functionality and resides in flash 
memory so that it can be updated in the future (in case bugs 
have been found). The exact split of components into the 
different stages, the number of firmware images stored by an 
IoT device, and the detailed functionality varies throughout 
different implementations. A more detailed discussion is 
provided in <xref target="bootloader"/>.</t>
  <t>Microcontroller (MCU for microcontroller unit): An MCU is a 
compact integrated circuit designed for use in embedded systems. 
A typical microcontroller includes a processor, memory (RAM and flash), 
input/output (I/O) ports and other features connected via some 
bus on a single chip. The term ‘system on chip (SoC)’ is often used for 
these types of devices.</t>
  <t>System on Chip (SoC): An SoC is an integrated circuit that integrates all 
components of a computer, such as CPU, memory, input/output ports, 
secondary storage, etc.</t>
  <t>Homogeneous Storage Architecture (HoSA): A device that stores 
all firmware components in the same way, for example in a file 
system or in flash memory.</t>
  <t>Heterogeneous Storage Architecture (HeSA): A device that 
stores at least one firmware component differently from the rest, 
for example a device with an external, updatable radio, or a 
device with internal and external flash memory.</t>
</list></t>

<t>The following entities are used:</t>

<t><list style="symbols">
  <t>Author: The author is the entity that creates the firmware image. 
There may be multiple authors in a system either when a device 
consists of multiple micro-controllers or when the the final 
firmware image consists of software components from multiple 
companies.</t>
  <t>Firmware Consumer: The firmware consumer is the recipient of the 
firmware image and the manifest.</t>
  <t>Device: A device refers to the entire IoT product, which consists of
one or many MCUs, sensors and/or actuators. Many IoT devices
sold today contain multiple MCUs and therefore a single device may 
need to obtain more than one firmware image and manifest to 
succesfully perform an update. The terms device and firmware 
consumer are used interchangably since the firmware consumer is 
one software component running on an MCU on the device.</t>
  <t>Status Tracker: The status tracker offers device management 
functionality to monitor the firmware update 
process. A status tracker may, for example, want to know what 
state of the firmware update cycle the device is currently in.</t>
  <t>Firmware Server: The firmware server stores firmware images and manifests and 
distributes them to IoT devices. 
Some deployments may require a store-and-forward concept, which requires 
storing the firmware images/manifests on more than one entity before<vspace />
they reach the device.</t>
  <t>Device Operator: The actor responsible for the day-to-day operation 
of a fleet of IoT devices.</t>
  <t>Network Operator: The actor responsible for the operation of a 
network to which IoT devices connect.</t>
</list></t>

<t>In addition to the entities in the list above there is an orthogonal 
infrastructure with a Trust Provisioning Authority (TPA) distributing 
trust anchors and authorization permissions to various entities in 
the system. The TPA may also delegate rights to install, update, 
enhance, or delete trust anchors and authorization permissions to 
other parties in the system. This infrastructure overlaps the 
communication architecture and different deployments may empower 
certain entities while other deployments may not. For example, 
in some cases, the Original Design Manufacturer (ODM), which is a 
company that designs and manufactures a product, may act as a 
TPA and may decide to remain in full control over the firmware 
update process of their products.</t>

<t>The terms ‘trust anchor’ and ‘trust anchor store’ are defined in
<xref target="RFC6024"/>:</t>

<t><list style="symbols">
  <t>“A trust anchor represents an authoritative entity via a public
key and associated data.  The public key is used to verify digital
signatures, and the associated data is used to constrain the types
of information for which the trust anchor is authoritative.”</t>
  <t>“A trust anchor store is a set of one or more trust anchors stored
in a device.  A device may have more than one trust anchor store,
each of which may be used by one or more applications.”
A trust anchor store must resist modification against unauthorized 
insertion, deletion, and modification.</t>
</list></t>

</section>
<section anchor="requirements" title="Requirements">

<t>The firmware update mechanism described in this specification 
was designed with the following requirements in mind:</t>

<t><list style="symbols">
  <t>Agnostic to how firmware images are distributed</t>
  <t>Friendly to broadcast delivery</t>
  <t>Use state-of-the-art security mechanisms</t>
  <t>Rollback attacks must be prevented</t>
  <t>High reliability</t>
  <t>Operate with a small bootloader</t>
  <t>Small Parsers</t>
  <t>Minimal impact on existing firmware formats</t>
  <t>Robust permissions</t>
  <t>Diverse modes of operation</t>
</list></t>

<section anchor="agnostic-to-how-firmware-images-are-distributed" title="Agnostic to how firmware images are distributed">

<t>Firmware images can be conveyed to devices in a variety of ways, 
including USB, UART, WiFi, BLE, low-power WAN technologies, etc. 
and use different protocols (e.g., CoAP, HTTP). The specified 
mechanism needs to be agnostic to the distribution of the 
firmware images and manifests.</t>

</section>
<section anchor="friendly-to-broadcast-delivery" title="Friendly to broadcast delivery">

<t>This architecture does not specify any specific broadcast protocol.
However, given that broadcast may be desirable for some networks, 
updates must cause the least disruption possible both in metadata 
and payload transmission.</t>

<t>For an update to be broadcast friendly, it cannot rely on link 
layer, network layer, or transport layer security. In addition, 
the same message must be deliverable to many devices, both those 
to which it applies and those to which it does not, without a 
chance that the wrong device will accept the update. Considerations 
that apply to network broadcasts apply equally to the use of 
third-party content distribution networks for payload distribution.</t>

</section>
<section anchor="use-state-of-the-art-security-mechanisms" title="Use state-of-the-art security mechanisms">

<t>End-to-end security between the author and the device, as shown 
in <xref target="architecture"/>, is used to ensure that the device can verify 
firmware images and manifests produced by authorized authors.</t>

<t>The use of post-quantum secure signature mechanisms, such as 
hash-based signatures, should be explored. A migration to post-quantum 
secure signatures would require significant effort, therefore, 
mandatory-to-implement support for post-quantum secure signatures 
is a goal.</t>

<t>A mandatory-to-implement set of algorithms has to be defined offering 
a key length of 112-bit symmetric key or security or more, as outlined 
in Section 20 of RFC 7925 <xref target="RFC7925"/>. This corresponds to a 233 bit 
ECC key or a 2048 bit RSA key.</t>

<t>If the firmware image is to be encrypted, it must be done in such a 
way that every intended recipient can decrypt it. The information 
that is encrypted individually for each device must be an absolute 
minimum, for example AES Key Wrap <xref target="RFC5649"/>, in order to maintain 
friendliness to Content Distribution Networks, bulk storage, and 
broadcast protocols.</t>

</section>
<section anchor="rollback-attacks-must-be-prevented" title="Rollback attacks must be prevented">

<t>A device presented with an old, but valid manifest and firmware 
must not be tricked into installing such firmware since a 
vulnerability in the old firmware image may allow an attacker to 
gain control of the device.</t>

</section>
<section anchor="high-reliability" title="High reliability">

<t>A power failure at any time must not cause a failure of the device. 
A failure to validate any part of an update must not cause a 
failure of the device. One way to achieve this functionality is 
to provide a minimum of two storage locations for firmware and one 
bootable location for firmware. An alternative approach is to use a 
2nd stage bootloader with build-in full featured firmware update 
functionality such that it is possible to return to the update 
process after power down.</t>

<t>Note: This is an implementation requirement rather than a requirement 
on the manifest format.</t>

</section>
<section anchor="operate-with-a-small-bootloader" title="Operate with a small bootloader">

<t>The bootloader must be minimal, containing only flash support, 
cryptographic primitives and optionally a recovery mechanism. The 
recovery mechanism is used in case the update process failed and 
may include support for firmware updates over serial, USB or even 
a limited version of wireless connectivity standard like a limited 
Bluetooth Smart. Such a recovery mechanism must provide security 
at least at the same level as the full featured firmware update 
functionalities.</t>

<t>The bootloader needs to verify the received manifest and to install 
the bootable firmware image. The bootloader should not require 
updating since a failed update poses a risk in reliability. If more 
functionality is required in the bootloader, it must use a two-stage 
bootloader, with the first stage comprising the functionality defined 
above.</t>

<t>All information necessary for a device to make a decision about the 
installation of a firmware update must fit into the available RAM of 
a constrained IoT device. This prevents flash write exhaustion.</t>

<t>Note: This is an implementation requirement.</t>

</section>
<section anchor="small-parsers" title="Small Parsers">

<t>Since parsers are known sources of bugs they must be minimal. 
Additionally, it must be easy to parse only those fields that are 
required to validate at least one signature or MAC with minimal 
exposure.</t>

</section>
<section anchor="minimal-impact-on-existing-firmware-formats" title="Minimal impact on existing firmware formats">

<t>The design of the firmware update mechanism must not require 
changes to existing firmware formats.</t>

</section>
<section anchor="robust-permissions" title="Robust permissions">

<t>When a device obtains a monolithic firmware image from a single author
without any additional approval steps then the authorization flow is
relatively simple. There are, however, other cases where more complex 
policy decisions need to be made before updating a device.</t>

<t>In this architecture the authorization policy is separated from 
the underlying communication architecture. This is accomplished 
by separating the entities from their permissions. For example, 
an author may not have the authority to install a firmware image 
on a device in critical infrastructure without the authorization 
of a device operator. In this case, the device may be programmed 
to reject firmware updates unless they are signed both by the 
firmware author and by the device operator.</t>

<t>Alternatively, a device may trust precisely one entity, which 
does all permission management and coordination. This entity 
allows the device to offload complex permissions 
calculations for the device.</t>

</section>
<section anchor="operating-modes" title="Operating modes">

<t>There are three broad classifications of update operating modes.</t>

<t><list style="symbols">
  <t>Client-initiated Update</t>
  <t>Server-initiated Update</t>
  <t>Hybrid Update</t>
</list></t>

<t>Client-initiated updates take the form of a firmware consumer on 
a device proactively checking (polling) for new firmware images.</t>

<t>Server-initiated updates are important to consider because
timing of updates may need to be tightly controlled in some high-
reliability environments. In this case the status tracker determines 
what devices qualify for a firmware update. Once those devices have been 
selected the firmware server distributes updates to the firmware consumers.</t>

<t>Note: This assumes that the status tracker is able to reach the 
device, which may require devices to keep reachability  information at 
the status tracker up-to-date. This may also require keeping state at 
NATs and stateful packet filtering firewalls alive.</t>

<t>Hybrid updates are those that require an interaction between the 
firmware consumer and the status tracker. The status tracker 
pushes notifications of availability of an update to the firmware consumer, 
and it then downloads the image from a firmware server 
as soon as possible.</t>

<t>An alternative view to the operating modes is to consider the steps a 
device has to go through in the course of an update:</t>

<t><list style="symbols">
  <t>Notification</t>
  <t>Pre-authorisation</t>
  <t>Dependency resolution</t>
  <t>Download</t>
  <t>Installation</t>
</list></t>

<t>The notification step consists of the status tracker informing the 
firmware consumer that an update is available. This can be accomplished via 
polling (client-initiated), push notifications (server-initiated), 
or more complex mechanisms.</t>

<t>The pre-authorisation step involves verifying whether the entity 
signing the manifest is indeed authorized to perform an update. 
The firmware consumer must also determine whether it should fetch and 
process a firmware image, which is referenced in a manifest.</t>

<t>A dependency resolution phase is needed when more than one 
component can be updated or when a differential update is used.
The necessary dependencies must be available prior to installation.</t>

<t>The download step is the process of acquiring a local copy of the
firmware image.  When the download is client-initiated, this means 
that the firmware consumer chooses when a download occurs and initiates 
the download process.  When a download is server-initiated, 
this means that the status tracker tells 
the device when to download or that it initiates the transfer 
directly to the firmware consumer. For example, a download from an 
HTTP-based firmware server is client-initiated. Pushing a manifest 
and firmware image to the transfer to the Package resource of the LwM2M 
Firmware Update object <xref target="LwM2M"/> is server-initiated.</t>

<t>If the firmware consumer has downloaded a new firmware image and is ready to
install it, it may need to wait for a trigger from the status tracker to
initiate the installation, may trigger the update automatically, or
may go through a more complex decision making process to determine
the appropriate timing for an update (such as delaying the update
process to a later time when end users are less impacted by the 
update process).</t>

<t>Installation is the act of processing the payload into a format that
the IoT device can recognise and the bootloader is responsible for 
then booting from the newly installed firmware image.</t>

<t>Each of these steps may require different permissions.</t>

</section>
</section>
<section anchor="claims" title="Claims">

<t>Claims in the manifest offer a way to convey instructions to
a device that impact the firmware update process. To have any 
value the manifest containing those claims must be authenticated
and integrity protected. The credential used to must be directly 
or indirectly related to the trust anchor installed at the device
by the Trust Provisioning Authority.</t>

<t>The baseline claims for all manifests are described in <xref target="I-D.ietf-suit-information-model"/>. 
For example, there are:</t>

<t><list style="symbols">
  <t>Do not install firmware with earlier metadata than the current 
metadata.</t>
  <t>Only install firmware with a matching vendor, model, hardware 
revision, software version, etc.</t>
  <t>Only install firmware that is before its best-before timestamp.</t>
  <t>Only allow a firmware installation if dependencies have been met.</t>
  <t>Choose the mechanism to install the firmware, based on the type 
of firmware it is.</t>
</list></t>

</section>
<section anchor="architecture" title="Communication Architecture">

<t><xref target="arch-figure"/> shows the communication architecture where a 
firmware image is created by an author, and uploaded to a firmware
server. The firmware image/manifest is distributed to the device 
either in a push or pull manner using the firmware consumer residing on
the device. The device operator keeps track of the process using
the status tracker. This allows the device operator to know and 
control what devices have received an update and which of them are 
still pending an update.</t>

<figure title="Architecture." anchor="arch-figure"><artwork><![CDATA[
              Firmware +  +----------+       Firmware + +-----------+
              Manifest    |          |-+     Manifest   |           |-+
               +--------->| Firmware | |<---------------|           | |
               |          | Server   | |                |  Author   | |
               |          |          | |                |           | |
               |          +----------+ |                +-----------+ |
               |            +----------+                  +-----------+
               |
               |
               |
              -+--                                  ------
         ----  |  ----                          ----      ----
       //      |      \\                      //              \\
      /        |        \                    /                  \
     /         |         \                  /                    \
    /          |          \                /                      \
   /           |           \              /                        \
  |            v            |            |                          |
  |     +------------+                                              |
  |     |  Firmware  |      |            |                          |
 |      |  Consumer  |       | Device    |       +--------+          |
 |      +------------+       | Management|       |        |          |
 |      |            |<------------------------->| Status |          |
 |      |   Device   |       |          |        | Tracker|          |
 |      +------------+       |          ||       |        |         |
  |                         |           ||       +--------+         |
  |                         |            |                          |
  |                         |             \                        /
   \                       /               \                      /
    \                     /                 \      Device        /
     \     Network       /                   \     Operator     /
      \   Operator      /                     \\              //
       \\             //                        ----      ----
         ----     ----                              ------
             -----

]]></artwork></figure>

<t>End-to-end security mechanisms are used to protect the firmware 
image and the manifest although <xref target="e2e-figure"/> does not show the 
manifest itself since it may be distributed independently.</t>

<figure title="End-to-End Security." anchor="e2e-figure"><artwork><![CDATA[
                            +-----------+
+--------+                  |           |                   +--------+
|        |  Firmware Image  | Firmware  |   Firmware Image  |        |
| Device |<-----------------| Server    |<------------------| Author |
|        |                  |           |                   |        |
+--------+                  +-----------+                   +--------+
     ^                                                          *
     *                                                          *
     ************************************************************
                        End-to-End Security
]]></artwork></figure>

<t>Whether the firmware image and the manifest is pushed to the device or 
fetched by the device is a deployment specific decision.</t>

<t>The following assumptions are made to allow the firmware consumer to verify the 
received firmware image and manifest before updating software:</t>

<t><list style="symbols">
  <t>To accept an update, a device needs to verify the signature covering 
the manifest. There may be one or multiple manifests that need to be 
validated, potentially signed by different parties. The device needs 
to be in possession of the trust anchors to verify those signatures. 
Installing trust anchors to devices via the Trust Provisioning Authority 
happens in an out-of-band fashion prior to the firmware update process.</t>
  <t>Not all entities creating and signing manifests have the same 
permissions. A device needs to determine whether the requested action
is indeed covered by the permission of the party that signed the manifest. 
Informing the device about the permissions of the different parties 
also happens in an out-of-band fashion and is also a duty of the 
Trust Provisioning Authority.</t>
  <t>For confidentiality protection of firmware images the author needs 
to be in possession of the certificate/public key or a pre-shared key 
of a device. The use of confidentiality protection of firmware images 
is deployment specific.</t>
</list></t>

<t>There are different types of delivery modes, which are illustrated 
based on examples below.</t>

<t>There is an option for embedding a firmware image into a manifest. 
This is a useful approach for deployments where devices are not connected 
to the Internet and cannot contact a dedicated firmware server for the firmware 
download. It is also applicable when the firmware update happens via a 
USB stick or via Bluetooth Smart. <xref target="attached-firmware-figure"/> shows this 
delivery mode graphically.</t>

<figure title="Manifest with attached firmware." anchor="attached-firmware-figure"><artwork><![CDATA[
              /------------\                 /------------\
             /Manifest with \               /Manifest with \
             |attached      |               |attached      |
             \firmware image/               \firmware image/
              \------------/  +-----------+  \------------/
  +--------+                  |           |                 +--------+
  |        |<.................| Firmware  |<................|        |
  | Device |                  | Server    |                 | Author |
  |        |                  |           |                 |        |
  +--------+                  +-----------+                 +--------+
]]></artwork></figure>

<t><xref target="online-firmware-figure"/> shows an option for remotely updating a device
where the device fetches the firmware image from some file server. The 
manifest itself is delivered independently and provides information about 
the firmware image(s) to download.</t>

<figure title="Independent retrieval of the firmware image." anchor="online-firmware-figure"><artwork><![CDATA[
                              /------------\
                             /              \
                             |   Manifest   |
                             \              /
  +--------+                  \------------/                +--------+
  |        |<..............................................>|        |
  | Device |                                             -- | Author |
  |        |<-                                         ---  |        |
  +--------+  --                                     ---    +--------+
                --                                 ---
                  ---                            ---
                     --       +-----------+    --
                       --     |           |  --
        /------------\   --   | Firmware  |<-    /------------\
       /              \    -- | Server    |     /              \
       |   Firmware   |       |           |     |   Firmware   |
       \              /       +-----------+     \              /
        \------------/                           \------------/
]]></artwork></figure>

<t>This architecture does not mandate a specific delivery mode but a solution 
must support both types.</t>

</section>
<section anchor="manifest" title="Manifest">

<t>In order for a device to apply an update, it has to make several decisions 
about the update:</t>

<t><list style="symbols">
  <t>Does it trust the author of the update?</t>
  <t>Has the firmware been corrupted?</t>
  <t>Does the firmware update apply to this device?</t>
  <t>Is the update older than the active firmware?</t>
  <t>When should the device apply the update?</t>
  <t>How should the device apply the update?</t>
  <t>What kind of firmware binary is it?</t>
  <t>Where should the update be obtained?</t>
  <t>Where should the firmware be stored?</t>
</list></t>

<t>The manifest encodes the information that devices need in order to 
make these decisions. It is a data structure that contains the 
following information:</t>

<t><list style="symbols">
  <t>information about the device(s) the firmware image is intended to 
be applied to,</t>
  <t>information about when the firmware update has to be applied,</t>
  <t>information about when the manifest was created,</t>
  <t>dependencies on other manifests,</t>
  <t>pointers to the firmware image and information about the format,</t>
  <t>information about where to store the firmware image,</t>
  <t>cryptographic information, such as digital signatures or message 
authentication codes (MACs).</t>
</list></t>

<t>The manifest information model is described in <xref target="I-D.ietf-suit-information-model"/>.</t>

</section>
<section anchor="device-firmware-update-examples" title="Device Firmware Update Examples">

<t>Although these documents attempt to define a firmware update 
architecture that is applicable to both existing systems, as well 
as yet-to-be-conceived systems; it is still helpful to consider 
existing architectures.</t>

<section anchor="single-cpu-soc" title="Single CPU SoC">

<t>The simplest, and currently most common, architecture consists of 
a single MCU along with its own peripherals.  These SoCs generally 
contain some amount of flash memory for code and fixed data, as 
well as RAM for working storage.  These systems either have a single 
firmware image, or an immutable bootloader that runs a single image.
A notable characteristic of these SoCs is that the primary code is 
generally execute in place (XIP).  Combined with the non-relocatable 
nature of the code, firmware updates need to be done in place.</t>

</section>
<section anchor="single-cpu-with-secure-normal-mode-partitioning" title="Single CPU with Secure - Normal Mode Partitioning">

<t>Another configuration consists of a similar architecture to the 
previous, with a single CPU.  However, this CPU supports a security 
partitioning scheme that allows memory (in addition to other things) 
to be divided into secure and normal mode.  There will generally be 
two images, one for secure mode, and one for normal mode.  In this 
configuration, firmware upgrades will generally be done by the CPU 
in secure mode, which is able to write to both areas of the flash 
device. In addition, there are requirements to be able to update 
either image independently, as well as to update them together 
atomically, as specified in the associated manifests.</t>

</section>
<section anchor="dual-cpu-shared-memory" title="Dual CPU, shared memory">

<t>This configuration has two or more CPUs in a single SoC that share 
memory (flash and RAM).  Generally, they will be a protection mechanism 
to prevent one CPU from accessing the other’s memory. Upgrades in this 
case will typically be done by one of the CPUs, and is similar to the 
single CPU with secure mode.</t>

</section>
<section anchor="dual-cpu-other-bus" title="Dual CPU, other bus">

<t>This configuration has two or more CPUs, each having their own memory. 
There will be a communication channel between them, but it will be 
used as a peripheral, not via shared memory.  In this case, each CPU 
will have to be responsible for its own firmware upgrade.  It is 
likely that one of the CPUs will be considered a master, and will 
direct the other CPU to do the upgrade.  This configuration is 
commonly used to offload specific work to other CPUs.  Firmware 
dependencies are similar to the other solutions above, sometimes 
allowing only one image to be upgraded, other times requiring several 
to be upgraded atomically.  Because the updates are happening on 
multiple CPUs, upgrading the two images atomically is challenging.</t>

</section>
</section>
<section anchor="bootloader" title="Bootloader">

<t>More devices today than ever before are being connected to the Internet, 
which drives the need for firmware updates to be provided over the 
Internet rather than through traditional interfaces, such as USB or 
RS232. Updating a device over the Internet requires the device to fetch 
not only the firmware image but also the manifest. Hence, the following 
building blocks are necessary for a firmware update solution:</t>

<t><list style="symbols">
  <t>the Internet protocol stack for (possibly large) firmware downloads,</t>
  <t>the capability to write the received firmware image to 
persistent storage (most likely flash memory) prior to performing 
the update,</t>
  <t>the ability to unpack, decompress or otherwise process the received 
firmware image,</t>
  <t>the features to verify an image and a manifest, including digital 
signature verification or checking a message authentication code,</t>
  <t>a manifest parsing library, and</t>
  <t>integration of the device into a device management server to 
perform automatic firmware updates and to track their progress.</t>
</list></t>

<t>All these features are most likely offered by the application, i.e. 
firmware consumer, running
on the device (except for basic security algorithms that may run
either on a trusted execution environment or on a separate hardware
security MCU/module) rather than by the bootloader itself.</t>

<t>Once manifests have been processed and firmware images successfully
downloaded and verified the device needs to hand control over to the
bootloader.  In most cases this requires the MCU to restart. Once the 
MCU has initiated a restart, the bootloader takes over control and 
determines whether the newly downloaded firmware
image should be executed.</t>

<t>The boot process is security sensitive
because the firmware images may, for example, be stored in off-chip
flash memory giving attackers easy access to the image for reverse 
engineering and potentially also for modifying the binary.  The
bootloader will therefore have to perform security checks on the
firmware image before it can be booted. These security checks by the
bootloader happen in addition to the security checks that happened 
when the firmware image and the manifest were downloaded.</t>

<t>The manifest may have been stored alongside the firmware image to
allow re-verification of the firmware image during every boot
attempt.  Alternatively, secure boot-specific meta-data may have been
created by the application after a successful firmware download
and verification process.  Whether to re-use the standardized
manifest format that was used during the initial firmware retrieval
process or whether it is better to use a different format for the
secure boot-specific meta-data depends on the system design.  The
manifest format does, however, have the capability to serve also as a
building block for secure boot with its severable elements that allow
shrinking the size of the manifest by stripping elements that are no
longer needed.</t>

<t>If the application image contains the firmware consumer
functionality, as described above, then it is necessary that a
working image is left on the device to ensure that the bootloader can
roll back to a working firmware image to re-do the firmware download
since the bootloader itself does not have enough functionality to
fetch a firmware image plus manifest from a firmware server over the
Internet.  A multi-stage bootloader may soften this requirement at
the expense of a more sophisticated boot process.</t>

<t>For a bootloader to offer a secure boot mechanism it needs to provide
the following features:</t>

<t><list style="symbols">
  <t>ability to access security algorithms, such as SHA-256 to compute
a fingerprint over the firmware image and a digital signature
algorithm.</t>
  <t>access keying material directly or indirectly to utilize the
digital signature.  The device needs to have a trust anchor store.</t>
  <t>ability to expose boot process-related data to the application
firmware (such as to the device management software).  This allows
a device management server to determine whether the firmware
update has been successful and, if not, what errors occurred.</t>
  <t>to (optionally) offer attestation information (such as
measurements).</t>
</list></t>

<t>While the software architecture of the bootloader and its
security mechanisms are implementation-specific, the manifest can 
be used to control the firmware download from the Internet in 
addition to augmenting secure boot process. These building blocks 
are highly relevant for the design of the manifest.</t>

</section>
<section anchor="example" title="Example">

<t>The following example message flow illustrates a possible
interaction for distributing a firmware image to a device
starting with an author uploading the new firmware to
firmware server and creating a manifest. The firmware 
and manifest are stored on the same firmware server.</t>

<figure title="Example Flow for a Firmware Upate." anchor="example-figure"><artwork><![CDATA[
+--------+    +-----------------+      +------------+ +----------+
| Author |    | Firmware Server |      |FW Consumer | |Bootloader|
+--------+    +-----------------+      +------------+ +----------+
  |                   |                     |                +
  | Create Firmware   |                     |                |
  |---------------    |                     |                |
  |              |    |                     |                |
  |<--------------    |                     |                |
  |                   |                     |                |
  | Upload Firmware   |                     |                |
  |------------------>|                     |                |
  |                   |                     |                |
  | Create Manifest   |                     |                |
  |----------------   |                     |                |
  |               |   |                     |                |
  |<---------------   |                     |                |
  |                   |                     |                |
  | Sign Manifest     |                     |                |
  |--------------     |                     |                |
  |             |     |                     |                |
  |<-------------     |                     |                |
  |                   |                     |                |
  | Upload Manifest   |                     |                |
  |------------------>|                     |                |
  |                   |                     |                |
  |                   |   Query Manifest    |                |
  |                   |<--------------------|                |
  |                   |                     |                |
  |                   |   Send Manifest     |                |
  |                   |-------------------->|                |
  |                   |                     | Validate       |
  |                   |                     | Manifest       |
  |                   |                     |---------+      |
  |                   |                     |         |      |
  |                   |                     |<--------+      |
  |                   |                     |                |
  |                   |  Request Firmware   |                |
  |                   |<--------------------|                |
  |                   |                     |                |
  |                   | Send Firmware       |                |
  |                   |-------------------->|                |
  |                   |                     | Verify         |
  |                   |                     | Firmware       |
  |                   |                     |--------------- |
  |                   |                     |              | |
  |                   |                     |<-------------- |
  |                   |                     |                |
  |                   |                     | Store          |
  |                   |                     | Firmware       |
  |                   |                     |--------------  |
  |                   |                     |             |  |
  |                   |                     |<-------------  |
  |                   |                     |                |
  |                   |                     |                |
  |                   |                     | Reboot         |
  |                   |                     |--------------->|
  |                   |                     |                |
  |                   |                     | Verify         |
  |                   |                     | Firmware       |
  |                   |                     | ---------------|
  |                   |                     | |              |
  |                   |                     | -------------->|
  |                   |                     |                |
  |                   |                     | Activate new   |
  |                   |                     | Firmware       |
  |                   |                     | ---------------|
  |                   |                     | |              |
  |                   |                     | -------------->|
  |                   |                     |                |
  |                   |                     | Boot new       |
  |                   |                     | Firmware       |
  |                   |                     | ---------------|
  |                   |                     | |              |
  |                   |                     | -------------->|
  |                   |                     |                |
]]></artwork></figure>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Firmware updates fix security vulnerabilities and are considered to be 
an important building block in securing IoT devices. Due to the 
importance of firmware updates for IoT devices the Internet
Architecture Board (IAB) organized a ‘Workshop on Internet of Things 
(IoT) Software Update (IOTSU)’, which took place at Trinity College 
Dublin, Ireland on the 13th and 14th of June, 2016 to take a look at 
the big picture. A report about this workshop can be found at 
<xref target="RFC8240"/>. A standardized firmware manifest format providing 
end-to-end security from the author to the device will be specified 
in a separate document.</t>

<t>There are, however, many other considerations raised during the 
workshop. Many of them are outside the scope of standardization 
organizations since they fall into the realm of product engineering, 
regulatory frameworks, and business models. The following 
considerations are outside the scope of this document, namely</t>

<t><list style="symbols">
  <t>installing firmware updates in a robust fashion so that the 
update does not break the device functionality of the environment 
this device operates in.</t>
  <t>installing firmware updates in a timely fashion considering the 
complexity of the decision making process of updating devices, 
potential re-certification requirements, and the need for user 
consent to install updates.</t>
  <t>the distribution of the actual firmware update, potentially in 
an efficient manner to a large number of devices without human 
involvement.</t>
  <t>energy efficiency and battery lifetime considerations.</t>
  <t>key management required for verifying the digital signature 
protecting the manifest.</t>
  <t>incentives for manufacturers to offer a firmware update mechanism 
as part of their IoT products.</t>
</list></t>

</section>
<section anchor="mailing-list-information" title="Mailing List Information">

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their feedback:</t>

<t><list style="symbols">
  <t>Geraint Luff</t>
  <t>Amyas Phillips</t>
  <t>Dan Ros</t>
  <t>Thomas Eichinger</t>
  <t>Michael Richardson</t>
  <t>Emmanuel Baccelli</t>
  <t>Ned Smith</t>
  <t>Jim Schaad</t>
  <t>Carsten Bormann</t>
  <t>Cullen Jennings</t>
  <t>Olaf Bergmann</t>
  <t>Suhas Nandakumar</t>
  <t>Phillip Hallam-Baker</t>
  <t>Marti Bolivar</t>
  <t>Andrzej Puzdrowski</t>
  <t>Markus Gueller</t>
  <t>Henk Birkholz</t>
  <t>Jintao Zhu</t>
  <t>Takeshi Takahashi</t>
  <t>Jacob Beningo</t>
</list></t>

<t>We would also like to thank the WG chairs, Russ Housley, David Waltermire,
Dave Thaler for their support and their reviews.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC7925" target='https://www.rfc-editor.org/info/rfc7925'>
<front>
<title>Transport Layer Security (TLS) / Datagram Transport Layer Security (DTLS) Profiles for the Internet of Things</title>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig' role='editor'><organization /></author>
<author initials='T.' surname='Fossati' fullname='T. Fossati'><organization /></author>
<date year='2016' month='July' />
<abstract><t>A common design pattern in Internet of Things (IoT) deployments is the use of a constrained device that collects data via sensors or controls actuators for use in home automation, industrial control systems, smart cities, and other IoT deployments.</t><t>This document defines a Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) 1.2 profile that offers communications security for this data exchange thereby preventing eavesdropping, tampering, and message forgery.  The lack of communication security is a common vulnerability in IoT products that can easily be solved by using these well-researched and widely deployed Internet security protocols.</t></abstract>
</front>
<seriesInfo name='RFC' value='7925'/>
<seriesInfo name='DOI' value='10.17487/RFC7925'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC8240" target='https://www.rfc-editor.org/info/rfc8240'>
<front>
<title>Report from the Internet of Things Software Update (IoTSU) Workshop 2016</title>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<date year='2017' month='September' />
<abstract><t>This document provides a summary of the Internet of Things Software Update (IoTSU) Workshop that took place at Trinity College Dublin, Ireland on the 13th and 14th of June, 2016.  The main goal of the workshop was to foster a discussion on requirements, challenges, and solutions for bringing software and firmware updates to IoT devices. This report summarizes the discussions and lists recommendations to the standards community.</t><t>Note that this document is a report on the proceedings of the workshop.  The views and positions documented in this report are those of the workshop participants and do not necessarily reflect IAB views and positions.</t></abstract>
</front>
<seriesInfo name='RFC' value='8240'/>
<seriesInfo name='DOI' value='10.17487/RFC8240'/>
</reference>



<reference  anchor="RFC6024" target='https://www.rfc-editor.org/info/rfc6024'>
<front>
<title>Trust Anchor Management Requirements</title>
<author initials='R.' surname='Reddy' fullname='R. Reddy'><organization /></author>
<author initials='C.' surname='Wallace' fullname='C. Wallace'><organization /></author>
<date year='2010' month='October' />
<abstract><t>A trust anchor represents an authoritative entity via a public key and associated data.  The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative.  A relying party uses trust anchors to determine if a digitally signed object is valid by verifying a digital signature using the trust anchor's public key, and by enforcing the constraints expressed in the associated data for the trust anchor.  This document describes some of the problems associated with the lack of a standard trust anchor management mechanism and defines requirements for data formats and push-based protocols designed to address these problems.  This  document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract>
</front>
<seriesInfo name='RFC' value='6024'/>
<seriesInfo name='DOI' value='10.17487/RFC6024'/>
</reference>



<reference  anchor="RFC5649" target='https://www.rfc-editor.org/info/rfc5649'>
<front>
<title>Advanced Encryption Standard (AES) Key Wrap with Padding Algorithm</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='M.' surname='Dworkin' fullname='M. Dworkin'><organization /></author>
<date year='2009' month='September' />
<abstract><t>This document specifies a padding convention for use with the AES Key Wrap algorithm specified in RFC 3394.  This convention eliminates the requirement that the length of the key to be wrapped be a multiple of 64 bits, allowing a key of any practical length to be wrapped.  This  memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='5649'/>
<seriesInfo name='DOI' value='10.17487/RFC5649'/>
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>Firmware Updates for Internet of Things Devices - An Information Model for Manifests</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='January' day='18' year='2019' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Incorporating such update mechanism to fix vulnerabilities, to update configuration settings as well as adding new functionality is recommended by security experts.  One component of such a firmware update is the meta-data, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes all the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-02' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-02.txt' />
</reference>


<reference anchor="LwM2M" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf">
  <front>
    <title>Lightweight Machine to Machine Technical Specification, Version 1.0.2</title>
    <author initials="." surname="OMA" fullname="Open Mobile Alliance">
      <organization></organization>
    </author>
    <date year="2018" month="February" day="09"/>
  </front>
  <format type="PDF" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf"/>
</reference>


    </references>




  </back>

<!-- ##markdown-source:
H4sIAH8RrVwAA+192XIcR5LgO8zwD2HUgwCpqkCi1T1qjra7QVJssofXEGBz
dk22bVlZUVU5yMqsyQNgieB++/oZV2aBh7TqfRg8kEBmxuXh4bd7TKfTw4Ou
6Ep735yZx0Wzuc4aa95sF1lnzVmTr4vO5l0Pz5Z1Y55WnW0q25l6aS7WRbVq
zSN7VeS2PTzI5vPGXt03T+uLWzs6PFjUeZVtYMRFky27aWG75bTti26aBZ9N
7/7+8CCHxqu62d03RbWsDw8OD4ptc99sG/v73/3L9xdN33and+/+8e4pDN/Y
7L45t3nfFN3u8OC6bi5XTd1v4eGbpxeHB5d2B88W990ipo9weOy07bJq8Y+s
rCuY1A4Xsy3uHx4Y0yxzu2i7XanPjenqPPy9qBa26tyTtm66xi5b/2C3if/u
miL33+f1ZgPt/fuiKosqGM2+66Zl0XZT6Ghel/DhtP7mW3wFUNxk2y1sgnyd
9d26bnDeU3xPP0UFLR7MzPO6ySr3lKH/oLHVIquSd3Wzyqri56wr6gpwotmY
Z8UGNmXhvrCbrChd8xk1/0vWbGawGIRmOvxzGN42RZYn4z8vyrrN1+nLeAIP
66rtS9ifLh1/w83/sqHm+wZ/MjMX8FW9tFWxSibwJKsq2469/2QgrKmLWee6
uA0Qj2YAtPo63YdH2VWxSN7EE3hWVFlTp2MvsN1sju3+UtIXM2iGA1d1s4Gm
V5aQ+PXjh6f37v1Rf/+XP57+/r6BkwQnKvns+9Pv7urvf7h7+h1+Rn/8/g/f
cfun00czf15dF3U13dQLW3KDZ9fPT5/f5+l2WbOygO/rrtvePzm5vr6e1Vtb
bep5UdqsLIusyi3O+6Sx8KC1J8+K1bq7tvgvdHPy93v/uPuP0+np3Xvf3z29
+8fp2cnL52fTi/Np/N108N1su1jKHJi+3QlamOcZkJrKwhF2v17YfF0VeVaa
863NiyX8iiubmL/bpoVfzL3Z3dnpHe7THza/vzAx/Zt39iWsFI4XLtWcyVr5
C6SK9w1Odnr3dHr3j/yUoek6ffXo8T8PcIcH0+nUZHMgWFlOVPLvfVnZJoPx
i66Ac3NddOsxjnAEHODYLJgvwAm5sqbJitYuADm6tTWVhV+Rm2RALktAfSC+
pkXCDUxGGUfPjGMDewIHod2Ybp11pmihj6xsa4P4l81LZks5EAmYJmziQsed
wczyutkCcepgVvA9UBrp9PAg6LaGMd+Zq3htE3wuX0Pny2LVN4QMMM+uo1XC
PAAEtiwN/J8tFjhIZa/Nsq9y/DKDnnY44cYykV/A5OY7Xii+Ojyw77a26doZ
Ahdg1yJJ75EdGKT42PK/+qKxxCAISAvb5k0xt/iXyVLmDDO6BX4RwJBHO0Bd
rBEkUXcwl2xV1W1X5AgJ3DWAb9UCOGmn8YEbqthkK0sAgSlmbQtMEYZewNhd
NoVZZH6BV3KSpAu3XmgFv8CgwOWgGbBIkze7bVevmmy73tHicXnbfl7CO2Dl
KBA0Gex6TzOemcc9zVxGaM0mg2aIKQo06sD3j30A+2xqOP0EE2i5G8UkPQub
YrEoLf71lUG8b+pFT1uNj96u4ahDC1vWyJJDCE8MyBW65A0A1SyKJVAXYGsg
ydSwJxuEHsAZjsMVAX9dXwcYGEEboEego75n5iVQAXoAYhU9wuYLuy3rnV1M
UnxozbZEuAB0Ac+R1G0z2NGiMkWHcyiLpe2KjZ3Qc5xi1pQ7cy2L8wc6MyAs
rYz/HsfAKfDA2CMgbg2TB8gCb8qhZVsg+qGc1mKP0GCTVT3MAXkRUJErwARE
DlhAjlAC2KyLeYEMCnupYZXNNdARD76ZyJcCvhhOSzwkfhtohouaST4e+XkP
pxjm2dbLDltMuBM4ysNzPCEMhLcglyo9sME+4CsUOGkp1NxWV0VTV3x2Yfbw
wdwS6HD2sPiqKxGJ6SSXAJPFLoQfDIKi38zw0RkSRgAOghQmtsGNIOCYVQ0Y
P4EdanE8C5ITzTIj8j01F4NTSwcdOBlCPqdDi+vE3VgRjYJRkCTYxYwY+1nX
2c22o96XZdauAQ+A7wOrRIoe94z0vZLfl029oQ7gSV9dViCxANj7RnYFxHnc
exhl7zxzaDkXWowCd8Hk1c0PumMOQaPoNOc7Au8CiUIGp5s2MK/hT9o7OAsF
gdnMUXza0SjYwTyck3k57+A7PNQx2YN9XXZwMOR0k7jOHwDytp3dEpw2dY8E
rsJZZfmlaQs8sUVnVoDXLbXwE8Q+rrKyJ0INMgXyaERSpAUtrZJxFQ7evMka
4lQxfyIdQ3kUbubKAmMDehfzpSNcHQxe96u1waU2raW2tloB8YMWstwAMnM8
9gCRou5bxb9j2jJQAfAkAJhKGHRe9x21dayO8JIPYNHmfdsyhTg8eP8+ZDsf
PtCMY7ZHPTMFp0bv34fvP3yYCUEGRUEICK/7wjaboqrLerUz77/q/F8f9Egh
B0CNsDV3nr85v7gz4f/Ni5f0++sf//3N09c/PsLfz5+cPXt2BykE/6rfnD95
+ebZI/+bb/vw5fPnP754xM3hKTRNHj4/+593mK7cefnq4unLF2fP7uACu0gS
YLpK1IPOZQOISee0jcECQrpBKR/gI/K+gCYWLACLGOeWdVnW17TLAJr2Pn76
DYjCFVD0FuR1BNBG/iJqBEeg9Sw92GV3IEh9xdM6i1sXbXBOsxV21AnZYAlb
2LvBz0Clsa0JFItgJJa5ZzxVZ2J4ikPe30fcFIGJOKBMwFo3rYc6BeFsWwJI
/dlCzqF0naXUft6yhEtL7GZjg2HfKD2A5IZfboA9FdtSpaOJKTyFkL49VGsm
00xKNkUOZ6tG+aIsbaPymRkfJ/P8BGiicgeUZ0C2JCAiuSFbBvBdaDfzkCta
EUmQrVQFEaGS8AEUVeAojBpMUvETObYJgqLQ1whyorC5ski9ZsbwPj2o666s
s4Vt0MI0d3/x7mwLmxPEHfS9nA/E6B1QEMSaGheRpaAhRje3FmUN2CAQ+V1L
eLBFIKnAuwCFjkR0EDyIVeKJgrmYLN1H3qRM0Bb6hTVCB0G7mvgBLRxAVixR
nkKWjy3jzmbmvFD5LF25I45OFBN7EMwbx0SBLKbZuPNABdot/MU8obUgpuF+
tx0iGTPpc9R0MkbAKb0Ix8ZOakQYlnfnWTvgDWyGingZdsKkuZXzaV6/fM5S
XNYqsa9Rj+sUiDhSgWeL0ISQjM/au2S8pGMWLKgHkCBhjsraYdXChhjLF26W
LPofwZ85KMIs2WEHJG8RgiyBCy+O+SzZd6DQChgB8xzIhdF2ctzcuRLoTuhN
1W/mADxol+o/bQdLXIjMQbYSJ3uK+LhWJonSUgSCK+Ll8EWDDBnpXTwDB0ci
ibDRZwxQ153wVRGfA1oqPNNjgLAFoPXJYTp6/vANnZX0lAFp6I7h8FYGvyDk
PTxAqCEYWVak3ciLJgclE/lSsapExweigTOwALUFzqbdgWS0IVQ9M91uS5if
jgiHpuwRHTKVM+pmouhw9PrsOcGTEOV4QjL3tu9OAGzwnzl6evLy2KCmyoIA
i8ZLmyGSoGpRVcyKrgo0QGxwt+cg0SCrQelsBSQDZJItIwuSQPM1zxo/wTfm
6Lx+ePy1lwCJMrIKDoPBimFhFl96JZthfu76eej6IcjCLwTZagygjP36HL4q
S9kBwVviA/g3EEsAFNk64Fg+fPVGoQb8J4QRQQchx6cWGSSiL+DxxNguFwx5
Um9qFB9R3jvn17FL4OhJfX6GC3BqEM6UDgIbakp/SqJjxhQjA9hfZzA3BB2c
yg3xy4poconbomBvPF3g5egEgW83H5uiHZkimvxpkvA7Gs864rzDuUbKGmkx
OHFo2CHwwmk7iYGsYrCPoFbYBo73hKkVSfRNBsLzhIUKp69TA+Ke8DVhrDZN
l4ws9SKS3ZDrky1O+bPIcWdsnSQMZqlJmT21EHEoB+LdqTyYMC4c7UKUdGI7
TqDh/lreKNkhW9AhIzuBg4RIWi3ZskKRiI771J/3VhgsowXPphKGmOqBQX9O
ZAhQi/bIDaQcFSRRfwad+EOuhY1tEtkxl8cKMdAYCxBTKmf4GpmWkneVeRl+
OBq7xwL8a+wSVyyMBrcDZVhgFVu2J00AEgWc32Cl2Bcpmci+qx2SYTi8IJm0
uA8w9gliFOB7BkgN63yOHwUGKHZMlWjAWLD0SAKMAxP2p0uA6SFjcZRQZq2S
M9luvQwUS64jQHFKALShafRoCVr2JZwnEVDJKEAM3VPc1hltqkWsYLjdCSRS
FTzhjO1Ev+727ajCcog8pukr0vJJISFeF9vadEvPgQsDubloQJ1X7Gn5WcfP
WMJqPfAqgAeJQYQ7EesnEwFw2LqJJ+1s1UZ5IHL9ZJxNQj0BebKKgI1GFsAk
sYhgMzsw3KqBe5eXkTELDXB940xUg4Nzjra69Ni09FCJfyochbjQOn0PpJYO
NNheiBBZ4yPTNMmzyKLZMMYmAcRFsQEgnuKAU+hxCnCAIcl2ltutO0jyaSuA
qJuhJYfmeOLnV6eYLVRzzodDFTmcBlqPQ3ssg4pPPfp/GjyTQohz3ORUM6HG
2W7a1VM8nDU1UUsOMfZlaVn7DEHD47ywHZkdP3Ug3zv1zCeau0ALJsErGEWF
JRrtaUVuDmodUC9iP8LR0W2B+vqVZVIiIg0IG+t6VVdi6g3t9sIuDbnyzSuU
WVGIxS1iHkbGqotXZ8ceWfAlCFrUArTbtRBBYUziNEXqsila9gXAdFHCRiEh
nDK7o5iFMe2BgULHQWlXeEAaNsNBL2i6AKlGeDqZjG21RhWbuDq2QHv9503t
8IBFVDK5e2D6eRVt4u0waMIss20r/AgdTH3lrCmh/ENuI6dHpMfIAu27tii3
5rYhiu7gA8gAiMMzS5tVNXC4xyHZIbs3CdOogYmu9BIAR4z8EWkEyJf6ZUbz
AnXj5aPnx3pGQ6WiEumE1QhHOrSlKAXMKmmv8o5ccCgcwfbx5zvW+C2bfDe4
MhQhge8YkTuMMwMH/CU2rgvBLBodsPX2eOZSX4db/TWNHT1i6vS1WDGX5FYq
KrR7iof9w4f7QjLunEV4A7MW6wM7++QwkLteyREqMOoTo/gWk3jgyPlGclzk
OWuZceKpYPvFAvYJ8BqkYoA460leZU36C5s7bxkLbqj0ADIvI/PdkmS7Qshk
tERxPrh1ze6Mg4KAqFYTooQqDRGRjk4ba+GEjpkjyl76Qswgq0BM34fDTeBk
I22HwXj2IgbT0kHHD2eQbbelHL4W1zA6/Q0+QTPHwPgpFtG+UipBnnJ4BkeS
4g+IrNBvhNxBYyLMaP5+HdrM338Vmcj3uZC8bziyJJN5rw0jIGA212xvZr2e
aHZsRI5s9igYFpXTRQJHMvo1B6IBuwVEEFiIrNGAxL0oSTyaN3W2yFFJA0Cg
lXLH37xpWe6y03o5helM0ZXpzGpudS1//RrmOkcHDPthWt6Q0NMjOmVBHpGy
4GAAGYsZrGNX7QZ1W29UEe2enr7KGti5Vo0sFSyzRAMO0qka9UJYK4LMwYHP
ipvmHOcVsAiRKAr20WCYDREmx8oJAb76EjA/Tj7xTrYru+MTroIAHSeyUnU7
OhPZrmWqj5YaXM6b8wcT8+bs9cXEvC0eFxPz4NmPEwPoMWUW8/bsBRDNfE1O
GHJcoaFBogb6NvCLkregzuuyNUd2tppNQFM7ezUxTy4uXokJT9CTDopHY1RO
Wva0DsIXvPTgww9Ag79NTJ0JZD+Oi8SiI7a7qKE3YJMyU6TMO3eogl50qTDW
EwDTFZpv0DFYMQ/0Hwr5wTPYuDAOYrgiwNF2qJefcDvPEKwkl5GJA0DQ9FuW
QGrxxs9rMj6QY4eoO+/HNtshYnPQhyAigeMxu3U1MIFA7Se5FEhNxFaLAICj
hNQSZMMK3eNltsM1qtQpf6J46uJL6Jk7yBjI4wTPicpsaDraAIsmj4gcZNkR
gg5qVQhyF4JBCwXy2oo7TeSOjom3Vf0X34dvdR8ndPLRMEtyCol8vEU4nesG
ffDOnoMxQTmqIPRSdVs0N4BEwoeWIhawOQ5PmKUQcdBs5R1Q1qzkb6i7VrzN
QKebxRSFRlbp2VwVYLkiBnuDZEfDLxTBP4eQ/giKFqgqVkO2WC3qrq1Yb8Ta
5O3dYv8GlrJGtz9x5tTtOwmFiiBsIfKWAdqJuPKRcyvSmtjiPU8Vw9VM+aFA
Es5CNwUYV12/0TA0JwcFq/d21cODddaup/OMXPKByARL7MsF4qJ9BxJzg9ED
oFAUK1G6YHXRaGR/jcYDuZu6UP0WXxAfhs21S9jIbuKtNHgaYNUL1PxIgfTu
lrbf0lmirb9tgbgakqzQR0+gQQ1ovE+WvbJyhRLbetNqoMncC7dk+GAFLSNh
s7TVqiMx6t690+kcjlQcglX7k67yFGELHLWSeiSEObdkMTGnd7En9HVjFCv7
uvG3Dx9ET8rrhvVeZgSZOf3d7wyOCpj78KGOCI/vfvc9PX99foZPWcMdC2wj
MyCt0VYUk4ZhVdDQUR2UBFH5YbcbikqiwFjysKF5imL/vB0RURnUE+zMeZND
kVlIQ9H6IeH9orgqFkwKyOKD0qlKtTIXVBTmbV32HOSIske/ic3rZz+em38D
KLxtsi3DD2N76Qiior5gFycqTKQOwlFjmg570RIgHgqpeRSSmheOB8378tL7
EtjQM2R3jrd+mlTmxHdRiVQGRem9XOCgHYbNFIG9MTEcUrfIjuYo7Bf5JRsO
nUbvQkS9Patgn/PhQRgbulPtHM2pIxEAGQrEPtqHoXl4gCK+VzyXsVWRADEm
dp4ZFp2WWVGSLt+RGIEBd8YtiLl85j6Keyc3m74iMwhACVk3dkSxfxwnpypB
2ivs/3i/Lyvy3dAhA1JuyeRTpC7rQiLzxBlJLnxCSuruulZMATlR9CdCVgdY
8t9V5KEDWZs4u34ZfThDH1pWktuENGQX2cmnVxdz6jzUgUucUGneF+ViqjYC
8RYuRsyx8QIJZ9Q7jREDKliR3QH6cLYy14EaF7Jlh0Yf2uEFsEbChBd1R7Es
aPJhd2Dk+Q31LANMhSISUInNojeghFeRP0J0DEW2T9BmLuKQBT2WG9ZnJupE
YHs5kiRyVQnbQcYUxO8Cqd82mD9BEW+0p1sGYbmjmVNIXiBpaMzL8I0TFNTX
H4BWAbtklzjTHopCYHdyxBQHgbFkDmoxlwRWB8oM8gkKkkNOVnL2Rxi/fF1g
3H3rbKRAnREfMJMIjdBlcUlRstLw8OBB2duuRikU1MQGqL7EaYyskYCtRyaI
F3fOSpGMSAouMebYSBDG5yBvYb0oFOy0U6JE2BIXmIW9S8irp54ilbszmjoT
kyFETGLtgOUcUV2IDAvhlW3Uza1bMv01RXvJ0cWOVIKGsGRDTHo6CxdD72JF
/DQ8F2fqAORoqtEr4Vfe2hEEw6ClEqbiXAnRsCoMYU4c7C1LVQClkMcDyqD6
0uwkE8LHEW+yS3Yn52QKD+LfyCiE8A5M+AOjDi5oqQFCJJFfASBpWzBwglSH
LIpz9wZ/EaKE97ZyqK8B/VCiXQNPcGrDZxAqpToD8wgHR235ARkowtBgsnJQ
KA+5WhIKRJxNtEKkI5FMBoeEOBN1zfSJVbtlYUvEbtK8GiYxgh8RcwyjArwu
ABv1/OwhI4RMw1AWR40aiy7zM00+F2srlrV9/rmEMMTHhiPuON573zBe2Bqz
Lb2NnPbs2G0psLuqAZ2ReieCDjnZnYeY1SqQe1VBBskiczvDnBggqxHR60hR
VJfIEsWmosX9KImDkycXUWomYQgUob9WGwn7JcjXoLkEYYAZcFmYe75zp6h1
nmtEITjY6stzZCczoQvvqdhBI6POcNoyChpMJRRvocHuxJhA8G/KHXa/30Uz
86cop/kX7ZqIByULUa9KZpxzRkNRiibczYFPxjkO1GvDtu9gHeyAVjI+EgxZ
B7iBPFeDFUfceHGYroKIHAIevcRRSVYdgjDu4SRU9MXSBVgDwgOoigsWIRv7
nwCvId/uK+LCRCMy0WxR9UdOO9+ldr7APCEv04kxsXaSJFKWLJwam/a3qM21
bNpSf4w6szDBWaK0/OaEQQA4el6DslVUbMVnDBCvDsVN1ddtkl4CmjUZcBTF
QyciJkqXmKzjReihhsFCH6IS2ZCF9vDJwshDK5Y8kwPVb53xn8iwUKI67oJ6
NuYb87BEvRakZ0AOOgOclsMvOVpgz8snu3lT+EeHB4OudJ87ZIvsdGg2Ce9z
AR41i2tOWwQVQIhJvrb5Jc78CM4sqnvHBCbK9ImNSbSqwaR1GvwdipESaJGL
WQ9wlpQmTKffkFi8dI3o9Hn606E/udwZFwG1MOo9XcOrKVFBlW6iTKL42LAQ
GEeELCynOpBh55r9qGzCRzMiCnQsbyTnyCWSIZeMMr0ofBYNVSVHTUYcSoI+
wjgOt19JPpbuUZuKD5r75wx+yYrwE6dRabiFRs9NAu+cMkWdPkbBWLvlVgrN
OLWgU3tyPGS/5XCMTomziwnQMbBjElY7kRdgSWcXrNzQM5DEQfyA3pBkITkR
xmyv4XQjcShEMJQTEOKXmKERHi7OhQNDMRUXJx5aXAPq5oOjxPwar2s2FqoE
rLIHhkNW7vjQi+DIcIvMBPv2diLuA4pZxZRBkOaQaDEti4SHFIUonbatcVO8
Fs28OFHtrwp7rTNICJJo++5IMghQ7AjiLcVouao13FpVgxzEztZGK73PFA4I
1YsAOvLoFcYdMa9rw+eP7BYtflWOKEnWuOCdQET+fBrI8yoMhvtAs4+CHscO
CGG0yghj6MDyrts+PFGqFKjdVPK7QgkEwwtIkCLr2FGeUObjiUHMSfDmqE0o
JwVoq6dcmZe3qjsVdJtCk9deVFeYFNuKOhqlcPhwVo5cUBCEmUdYn8MuQjcA
6gXDyMPERe5ARyK3hAMJZXUTQGM2q7JL26EyTxYHZ99JGEsQ60IxoIAgTPgz
Hzaqxs4RBDLbNZL8giVZtIDiCYvDGIKg8DRVovbRuSP5QmJVmQkGOt3UzaSw
3jTrFUpQgTm1NdRL3Y7q6ZeNZCIQhNZkOdI2lr3RqoehOdudIHnq45kZ81ZV
B9cxIm6ClRNmjxubeR/beDBovq5rUR8ILNppnee9hG1pr62wCfeNi8g0b5PW
pArEJ4Cdlm5S+/hcZ5ExyEDiSqQV18HcGm9sdHPjuBroekl0dAH8Iu+8w3Cw
8kRNCCbPtBnZPfraxcGVUuoRoM/MK6AEvJPu8DErSBSKsJjAkq3j+PcrAAG+
RnSntGChdFRJxASRClJPqJ6TMvD+PX3w4cMY2EWRW+7ZfmQDunAkECOiIOMA
HlfMzu5qZ38B+LO9IZDrrrOiE9kKZKHVCu32mjCQ7jT1xNNkzhgcn4loGdxF
YN4EElaj3JKzuQNVbvwy4GNZTGSdBWmTkeSrR68LaBmjG+nocJhpPiy9LiNH
/5G6Phegnu+UzvYitQcdw0nO0KxNPgpCX8vhHWLgIV2NLSN24fWz2IJ7LPGm
ga1LqAcZVJb6nc5Dfdtk8srE6mE47x3fB0UAkCqixRWYRevD9uPcvDRwljqp
6COCjO4qIAzFR9M0BwnwtIYfJYSso6wgFkUiUdXHvARqPAkHGNX1sMwKdrvz
byqpuDPGmXyZemI4coem1HBpipaQzZsXiXiwYWrM1OTo2kUtdR4qZK6Ykm7j
kQP7P4urOc/QMYmwqoBIhWNlBZBR5I1dKD+SIADnXVViRjIEOkHlb7IT8bfD
uEK3JVEIAVlU8M/bgo19hCdSP3R76sroRMDZD8LYm0Fu+kfqI6GfmoNoHPnt
VAeXcLlHNRlqlNK4HSKro80aIL2ND9ch1k/CKwfsG86b5LczilyrPJImvSGx
7nKi21dwTCnHDmeJFSSahUu5aCzDaeKTJsQPosli+0ZRN7bY2jCldQ6Qm8rf
SCSgxWbruxD/aXCWIiqwjCUSr6BuLOXcfGMeEldnXA2L/OjcQqyfGOZwtY9f
1ah7Pz4uQGoMPIxseFGa2fuvoogW/J6DXKZcKwRYFMa/tKJo7A3XZltmNghx
Ia5L6VqaYcoSLbvY+61wMaZ/0hKVdmSJY+nqJ6GMHIQFunA5TeGSzC4SU0nc
x4CSno9Bhaqy94EMWCwl9bKHMBRreD6J3Y00amGRyv2Vr9AYY4q6KC9De5nr
VTNhWDRXD3xkF+ECVerh8jwPm7DEztPZiMeg7Qqy7FW0tEiFODz4P/Dj6rTJ
jxNevjXm26n7+Xb4Ong7/TbtRmsz4O83/vGNdBS8Dt7i67SjYJg/3fjhb8zN
D9P4J+rI3Aw6Cqchdj7+0gw/ZAr7KR2FQ4509KkzikA96CgC9e0dje7avq6G
HX3Jkyn0ORwo/eEhg7b4J02df7mtnf/NtT85kdnwfz/9NN5aP9Ofn37SHtwL
B7zRLk6Gj7QL/8rDf6SPkR5cH8G7YA8HnYx2oZ2EL0NESHrZ04f0EmHQVfjH
zd4/4p8b302IY2M4eNtP0M1NQG505M+ZjW+iybO+yY1mvQXdfDsy5aCf0VXd
ICkTV4nvezi/eD7B85SK+R8gd5K8ub8ft4jB2NE0JPtzvJ896/Kf3rKumwHu
RD8RAbwFzJ/RzSei4Ee7GT/t+HNCp2rf6/QY7aM7fL7H3w6PonzncTLoQ15q
9uS+LvQ7za6MuqB30Zs99CCloyeuh/RVSln9zx6KHby4neLrF1Fb99ALLu/v
m68CqZUrp/6PO6GoO7vzYV8cuLfq+uxsDv7DtrGQeHgwnjmPpn6uSvb+vT21
Xnz2GRVUHJHMBl6I7UBXW/raapotEQi2aAhm1QHUR6lONCatxT8Jbx+jZ/pz
s+f3QVfQT3ju40JW+Cgm0cP32hb7EfweIXqBRDZKE29UJLuJ5/O56wrncxt8
YonrdvjQg/898tEn/nwjXXzzK3TxC37245YcH/gvKFnuz6DHfD2CIw3kJL4N
3CEfKUtBEao9OXdiPY+sXOTEsGlgBCUH+ARgn8Sk5kVn7/fZgOTS3UotvkYC
blA3Je1+XFmMIw4p9pM1stuqSqRBPGqgEFvKRa2JOE5NC6I5xiIdfbAXRWVK
qvk6rOxxEVZF0TRQV9rEGYfI9hE4/cmKRuFli4nZ1h0bvCjMiQNWdqE1kFPB
I02Zp+trAZKX1LZhPd04FTZcGdpEfM4H6qpPfeD7oJmqxugB/JjBjLJhtkBZ
W6lmWvcd5hHNyfqftWvyXamj6Fajo9Q0wKpsoGG7YCeye7Cuzek25O91gHYh
TRQOe3gQBUSdDTZ76MbjCNf/6qE3NABISV/vOyRM8OciiOlROwXlYHHtI97M
GGMQ2KGLVmubuMDOMJZH4+xTXDBS+PrjwBavBX0NyN536lNDJ+dHTZ/fkHdo
T6FVWXSafuWjvj4FS7HUAHuM7UmQlk6uE/QCt+sMwY3PouAxPg2StfV5E6Tt
HCFiIgf4OCgP9qCEFyd6coiBenGp87LsMYqWA7ydLVFMu2jrBHI38wNINYyt
S1/gqmjsN0vtfezLCJHIhQkiDDC+JCpfHdZoYCuinmLslHI6XOUzVy3ZVW+n
kDRO2CTLPtZUgA4WUhU49QFqhFkgzqkvTaswMvpxZjx6Ulx9p/T4K0JzNYPD
A4y9x8zdS8QIfDiInH//nrJrgFdNtbOhmZVST6K9M5KMgFR3tk/8OwlFpKGu
Eb9OGp84GxyZ19PW6euk9Y0uSv5MWqevk9Y/JfbdpHX6Ol32T+G6TgbCWvwa
G3+5JBzLeV56/GGW/kSS8OB1KHcG1odRCTaQhEfeejl43NLwaeuK5/PlknAI
n0Ar24PxKh/GuOVwxSVI3RGfRE33y+w9NzF94hLuIKMMoqQxttA2UdUoFh/H
qsmxy5TiG6mwX+iWGCpxRKnp2KZaG1GpW2oEs6QWj33UHocRFHvPffpz60Ef
fBz/+bHPEVNCc/1HPk/tBx9Dr/Qsxz+ffvxu/fnTpx+/W36m073H74dPMIC7
Xqa3Hb9PMaVrLyNqaDzdT+hlbDuntzfd0yocckA09jZxjRJ6FTYYsDlqEhPc
6fBD7yuIB/xJRh1S2r1HIzJtjFpbvc06+tBbz+KudaQhdR07QNLFrUclnHf0
YUiYxwmqkuWnnn5hPmhTWEyFGb1BRUj0LbVEOC+fit55JTwUcOZUn8JFDEra
s6Y9cgkMFGvFn600SBJeOPs7TUfjIhSB/lx0GkJLmWotJuTAmnymDaW99WHx
i/t8r8MjXAjGBpMSEigNAg/++M/46ZMsYSTk5cfs/h7T4f/suhuTKF1NDa5U
TkuhFk/bMKCqLheaPiuxRRherJ1RA4rukxjPUHPjAZIp19ef+ulbVBUvC0yE
DXQVqVSPQn6no6PI7fuUic81TUsAMfgugJoUxPqzGmkct7VVTiHTHH/mWWkX
+sbJfhEWBkB2zXkYlCcgW+5kfq4Q5tOCuMys1rmX8GRnJgqGFQwZr/vPsyFO
PpQtSE+XEgs0wbkU5KK/J+O93qKMuAJC3MfHOnDwxApZEqFBbaJAFdRKydbg
zBb0zbamoP5hskQQfjgKEX62f24NHV0uPDbsmNrF+dlBL77OiZSFC4uFoK1L
yu7whYMS44WjMz4dPT97KBF8Eb6F86QoIxb0PjN6igmXyBppVOiPonhLChe7
EQRV5bqCVi+HYVMQ5umOJNEmt2FpGFOgzdL1ARiQpTmXUtecapfQrWCU0LCz
HVpt53RrkNgz5ct/lYoBHE6ytuUWVfowewFTS6X3cDounfOc8y8fvnqD5cMV
4Jw1iQWqSad3dVzp4imMPKI6cuHywvQCuiOL+8UCuBnd8sQVqvGDaypeWWzX
SPJbLi0I0IXhW75ohiyaHGiTaU5TxlfgIKkL6lnLxW0LrfH7TuoLTrjCjt6s
hjnLVEKwbi454YYKRrihBZpagVoup5IlpFFUE3cr0abnTPUg8pPzbXrKfZX2
Gsh5huyXvs/XGebgAAyouJgL7SQIFEFwNxY8oItzcIVki/DwkWstyDpWZoDI
R//xFCubYYDZvIgq7FWA+42lmhc0/uGB5iKLLQ26H7nlK7A7a30aGmkEdWio
c64KNDUv8MSV5jnO+hUaHjuxEnIijqTdRjcOheiDkNsUZdYkibN6qwJmlmMZ
1okrPeEmAst3FdCIb+PkRHSJ7suAXsKJtaB0buSMSiCYXhRQxBVra7H24tVI
x85ESWV1tBqMVEdCjKwYEkh4ZloKnUp7+X0kqz5WMdE7XqgItlY04lp9E1fD
hNINo041l4/Oi4dotJ9AoBd012I6Mu2rmKQRVFyBNRzYl1YVisWJ/Eq6Mrq6
Q0VRuXRDLa1RzTUXohqXeRQ+KZ070qkRg2LGDPR3TxyZy/rr7TBEc8XWeCxz
UW80yj1rg1p/Ev0cXjGY1up7hPfJ0b0HYkVmXHCCdYy6xO1h/zQ9CRpqXXvG
S7yWge36a6kjJKglt5/B1gKBwqP7V90bAteON4xuzAos0z4iVariUJ0Fwg7c
Qk6/yMPQdsLZrxWl8b47QYjC4w6mBdFwcp1GjB/B3YO4vIm6B/SgurPZJjQh
wKUhdPkszfv2MyA74ZpVQKJldUVDHEXXpmZyD7o4UDany3bLMPlxw7Wfis41
OjygsAMqCOxZ1YT0J7rwI0SL4AxyGjpNkE8Tdci+JcLzNCtA+WF6VrFPuYYI
a8CU4hhKtsHNV7k9paBsspYu8KDQ04KECA5497hAsyODlmgEOujIJghpQZaP
NjwJx9BEcqdDavlv1z8y9seBZT+UZDnFPkIdbqdaZ8sFwCfE+ynCWzPaXa0g
4kiaDjR3i1goWnErpjVE4kXFVJKt3xtPKWDGD6wveBlm07J/QQr7o0osrlpG
Se5Lj5sn5kHfFHu9xoQCvBtv5Wru+putzPuvggt2ghvxNBF5wTXhKqoJp15r
VtC4OIR6ZhK/zISSuJGMLxp3XaC7P3fA9hk87uYfV+Ea1Xtx9IRFozRvqEMI
SLkOUkiWGdXMVD1AqiEdHrw+P/3dqVy6GVqD/Uh+HK26H+jCMD1OlMQbqjut
yzJQe8iKUbZ14kV9YqnMehdFGuDVPUVJ+zcHKelSvF1JcZ1Uvldc5drb03jm
WqMOY83zS+rhSBKSd6bE66yPfYcuw3nie8qzrWZNe6a7DmLMhzlxdMsD5lS0
HV84xVXRjkhoFzISCs/H3qMuuawMDBNg/yRYXDCfvsK0dCwqTTWMKBczvFzV
JXOFMx5eeRKs112t5AMO3M2fVJDcbeLE+HrBqlzSrQwu6oLaK8FHBUHLNmRO
7xzROnWpQfYhlv4p6IZavCiTL3BVGwNfpBR4pF19E/K5Dm/tEK+n3yjOHtaE
vOFBlPJYnM3QaQn5FULbVYNixcEBj+Jkgu2m1C4fdRDUGAcozijdYCT/Xu4w
cQXgZC1H9h2FwSAy85VvTpwOynm6OxKhFyfHUQEYstjZhWguCLmgKgXhDwlN
eh2dpg9JfVMcBrTJExAl+hJOT0iDZHlhBh65gQhMVJMiifQgQ6AgqVR5S739
fMkM3zLjHdPyMWOYjYx0LjhkzaVZwgsCiAyFFcFYaGB1OuPrNH2dMT43qDpT
uQogIeiwDi5pxlcoHPnKIpl+N0khgSVPpDCdzonzWIIiH2EQCyckBuv1mUB8
GsP6tHyzog+A4OsQ9fRTPq1sHV40RLX70LbmeWwK9eFdNM76SCbE5XKKl6cB
2oZWgFVB0qCWy2y5dhcLwcoNxYlIDkm9qTa8p5bcgkFEFTEPuskOS+W7dFW2
r7IyF26oCM/u7iMV+vSc+5sakRi1ki42yNBySW6aeo8jSIpjawe9MOJH82BJ
xSRqK049bUwnlT8n6jy0Z+4JALy2AdPSHOnITuduSKCDJvtHdqCW7tMYDkIZ
phTZ19hpTMBHC+oueto1Lo+Ly0eVj4xyeFNDXHpJlBD8auoEVn8LbTRZrDnp
MuQSminVNrOANgyZOKepRiuIEv07uQAUltn76jtU7xErSwSu7CAFmQzDJHvL
utngXlC6q5uC8w35bOrg0tFCsii7jifABQt9rJIMJ1E5rqr0PqixQK+IrHe4
cRE6PR7pUtAJFdRfc0F3sbBDjFJCf4ClpdJZaBwhcuMsiyzio25lSzUvOIsO
LGgNoLtU6LUAbcUtHwqKxTdB36OyPEknFAAF+hggsVS4lLvGpTpAiCjunjnv
sxjw2aTO5CS+jVn0H5RSZOe8PMrzgQMr5kznwyjtsovvGxurhR4QCyAyhwdY
PcpQ/WSSXLTXoYAJKLtIfAwe69vRS2o5GsM5H2nHbUUKQ3qDmcQOD6PYtmXf
BkVox0v/qPLgtRS6seWWC2xbvnYzZLxcWE0S/u07jCiTm5zJ/tDW2zWZbJk+
BKzOX2sQsd7a5daH+BrUoe281CAKl4SfON1ERTvxbYVCuPC3ESHMa13nT86m
p7//A7sE6GpP8lsj/BCNQQFA0WtwiVEodw8cONyDDjbTifFsLu2OI2s7qoLr
c+/jzHukPx2s5GfLm2bMcBy5dGgoXpF1fng7zmwIIiqrGUslU03659T3Oj27
NBcHCFezIg51D8V6iRY/VvMJ248FzLepAeNBxF7cgg4ChyJzUs94YHPoPnC+
V4JKxTcNhl5T6ZlGaBOAA0Y68qWSjxUlgQ20UmY19Krpgmn4DchRvVhq2Rv3
li70IvqpafyRkV4IanAIuJRXG0jxSYZPXPPVsZpJTJlzqigzt+G1USTMjpIj
X1/DaeRUhz4UibJ+haOybcifTl+9giSu1DKAXj2usMf1I4DdVo5pJjVYo4pM
Xxl1LQ5THbSuvmqnXMjUBQaTGVKqmaGF3pdwo5jd8Eq7AfEMlFHMOkenhzrj
fGFPTv1XzhjVsCG6nNBa0m9cPH2c1RBG80ZZFtSeBUEVGbLNoApgEFoXR6dF
2ZBh0FqSJhlmWWNKksaFcRCQM0hKhJGmbD5+63NRb8yNN8oN0pG+bB4fSXq6
/am0f0hy6Vi400fac0xcMuvPGH8sffPms9v/8KuOP/7lre3fEJL/WvCbUiLw
bzl/2f89JRo+e/6fPf7wq1+y/790/NEvb21/LrdHuvoXvwR+XzD+8JtfAL9f
OP6eL29tL+fn18K/3/z8jH/57z0aEPaURflY+9EiAb/t/M8xefp2rN7ffmz6
w1357Pn/XUvgf2H7aDmf394t5dsvHD/57XPb//Brja8Pbmn/mlMOb+Vq/x/j
L2FvMPfPbP//Cn/Z//TF7dMFfSn+Cqn/ZfC/+XL8/VXG/wL4nVPI6Ze3/1Xh
/wvx/+YX0I9fY3zzT2j/2pIm/aXtBwf6t57/P/n8m5Qgf277lAL8svF/e/if
YRIFyg9oifhv+P/m8Efzh8D+i9r/N/zT8YOiLGzqSwuziAHwMRr+ONwoyEvA
wpCc1/WVMU/PXpwl1wC78ElNUPAOF3/1w06KUpDTGDtRq6RWghnp1M1BQ1KW
xTvvbwivtNTLj9XBJdGIWrWEr/aS+04Sd55GHOMTX2S5nZlHfRD0rc25rPcg
VgZhFjSOTL+HB1GV1Qc1Xq139PTswbGpmxXoGnSvr/n6LV4+uq63aJ90ZmMY
7IKCvWEORzDCsTlXw7ckjBw9fXlx/ub4a42V7ur6UkLys85cNOimReCWpaWE
l0dYraKamKfoiKicNfTe7zqOBb73HV91+7e+shNzevceeW86vtCtxM7djSPz
YmW2hVwAdQabTSl6muFTtOTLoyVJNMGy7qsFt6drW78//e4ulhM+i3zQHryp
A5edVBwmZkeKdzmzuxiWY6+JhquGF68XUcyPInBQ7yKLruyi+7hdAkF4FXaT
FYl/nB2kuPwZqpRawIRLsAKIXChCm9dbQisPBHftFCOIjOF8nLBSquCu1+M1
Nis3UlR80eeYGOciSyZUh2iFFytRxkqTbazcc0s3SGFhWvScUXaSVOsJYxOT
de6dfBdSgImpYJiSYtbNN+EFtYOjQzvQ8K1uWv2F4iYzvTDQOEeUoytzWPFl
uLexN1ccIGF8F3UT5FJKeV2aABYr/7R5YlQvhjHKPBU2fsthECldH8xjXxF7
vV2pcBevtxPuw0UCodPb15pJLiWULYziabFMvc6jai3f76SFo2Utbr00ufAO
ZJkwkOo+jOzQYMwwQIkcWjAMBgQvYXZ0K7QUVJYi+g0QnKrfzG3DNWiYNuo1
a+t+k0kfckGKHD2eG+YirHau75wrJ8zRcQhoXAJdoPr8MXq61lh4J/B6uhsS
EUT+FhZef+L3lR2QjIfkOpYAVXIExZUQf3jfLzMihZwKqZ73NGw3TJ9A6LXu
BmMOsUQuIqfYpzgXhJLPYKfMU+8sdXeUFG3ec3WismjVGxjyY4zNqDlsQE6V
nW6gV/JIUvjsD5it+BfMW5wBzfnTLBxHWcSqqfvtIKETEyWwIFp9eND2c44f
UcJL00GfdGd+WHfdtr1/cnJ9fX1vpgOd4CwAdiclJQku6xOcx58ovBSZ5pV1
2T3UV8JH7h8ehP3G3U4z7uHk2s6p2xNJJDzBhJ53s3W3Kf/EED7LscB2aReM
LnylpJVr7OkWXFpQVl0modsY7xzcVgf7t4SDiMEsUr3N/NXiDaWdedYvl/Tg
bLODTX+1BmZUbFt69AhW9brm3y/W9Qbe/1hQTXsM04GHz+GvzJbmNf7fLFrc
e3j84wbRDp4/wOgH6I+evoBdPt/AIaO//lZszDm0whgZ+PNh1mB4NkghDZ5V
ftZjWoD5m6WwW57GyzJbmgdwAt1X5z2GAbxADnUJJ5cnJsswT7C8/Wb6AKQE
mTF6emGUEjQpfnJWLZqf7X+aV/3Pi6a+bi8L/fCyb81fYRmltH1iAc4PiuZy
XZc/yyKqLqvN/1r3DCOMKV0X+H+2RlLMH2V5PYc54yLqaAcplmu4jW//iikR
RQNk9DWcH/Ok7tvS7iawHyBlmLd0YdcGyMYEpCaM+rhYZ6UvHAWbrVUJhAoX
FNxZ2Gs+uWg9QVQ4PPi/P49XxaKuAAA=

-->

</rfc>

