<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-architecture-09" category="info">

  <front>
    <title abbrev="A Firmware Update Architecture for IoT">A Firmware Update Architecture for Internet of Things</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="D." surname="Brown" fullname="David Brown">
      <organization>Linaro</organization>
      <address>
        <email>david.brown@linaro.org</email>
      </address>
    </author>
    <author initials="M." surname="Meriac" fullname="Milosch Meriac">
      <organization>Consultant</organization>
      <address>
        <email>milosch@meriac.com</email>
      </address>
    </author>

    <date year="2020" month="May" day="22"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Vulnerabilities with Internet of Things (IoT) devices have raised
the need for a solid and secure firmware update mechanism that is
also suitable for constrained devices. Incorporating such update
mechanism to fix vulnerabilities, to update configuration settings
as well as adding new functionality is recommended by security
experts.</t>

<t>This document lists requirements and describes an architecture for
a firmware update mechanism suitable for IoT devices. The
architecture is agnostic to the transport of the firmware images
and associated meta-data.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>When developing Internet of Things (IoT) devices, one of the most difficult problems
to solve is how to update firmware on the device. Once the
device is deployed, firmware updates play a critical part in its
lifetime, particularly when devices have a long lifetime, are
deployed in remote or inaccessible areas where manual
intervention is cost prohibitive or otherwise difficult. Updates
to the firmware of an IoT device are done to fix bugs in software,
to add new functionality, and to re-configure the device to work
in new environments or to behave differently in an already
deployed context.</t>

<t>The firmware update process, among other goals, has to ensure that</t>

<t><list style="symbols">
  <t>The firmware image is authenticated and integrity protected.
Attempts to flash a modified firmware image or an image from
an unknown source are prevented.</t>
  <t>The firmware image can be confidentiality protected so that
attempts by an adversary to recover the plaintext binary can
be prevented. Obtaining the firmware is often one of
the first steps to mount an attack since it gives the adversary
valuable insights into used software libraries, configuration
settings and generic functionality (even though reverse
engineering the binary can be a tedious process).</t>
</list></t>

<t>This version of the document assumes asymmetric cryptography and
a public key infrastructure. Future versions may also describe
a symmetric key approach for very constrained devices.</t>

<t>While the standardization work has been informed by and optimised for firmware
update use cases of Class 1 (as defined in RFC 7228 <xref target="RFC7228"/>) devices, there is nothing in
the architecture that restricts its use to only these constrained IoT devices.
Software update and delivery of arbitrary data, such as configuration information
and keys, can equally be managed by manifests. The solution therefore applies to
more capable devices, such as network storage devices, set top boxes, and IP-based cameras as well.</t>

<t>More details about the security goals are discussed in
<xref target="architecture"/> and requirements are described in <xref target="requirements"/>.</t>

</section>
<section anchor="terminology" title="Conventions and Terminology">

<t>This document uses the following terms:</t>

<t><list style="symbols">
  <t>Manifest: The manifest contains meta-data about the firmware
image. The manifest is protected against modification and
provides information about the author.</t>
  <t>Firmware Image: The firmware image, or image, is a binary
that may contain the complete software of a device or a subset of
it. The firmware image may consist of multiple images, if
the device contains more than one microcontroller. Often
it is also a compressed archive that contains code,
configuration data, and even the entire file system. The
image may consist of a differential update for performance
reasons. Firmware is the more universal term. The terms,
firmware image, firmware, and image, are used in this
document and are interchangeable.</t>
  <t>Software: The terms “software” and “firmware” are used
interchangeably.</t>
  <t>Bootloader: A bootloader is a piece of software that is
executed once a microcontroller has been reset. It is
responsible for deciding whether to boot a firmware image
that is present or whether to obtain and verify a new
firmware image. Since the bootloader is a security critical
component its functionality may be split into separate stages.
Such a multi-stage bootloader may offer very basic functionality
in the first stage and resides in ROM whereas the second stage
may implement more complex functionality and resides in flash
memory so that it can be updated in the future (in case bugs
have been found). The exact split of components into the
different stages, the number of firmware images stored by an
IoT device, and the detailed functionality varies throughout
different implementations. A more detailed discussion is
provided in <xref target="bootloader"/>.</t>
  <t>Microcontroller (MCU for microcontroller unit): An MCU is a
compact integrated circuit designed for use in embedded systems.
A typical microcontroller includes a processor, memory (RAM and
flash), input/output (I/O) ports and other features connected via
some bus on a single chip. The term ‘system on chip (SoC)’ is
often used for these types of devices.</t>
  <t>System on Chip (SoC): An SoC is an integrated circuit that
integrates all components of a computer, such as CPU, memory,
input/output ports, secondary storage, etc.</t>
  <t>Homogeneous Storage Architecture (HoSA): A device that stores
all firmware components in the same way, for example in a file
system or in flash memory.</t>
  <t>Heterogeneous Storage Architecture (HeSA): A device that
stores at least one firmware component differently from the rest,
for example a device with an external, updatable radio, or a
device with internal and external flash memory.</t>
  <t>Trusted Execution Environments (TEEs): An execution environment
that runs alongside of, but is isolated from, an REE.</t>
  <t>Rich Execution Environment (REE): An environment that is provided
and governed by a typical OS (e.g., Linux, Windows, Android, iOS),
potentially in conjunction with other supporting operating systems
and hypervisors; it is outside of the TEE.  This environment and
applications running on it are considered un-trusted.</t>
  <t>Trusted applications (TAs): An application component that runs in
a TEE.</t>
</list></t>

<t>For more information about TEEs see <xref target="I-D.ietf-teep-architecture"/>.</t>

<t>The following entities are used:</t>

<t><list style="symbols">
  <t>Author: The author is the entity that creates the firmware image.
There may be multiple authors in a system either when a device
consists of multiple micro-controllers or when the the final
firmware image consists of software components from multiple
companies.</t>
  <t>Firmware Consumer: The firmware consumer is the recipient of the
firmware image and the manifest. It is responsible for parsing
and verifying the received manifest and for storing the obtained
firmware image. The firmware consumer plays the role of the
update component on the IoT device typically running in the
application firmware. It interacts with the firmware server and
with the status tracker, if present.</t>
  <t>(IoT) Device: A device refers to the entire IoT product, which
consists of one or many MCUs, sensors and/or actuators. Many IoT
devices sold today contain multiple MCUs and therefore a single
device may need to obtain more than one firmware image and
manifest to succesfully perform an update. The terms device and
firmware consumer are used interchangably since the firmware
consumer is one software component running on an MCU on the device.</t>
  <t>Status Tracker: The status tracker offers device management
functionality to retrieve information about the installed firmware
on a device and other device characteristics (including free memory
and hardware components), to obtain the state of the firmware update
cycle the device is currently in, and to trigger the update process.
The deployment of status trackers is flexible and they may be used
as cloud-based servers, on-premise servers, embedded in edge computing device
(such as Internet access gateways or protocol translation gateways),
or even in smart phones and tablets. While the IoT device itself
runs the client-side of the status tracker it will most likely not
run a status tracker itself unless it acts as a proxy for other
IoT devices in a protocol translation or edge computing device node.
How much functionality a status tracker includes depends on the selected
configuration of the device management functionality and the communication
environment it is used in. In a generic networking environment the protocol
used between the client and the server-side of the status tracker need to
deal with Internet communication challenges involving firewall and NAT traversal.
In other cases, the communication interaction may be rather simple. This
architecture document does not impose requirements on the status tracker.</t>
  <t>Firmware Server: The firmware server stores firmware images and manifests and
distributes them to IoT devices.
Some deployments may require a store-and-forward concept, which requires
storing the firmware images/manifests on more than one entity before<vspace />
they reach the device. There is typically some interaction between the
firmware server and the status tracker but those entities are often
physically separated on different devices for scalability reasons.</t>
  <t>Device Operator: The actor responsible for the day-to-day operation
of a fleet of IoT devices.</t>
  <t>Network Operator: The actor responsible for the operation of a
network to which IoT devices connect.</t>
</list></t>

<t>In addition to the entities in the list above there is an orthogonal
infrastructure with a Trust Provisioning Authority (TPA) distributing
trust anchors and authorization permissions to various entities in
the system. The TPA may also delegate rights to install, update,
enhance, or delete trust anchors and authorization permissions to
other parties in the system. This infrastructure overlaps the
communication architecture and different deployments may empower
certain entities while other deployments may not. For example,
in some cases, the Original Design Manufacturer (ODM), which is a
company that designs and manufactures a product, may act as a
TPA and may decide to remain in full control over the firmware
update process of their products.</t>

<t>The terms ‘trust anchor’ and ‘trust anchor store’ are defined in
<xref target="RFC6024"/>:</t>

<t><list style="symbols">
  <t>“A trust anchor represents an authoritative entity via a public
key and associated data.  The public key is used to verify digital
signatures, and the associated data is used to constrain the types
of information for which the trust anchor is authoritative.”</t>
  <t>“A trust anchor store is a set of one or more trust anchors stored
in a device.  A device may have more than one trust anchor store,
each of which may be used by one or more applications.”
A trust anchor store must resist modification against unauthorized
insertion, deletion, and modification.</t>
</list></t>

</section>
<section anchor="requirements" title="Requirements">

<t>The firmware update mechanism described in this specification
was designed with the following requirements in mind:</t>

<t><list style="symbols">
  <t>Agnostic to how firmware images are distributed</t>
  <t>Friendly to broadcast delivery</t>
  <t>Use state-of-the-art security mechanisms</t>
  <t>Rollback attacks must be prevented</t>
  <t>High reliability</t>
  <t>Operate with a small bootloader</t>
  <t>Small Parsers</t>
  <t>Minimal impact on existing firmware formats</t>
  <t>Robust permissions</t>
  <t>Diverse modes of operation</t>
  <t>Suitability to software and personalization data</t>
</list></t>

<section anchor="agnostic-to-how-firmware-images-are-distributed" title="Agnostic to how firmware images are distributed">

<t>Firmware images can be conveyed to devices in a variety of ways,
including USB, UART, WiFi, BLE, low-power WAN technologies, etc.
and use different protocols (e.g., CoAP, HTTP). The specified
mechanism needs to be agnostic to the distribution of the
firmware images and manifests.</t>

</section>
<section anchor="friendly-to-broadcast-delivery" title="Friendly to broadcast delivery">

<t>This architecture does not specify any specific broadcast protocol.
However, given that broadcast may be desirable for some networks,
updates must cause the least disruption possible both in metadata
and firmware transmission.</t>

<t>For an update to be broadcast friendly, it cannot rely on link
layer, network layer, or transport layer security. A solution has
to rely on security protection applied to the manifest and firmware image
instead. In addition,
the same manifest must be deliverable to many devices, both those
to which it applies and those to which it does not, without a
chance that the wrong device will accept the update. Considerations
that apply to network broadcasts apply equally to the use of
third-party content distribution networks for payload distribution.</t>

</section>
<section anchor="use-state-of-the-art-security-mechanisms" title="Use state-of-the-art security mechanisms">

<t>End-to-end security between the author and the device is shown in
<xref target="architecture"/>.</t>

<t>Authentication ensures that the device can cryptographically identify
the author(s) creating firmware images and manifests. Authenticated
identities may be used as input to the authorization process.</t>

<t>Integrity protection ensures that no third party can modify the manifest
or the firmware image.</t>

<t>For confidentiality protection of the firmware image, it must be done in such a
way that every intended recipient can decrypt it. The information
that is encrypted individually for each device must maintain
friendliness to Content Distribution Networks, bulk storage, and
broadcast protocols.</t>

<t>A manifest specification must support different cryptographic algorithms
and algorithm extensibility. Due of the nature of
unchangeable code in ROM for use with bootloaders the use of
post-quantum secure signature mechanisms, such as hash-based
signatures <xref target="I-D.ietf-cose-hash-sig"/>, are attractive. These
algorithms maintain security in presence of quantum computers.</t>

<t>A mandatory-to-implement set of algorithms will be specified in the
manifest specification <xref target="I-D.ietf-suit-manifest"/>}.</t>

</section>
<section anchor="rollback-attacks-must-be-prevented" title="Rollback attacks must be prevented">

<t>A device presented with an old, but valid manifest and firmware
must not be tricked into installing such firmware since a
vulnerability in the old firmware image may allow an attacker to
gain control of the device.</t>

</section>
<section anchor="high-reliability" title="High reliability">

<t>A power failure at any time must not cause a failure of the device.
A failure to validate any part of an update must not cause a
failure of the device. One way to achieve this functionality is
to provide a minimum of two storage locations for firmware and one
bootable location for firmware. An alternative approach is to use a
2nd stage bootloader with build-in full featured firmware update
functionality such that it is possible to return to the update
process after power down.</t>

<t>Note: This is an implementation requirement rather than a requirement
on the manifest format.</t>

</section>
<section anchor="operate-with-a-small-bootloader" title="Operate with a small bootloader">

<t>Throughout this document we assume that the bootloader itself is
distinct from the role of the firmware consumer and therefore does not
manage the firmware update process. This may give the impression
that the bootloader itself is a completely separate component,
which is mainly responsible for selecting a firmware image to boot.</t>

<t>The overlap between the firmware update process and the bootloader
functionality comes in two forms, namely</t>

<t><list style="symbols">
  <t>First, a bootloader must verify the firmware image it boots as
part of the secure boot process. Doing so requires meta-data to be
stored alongside the firmware image so that the bootloader can
cryptographically verify the firmware image before booting it to
ensure it has not been tampered with or replaced. This meta-data
used by the bootloader may well be the same manifest obtained with the
firmware image during the update process (with the severable
fields stripped off).</t>
  <t>Second, an IoT device needs a recovery strategy in case the firmware
update / boot process fails. The recovery strategy may include
storing two or more firmware images on the device or offering the
ability to have a second stage bootloader perform the firmware update
process again using firmware updates over serial, USB or even
wireless connectivity like a limited version of Bluetooth Smart.
In the latter case the firmware consumer functionality is contained in the
second stage bootloader and requires the necessary functionality for
executing the firmware update process, including manifest parsing.</t>
</list></t>

<t>In general, it is assumed that the bootloader itself, or a minimal part of it,
will not be updated since a failed update of the bootloader poses a risk
in reliability.</t>

<t>All information necessary for a device to make a decision about the
installation of a firmware update must fit into the available RAM of
a constrained IoT device. This prevents flash write exhaustion.
This is typically not a difficult requirement to accomplish because
there are not other task/processing running while the bootloader is
active (unlike it may be the case when running the application firmware).</t>

<t>Note: This is an implementation requirement.</t>

</section>
<section anchor="small-parsers" title="Small Parsers">

<t>Since parsers are known sources of bugs they must be minimal.
Additionally, it must be easy to parse only those fields that are
required to validate at least one signature or MAC with minimal
exposure.</t>

</section>
<section anchor="minimal-impact-on-existing-firmware-formats" title="Minimal impact on existing firmware formats">

<t>The design of the firmware update mechanism must not require
changes to existing firmware formats.</t>

</section>
<section anchor="robust-permissions" title="Robust permissions">

<t>When a device obtains a monolithic firmware image from a single author
without any additional approval steps then the authorization flow is
relatively simple. There are, however, other cases where more complex
policy decisions need to be made before updating a device.</t>

<t>In this architecture the authorization policy is separated from
the underlying communication architecture. This is accomplished
by separating the entities from their permissions. For example,
an author may not have the authority to install a firmware image
on a device in critical infrastructure without the authorization
of a device operator. In this case, the device may be programmed
to reject firmware updates unless they are signed both by the
firmware author and by the device operator.</t>

<t>Alternatively, a device may trust precisely one entity, which
does all permission management and coordination. This entity
allows the device to offload complex permissions
calculations for the device.</t>

</section>
<section anchor="operating-modes" title="Operating modes">

<t>There are three broad classifications of update operating modes.</t>

<t><list style="symbols">
  <t>Client-initiated Update</t>
  <t>Server-initiated Update</t>
  <t>Hybrid Update</t>
</list></t>

<t>Client-initiated updates take the form of a firmware consumer on
a device proactively checking (polling) for new firmware images.</t>

<t>Server-initiated updates are important to consider because
timing of updates may need to be tightly controlled in some high-
reliability environments. In this case the status tracker determines
what devices qualify for a firmware update. Once those devices have been
selected the firmware server distributes updates to the firmware consumers.</t>

<t>Note: This assumes that the status tracker is able to reach the
device, which may require devices to keep reachability  information at
the status tracker up-to-date. This may also require keeping state at
NATs and stateful packet filtering firewalls alive.</t>

<t>Hybrid updates are those that require an interaction between the
firmware consumer and the status tracker. The status tracker
pushes notifications of availability of an update to the firmware consumer,
and it then downloads the image from a firmware server
as soon as possible.</t>

<t>An alternative view to the operating modes is to consider the steps a
device has to go through in the course of an update:</t>

<t><list style="symbols">
  <t>Notification</t>
  <t>Pre-authorisation</t>
  <t>Dependency resolution</t>
  <t>Download</t>
  <t>Installation</t>
</list></t>

<t>The notification step consists of the status tracker informing the
firmware consumer that an update is available. This can be accomplished via
polling (client-initiated), push notifications (server-initiated),
or more complex mechanisms.</t>

<t>The pre-authorisation step involves verifying whether the entity
signing the manifest is indeed authorized to perform an update.
The firmware consumer must also determine whether it should fetch and
process a firmware image, which is referenced in a manifest.</t>

<t>A dependency resolution phase is needed when more than one
component can be updated or when a differential update is used.
The necessary dependencies must be available prior to installation.</t>

<t>The download step is the process of acquiring a local copy of the
firmware image.  When the download is client-initiated, this means
that the firmware consumer chooses when a download occurs and initiates
the download process.  When a download is server-initiated,
this means that the status tracker tells
the device when to download or that it initiates the transfer
directly to the firmware consumer. For example, a download from an
HTTP-based firmware server is client-initiated. Pushing a manifest
and firmware image to the transfer to the Package resource of the LwM2M
Firmware Update object <xref target="LwM2M"/> is server-initiated.</t>

<t>If the firmware consumer has downloaded a new firmware image and is ready to
install it, it may need to wait for a trigger from the status tracker to
initiate the installation, may trigger the update automatically, or
may go through a more complex decision making process to determine
the appropriate timing for an update (such as delaying the update
process to a later time when end users are less impacted by the
update process).</t>

<t>Installation is the act of processing the payload into a format that
the IoT device can recognise and the bootloader is responsible for
then booting from the newly installed firmware image.</t>

<t>Each of these steps may require different permissions.</t>

</section>
<section anchor="suitability-to-software-and-personalization-data" title="Suitability to software and personalization data">

<t>The work on a standardized manifest format initially focused on the
most constrained IoT devices and those devices contain code put together
by a single author (although that author may obtain code from other
developers, some of it only in binary form).</t>

<t>Later it turns out that other use cases may benefit from a standardized
manifest format also for conveying software and even personalization data
alongside software. Trusted Execution Environments (TEEs), for example,
greatly benefit from a protocol for managing the lifecycle of trusted
applications (TAs) running inside a TEE. TEEs may obtain TAs
from different authors and those TAs may require personalization data,
such as payment information, to be securely conveyed to the TEE.</t>

<t>To support this wider range of use cases the manifest format should
therefore be extensible to convey other forms of payloads as well.</t>

</section>
</section>
<section anchor="claims" title="Claims">

<t>Claims in the manifest offer a way to convey instructions to
a device that impact the firmware update process. To have any
value the manifest containing those claims must be authenticated
and integrity protected. The credential used must be directly
or indirectly related to the trust anchor installed at the device
by the Trust Provisioning Authority.</t>

<t>The baseline claims for all manifests are described in <xref target="I-D.ietf-suit-information-model"/>.
For example, there are:</t>

<t><list style="symbols">
  <t>Do not install firmware with earlier metadata than the current
metadata.</t>
  <t>Only install firmware with a matching vendor, model, hardware
revision, software version, etc.</t>
  <t>Only install firmware that is before its best-before timestamp.</t>
  <t>Only allow a firmware installation if dependencies have been met.</t>
  <t>Choose the mechanism to install the firmware, based on the type
of firmware it is.</t>
</list></t>

</section>
<section anchor="architecture" title="Communication Architecture">

<t><xref target="arch-figure"/> shows the communication architecture where a
firmware image is created by an author, and uploaded to a firmware
server. The firmware image/manifest is distributed to the device
either in a push or pull manner using the firmware consumer residing on
the device. The device operator keeps track of the process using
the status tracker. This allows the device operator to know and
control what devices have received an update and which of them are
still pending an update.</t>

<figure title="Architecture." anchor="arch-figure"><artwork><![CDATA[
              Firmware +  +----------+       Firmware + +-----------+
              Manifest    |          |-+     Manifest   |           |-+
               +--------->| Firmware | |<---------------|           | |
               |          | Server   | |                |  Author   | |
               |          |          | |                |           | |
               |          +----------+ |                +-----------+ |
               |            +----------+                  +-----------+
               |
               |
               |
              -+--                                  ------
         ----  |  ----                          ----      ----
       //      |      \\                      //              \\
      /        |        \                    /                  \
     /         |         \                  /                    \
    /          |          \                /                      \
   /           |           \              /                        \
  |            v            |            |                          |
  |     +------------+                                              |
  |     |  Firmware  |      |            |                          |
 |      |  Consumer  |       | Device    |       +--------+          |
 |      +------------+       | Management|       |        |          |
 |      |            |<------------------------->| Status |          |
 |      |   Device   |       |          |        | Tracker|          |
 |      +------------+       |          ||       |        |         |
  |                         |           ||       +--------+         |
  |                         |            |                          |
  |                         |             \                        /
   \                       /               \                      /
    \                     /                 \      Device        /
     \     Network       /                   \     Operator     /
      \   Operator      /                     \\              //
       \\             //                        ----      ----
         ----     ----                              ------
             -----

]]></artwork></figure>

<t>End-to-end security mechanisms are used to protect the firmware
image and the manifest although <xref target="e2e-figure"/> does not show the
manifest itself since it may be distributed independently.</t>

<figure title="End-to-End Security." anchor="e2e-figure"><artwork><![CDATA[
                            +-----------+
+--------+                  |           |                   +--------+
|        |  Firmware Image  | Firmware  |   Firmware Image  |        |
| Device |<-----------------| Server    |<------------------| Author |
|        |                  |           |                   |        |
+--------+                  +-----------+                   +--------+
     ^                                                          *
     *                                                          *
     ************************************************************
                        End-to-End Security
]]></artwork></figure>

<t>Whether the firmware image and the manifest is pushed to the device or
fetched by the device is a deployment specific decision.</t>

<t>The following assumptions are made to allow the firmware consumer to verify the
received firmware image and manifest before updating software:</t>

<t><list style="symbols">
  <t>To accept an update, a device needs to verify the signature covering
the manifest. There may be one or multiple manifests that need to be
validated, potentially signed by different parties. The device needs
to be in possession of the trust anchors to verify those signatures.
Installing trust anchors to devices via the Trust Provisioning Authority
happens in an out-of-band fashion prior to the firmware update process.</t>
  <t>Not all entities creating and signing manifests have the same
permissions. A device needs to determine whether the requested action
is indeed covered by the permission of the party that signed the manifest.
Informing the device about the permissions of the different parties
also happens in an out-of-band fashion and is also a duty of the
Trust Provisioning Authority.</t>
  <t>For confidentiality protection of firmware images the author needs
to be in possession of the certificate/public key or a pre-shared key
of a device. The use of confidentiality protection of firmware images
is deployment specific.</t>
</list></t>

<t>There are different types of delivery modes, which are illustrated
based on examples below.</t>

<t>There is an option for embedding a firmware image into a manifest.
This is a useful approach for deployments where devices are not connected
to the Internet and cannot contact a dedicated firmware server for the firmware
download. It is also applicable when the firmware update happens via a
USB stick or via Bluetooth Smart. <xref target="attached-firmware-figure"/> shows this
delivery mode graphically.</t>

<figure title="Manifest with attached firmware." anchor="attached-firmware-figure"><artwork><![CDATA[
              /------------\                 /------------\
             /Manifest with \               /Manifest with \
             |attached      |               |attached      |
             \firmware image/               \firmware image/
              \------------/  +-----------+  \------------/
  +--------+                  |           |                 +--------+
  |        |<.................| Firmware  |<................|        |
  | Device |                  | Server    |                 | Author |
  |        |                  |           |                 |        |
  +--------+                  +-----------+                 +--------+
]]></artwork></figure>

<t><xref target="online-firmware-figure"/> shows an option for remotely updating a device
where the device fetches the firmware image from some file server. The
manifest itself is delivered independently and provides information about
the firmware image(s) to download.</t>

<figure title="Independent retrieval of the firmware image." anchor="online-firmware-figure"><artwork><![CDATA[
             /--------\                     /--------\
            /          \                   /          \
            | Manifest |                   | Manifest |
            \          /                   \          /
             \--------/                     \--------/
                            +-----------+
+--------+                  |           |                 +--------+
|        |<.................| Status    |................>|        |
| Device |                  | Tracker   |              -- | Author |
|        |<-                |           |            ---  |        |
+--------+  --              +-----------+          ---    +--------+
              --                                 ---
                ---                            ---
                   --       +-----------+    --
                     --     |           |  --
      /------------\   --   | Firmware  |<-    /------------\
     /              \    -- | Server    |     /              \
     |   Firmware   |       |           |     |   Firmware   |
     \              /       +-----------+     \              /
      \------------/                           \------------/
]]></artwork></figure>

<t>This architecture does not mandate a specific delivery mode but a solution
must support both types.</t>

</section>
<section anchor="manifest" title="Manifest">

<t>In order for a device to apply an update, it has to make several decisions
about the update:</t>

<t><list style="symbols">
  <t>Does it trust the author of the update?</t>
  <t>Has the firmware been corrupted?</t>
  <t>Does the firmware update apply to this device?</t>
  <t>Is the update older than the active firmware?</t>
  <t>When should the device apply the update?</t>
  <t>How should the device apply the update?</t>
  <t>What kind of firmware binary is it?</t>
  <t>Where should the update be obtained?</t>
  <t>Where should the firmware be stored?</t>
</list></t>

<t>The manifest encodes the information that devices need in order to
make these decisions. It is a data structure that contains the
following information:</t>

<t><list style="symbols">
  <t>information about the device(s) the firmware image is intended to
be applied to,</t>
  <t>information about when the firmware update has to be applied,</t>
  <t>information about when the manifest was created,</t>
  <t>dependencies on other manifests,</t>
  <t>pointers to the firmware image and information about the format,</t>
  <t>information about where to store the firmware image,</t>
  <t>cryptographic information, such as digital signatures or message
authentication codes (MACs).</t>
</list></t>

<t>The manifest information model is described in <xref target="I-D.ietf-suit-information-model"/>.</t>

</section>
<section anchor="device-firmware-update-examples" title="Device Firmware Update Examples">

<t>Although these documents attempt to define a firmware update
architecture that is applicable to both existing systems, as well
as yet-to-be-conceived systems; it is still helpful to consider
existing architectures.</t>

<section anchor="single-cpu-soc" title="Single CPU SoC">

<t>The simplest, and currently most common, architecture consists of
a single MCU along with its own peripherals.  These SoCs generally
contain some amount of flash memory for code and fixed data, as
well as RAM for working storage.  These systems either have a single
firmware image, or an immutable bootloader that runs a single image.
A notable characteristic of these SoCs is that the primary code is
generally execute in place (XIP).  Combined with the non-relocatable
nature of the code, firmware updates need to be done in place.</t>

</section>
<section anchor="single-cpu-with-secure-normal-mode-partitioning" title="Single CPU with Secure - Normal Mode Partitioning">

<t>Another configuration consists of a similar architecture to the
previous, with a single CPU.  However, this CPU supports a security
partitioning scheme that allows memory (in addition to other things)
to be divided into secure and normal mode.  There will generally be
two images, one for secure mode, and one for normal mode.  In this
configuration, firmware upgrades will generally be done by the CPU
in secure mode, which is able to write to both areas of the flash
device. In addition, there are requirements to be able to update
either image independently, as well as to update them together
atomically, as specified in the associated manifests.</t>

</section>
<section anchor="dual-cpu-shared-memory" title="Dual CPU, shared memory">

<t>This configuration has two or more CPUs in a single SoC that share
memory (flash and RAM).  Generally, they will be a protection mechanism
to prevent one CPU from accessing the other’s memory. Upgrades in this
case will typically be done by one of the CPUs, and is similar to the
single CPU with secure mode.</t>

</section>
<section anchor="dual-cpu-other-bus" title="Dual CPU, other bus">

<t>This configuration has two or more CPUs, each having their own memory.
There will be a communication channel between them, but it will be
used as a peripheral, not via shared memory.  In this case, each CPU
will have to be responsible for its own firmware upgrade.  It is
likely that one of the CPUs will be considered a master, and will
direct the other CPU to do the upgrade.  This configuration is
commonly used to offload specific work to other CPUs.  Firmware
dependencies are similar to the other solutions above, sometimes
allowing only one image to be upgraded, other times requiring several
to be upgraded atomically.  Because the updates are happening on
multiple CPUs, upgrading the two images atomically is challenging.</t>

</section>
</section>
<section anchor="bootloader" title="Bootloader">

<t>More devices today than ever before are being connected to the Internet,
which drives the need for firmware updates to be provided over the
Internet rather than through traditional interfaces, such as USB or
RS232. Updating a device over the Internet requires the device to fetch
not only the firmware image but also the manifest. Hence, the following
building blocks are necessary for a firmware update solution:</t>

<t><list style="symbols">
  <t>the Internet protocol stack for firmware downloads (*),</t>
  <t>the capability to write the received firmware image to
persistent storage (most likely flash memory) prior to performing
the update,</t>
  <t>the ability to unpack, decompress or otherwise process the received
firmware image,</t>
  <t>the features to verify an image and a manifest, including digital
signature verification or checking a message authentication code,</t>
  <t>a manifest parsing library, and</t>
  <t>integration of the device into a device management server to
perform automatic firmware updates and to track their progress.</t>
</list></t>

<t>(*) Because firmware images are often multiple kilobytes, sometimes
exceeding one hundred kilobytes, in size for low end IoT devices and even
several megabytes large for IoT devices running full-fledged operating systems
like Linux, the protocol mechanism for retrieving these images needs
to offer features like congestion control, flow control, fragmentation
and reassembly, and mechanisms to resume interrupted or corrupted transfers.</t>

<t>All these features are most likely offered by the application, i.e.
firmware consumer, running
on the device (except for basic security algorithms that may run
either on a trusted execution environment or on a separate hardware
security MCU/module) rather than by the bootloader itself.</t>

<t>Once manifests have been processed and firmware images successfully
downloaded and verified the device needs to hand control over to the
bootloader.  In most cases this requires the MCU to restart. Once the
MCU has initiated a restart, the bootloader takes over control and
determines whether the newly downloaded firmware
image should be executed.</t>

<t>The boot process is security sensitive
because the firmware images may, for example, be stored in off-chip
flash memory giving attackers easy access to the image for reverse
engineering and potentially also for modifying the binary.  The
bootloader will therefore have to perform security checks on the
firmware image before it can be booted. These security checks by the
bootloader happen in addition to the security checks that happened
when the firmware image and the manifest were downloaded.</t>

<t>The manifest may have been stored alongside the firmware image to
allow re-verification of the firmware image during every boot
attempt.  Alternatively, secure boot-specific meta-data may have been
created by the application after a successful firmware download
and verification process.  Whether to re-use the standardized
manifest format that was used during the initial firmware retrieval
process or whether it is better to use a different format for the
secure boot-specific meta-data depends on the system design.  The
manifest format does, however, have the capability to serve also as a
building block for secure boot with its severable elements that allow
shrinking the size of the manifest by stripping elements that are no
longer needed.</t>

<t>If the application image contains the firmware consumer
functionality, as described above, then it is necessary that a
working image is left on the device. This allows the bootloader to
roll back to a working firmware image to execute a firmware download
if the bootloader itself does not have enough functionality to
fetch a firmware image plus manifest from a firmware server over the
Internet.  A multi-stage bootloader may soften this requirement at
the expense of a more sophisticated boot process.</t>

<t>For a bootloader to offer a secure boot mechanism it needs to provide
the following features:</t>

<t><list style="symbols">
  <t>ability to access security algorithms, such as SHA-256 to compute
a fingerprint over the firmware image and a digital signature
algorithm.</t>
  <t>access keying material directly or indirectly to utilize the
digital signature.  The device needs to have a trust anchor store.</t>
  <t>ability to expose boot process-related data to the application
firmware (such as to the device management software).  This allows
a device management server to determine whether the firmware
update has been successful and, if not, what errors occurred.</t>
  <t>to (optionally) offer attestation information (such as
measurements).</t>
</list></t>

<t>While the software architecture of the bootloader and its
security mechanisms are implementation-specific, the manifest can
be used to control the firmware download from the Internet in
addition to augmenting secure boot process. These building blocks
are highly relevant for the design of the manifest.</t>

</section>
<section anchor="example" title="Example">

<t><xref target="firmware-update"/> illustrates an example message flow
for distributing a firmware image to a device
starting with an author uploading the new firmware to
firmware server and creating a manifest. The firmware
and manifest are stored on the same firmware server. This
setup does not use a status tracker and the firmware consumer
component is therefore responsible for periodically checking
whether a new firmware image is available for download.</t>

<figure title="First Example Flow for a Firmware Upate." anchor="firmware-update"><artwork><![CDATA[
+--------+    +-----------------+      +------------+ +----------+
|        |    |                 |      |  Firmware  | |          |
| Author |    | Firmware Server |      |  Consumer  | |Bootloader|
+--------+    +-----------------+      +------------+ +----------+
  |                   |                     |                +
  | Create Firmware   |                     |                |
  |--------------+    |                     |                |
  |              |    |                     |                |
  |<-------------+    |                     |                |
  |                   |                     |                |
  | Upload Firmware   |                     |                |
  |------------------>|                     |                |
  |                   |                     |                |
  | Create Manifest   |                     |                |
  |---------------+   |                     |                |
  |               |   |                     |                |
  |<--------------+   |                     |                |
  |                   |                     |                |
  | Sign Manifest     |                     |                |
  |-------------+     |                     |                |
  |             |     |                     |                |
  |<------------+     |                     |                |
  |                   |                     |                |
  | Upload Manifest   |                     |                |
  |------------------>|                     |                |
  |                   |                     |                |
  |                   |   Query Manifest    |                |
  |                   |<--------------------|                |
  |                   |                     |                |
  |                   |   Send Manifest     |                |
  |                   |-------------------->|                |
  |                   |                     | Validate       |
  |                   |                     | Manifest       |
  |                   |                     |---------+      |
  |                   |                     |         |      |
  |                   |                     |<--------+      |
  |                   |                     |                |
  |                   |  Request Firmware   |                |
  |                   |<--------------------|                |
  |                   |                     |                |
  |                   | Send Firmware       |                |
  |                   |-------------------->|                |
  |                   |                     | Verify         |
  |                   |                     | Firmware       |
  |                   |                     |--------------+ |
  |                   |                     |              | |
  |                   |                     |<-------------+ |
  |                   |                     |                |
  |                   |                     | Store          |
  |                   |                     | Firmware       |
  |                   |                     |-------------+  |
  |                   |                     |             |  |
  |                   |                     |<------------+  |
  |                   |                     |                |
  |                   |                     |                |
  |                   |                     | Trigger Reboot |
  |                   |                     |--------------->|
  |                   |                     |                |
  |                   |                     |                |
  |                   |                 +---+----------------+--+
  |                   |                S|   |                |  |
  |                   |                E|   | Verify         |  |
  |                   |                C|   | Firmware       |  |
  |                   |                U|   | +--------------|  |
  |                   |                R|   | |              |  |
  |                   |                E|   | +------------->|  |
  |                   |                 |   |                |  |
  |                   |                B|   | Activate new   |  |
  |                   |                O|   | Firmware       |  |
  |                   |                O|   | +--------------|  |
  |                   |                T|   | |              |  |
  |                   |                 |   | +------------->|  |
  |                   |                P|   |                |  |
  |                   |                R|   | Boot new       |  |
  |                   |                O|   | Firmware       |  |
  |                   |                C|   | +--------------|  |
  |                   |                E|   | |              |  |
  |                   |                S|   | +------------->|  |
  |                   |                S|   |                |  |
  |                   |                 +---+----------------+--+
  |                   |                     |                |
]]></artwork></figure>

<t><xref target="firmware-update2"/> shows an example follow with the device using
a status tracker. For editorial reasons the author publishing the
manifest at the status tracker and the firmware image at the firmware
server is not shown. Also omitted is the secure boot process
following the successful firmware update process.</t>

<t>The exchange starts with the device interacting with the status
tracker; the details of such exchange will vary with the different
device management systems being used. In any case, the status
tracker learns about the firmware version of the devices it
manages. In our example, the device under management is using
firmware version A.B.C. At a later point in time the author uploads
a new firmware along with the manifest to the firmware server and the
status tracker, respectively. While there is no need to store the
manifest and the firmware on different servers this example shows
a common pattern used in the industry. The status tracker may then
automatically, based on human intervention or based on a more
complex policy decide to inform the device about the newly available
firmware image. In our example, it does so by pushing the manifest
to the firmware consumer. The firmware consumer downloads the firmware
image with the newer version X.Y.Z after successful validation
of the manifest. Subsequently, a reboot is initiated and the secure
boot process starts.</t>

<figure title="Second Example Flow for a Firmware Upate." anchor="firmware-update2"><artwork><![CDATA[
 +---------+   +-----------------+    +-----------------------------+
 | Status  |   |                 |    | +------------+ +----------+ |
 | Tracker |   | Firmware Server |    | |  Firmware  | |Bootloader| |
 |         |   |                 |    | |  Consumer  | |          | |
 +---------+   +-----------------+    | +------------+ +----------+ |
      |                |              |      |  IoT Device    |     |
      |                |               `''''''''''''''''''''''''''''
      |                |                     |                |
      |        Query Firmware Version        |                |
      |------------------------------------->|                |
      |        Firmware Version A.B.C        |                |
      |<-------------------------------------|                |
      |                |                     |                |
      |         <<some time later>>          |                |
      |                |                     |                |
    _,...._         _,...._                  |                |
  ,'       `.     ,'       `.                |                |
 |   New     |   |   New     |               |                |
 \ Manifest  /   \ Firmware  /               |                |
  `.._   _,,'     `.._   _,,'                |                |
      `''             `''                    |                |
      |            Push manifest             |                |
      |----------------+-------------------->|                |
      |                |                     |                |
      |                '                     |                '
      |                |                     | Validate       |
      |                |                     | Manifest       |
      |                |                     |---------+      |
      |                |                     |         |      |
      |                |                     |<--------+      |
      |                | Request firmware    |                |
      |                | X.Y.Z               |                |
      |                |<--------------------|                |
      |                |                     |                |
      |                | Firmware X.Y.Z      |                |
      |                |-------------------->|                |
      |                |                     |                |
      |                |                     | Verify         |
      |                |                     | Firmware       |
      |                |                     |--------------+ |
      |                |                     |              | |
      |                |                     |<-------------+ |
      |                |                     |                |
      |                |                     | Store          |
      |                |                     | Firmware       |
      |                |                     |-------------+  |
      |                |                     |             |  |
      |                |                     |<------------+  |
      |                |                     |                |
      |                |                     |                |
      |                |                     | Trigger Reboot |
      |                |                     |--------------->|
      |                |                     |                |
      |                |                     |                |
      |                |                     | __..-------..._'
      |                |                    ,-'               `-.
      |                |                   |      Secure Boot    |
      |                |                   `-.                 _/
      |                |                     |`--..._____,,.,-'
      |                |                     |                |
]]></artwork></figure>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Firmware updates fix security vulnerabilities and are considered to be
an important building block in securing IoT devices. Due to the
importance of firmware updates for IoT devices the Internet
Architecture Board (IAB) organized a ‘Workshop on Internet of Things
(IoT) Software Update (IOTSU)’, which took place at Trinity College
Dublin, Ireland on the 13th and 14th of June, 2016 to take a look at
the big picture. A report about this workshop can be found at
<xref target="RFC8240"/>. A standardized firmware manifest format providing
end-to-end security from the author to the device will be specified
in a separate document.</t>

<t>There are, however, many other considerations raised during the
workshop. Many of them are outside the scope of standardization
organizations since they fall into the realm of product engineering,
regulatory frameworks, and business models. The following
considerations are outside the scope of this document, namely</t>

<t><list style="symbols">
  <t>installing firmware updates in a robust fashion so that the
update does not break the device functionality of the environment
this device operates in.</t>
  <t>installing firmware updates in a timely fashion considering the
complexity of the decision making process of updating devices,
potential re-certification requirements, and the need for user
consent to install updates.</t>
  <t>the distribution of the actual firmware update, potentially in
an efficient manner to a large number of devices without human
involvement.</t>
  <t>energy efficiency and battery lifetime considerations.</t>
  <t>key management required for verifying the digital signature
protecting the manifest.</t>
  <t>incentives for manufacturers to offer a firmware update mechanism
as part of their IoT products.</t>
</list></t>

</section>
<section anchor="mailing-list-information" title="Mailing List Information">

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their feedback:</t>

<t><list style="symbols">
  <t>Geraint Luff</t>
  <t>Amyas Phillips</t>
  <t>Dan Ros</t>
  <t>Thomas Eichinger</t>
  <t>Michael Richardson</t>
  <t>Emmanuel Baccelli</t>
  <t>Ned Smith</t>
  <t>Jim Schaad</t>
  <t>Carsten Bormann</t>
  <t>Cullen Jennings</t>
  <t>Olaf Bergmann</t>
  <t>Suhas Nandakumar</t>
  <t>Phillip Hallam-Baker</t>
  <t>Marti Bolivar</t>
  <t>Andrzej Puzdrowski</t>
  <t>Markus Gueller</t>
  <t>Henk Birkholz</t>
  <t>Jintao Zhu</t>
  <t>Takeshi Takahashi</t>
  <t>Jacob Beningo</t>
  <t>Kathleen Moriarty</t>
</list></t>

<t>We would also like to thank the WG chairs, Russ Housley, David Waltermire,
Dave Thaler for their support and their reviews.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC7925" target='https://www.rfc-editor.org/info/rfc7925'>
<front>
<title>Transport Layer Security (TLS) / Datagram Transport Layer Security (DTLS) Profiles for the Internet of Things</title>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig' role='editor'><organization /></author>
<author initials='T.' surname='Fossati' fullname='T. Fossati'><organization /></author>
<date year='2016' month='July' />
<abstract><t>A common design pattern in Internet of Things (IoT) deployments is the use of a constrained device that collects data via sensors or controls actuators for use in home automation, industrial control systems, smart cities, and other IoT deployments.</t><t>This document defines a Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) 1.2 profile that offers communications security for this data exchange thereby preventing eavesdropping, tampering, and message forgery.  The lack of communication security is a common vulnerability in IoT products that can easily be solved by using these well-researched and widely deployed Internet security protocols.</t></abstract>
</front>
<seriesInfo name='RFC' value='7925'/>
<seriesInfo name='DOI' value='10.17487/RFC7925'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC8240" target='https://www.rfc-editor.org/info/rfc8240'>
<front>
<title>Report from the Internet of Things Software Update (IoTSU) Workshop 2016</title>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<date year='2017' month='September' />
<abstract><t>This document provides a summary of the Internet of Things Software Update (IoTSU) Workshop that took place at Trinity College Dublin, Ireland on the 13th and 14th of June, 2016.  The main goal of the workshop was to foster a discussion on requirements, challenges, and solutions for bringing software and firmware updates to IoT devices. This report summarizes the discussions and lists recommendations to the standards community.</t><t>Note that this document is a report on the proceedings of the workshop.  The views and positions documented in this report are those of the workshop participants and do not necessarily reflect IAB views and positions.</t></abstract>
</front>
<seriesInfo name='RFC' value='8240'/>
<seriesInfo name='DOI' value='10.17487/RFC8240'/>
</reference>



<reference  anchor="RFC6024" target='https://www.rfc-editor.org/info/rfc6024'>
<front>
<title>Trust Anchor Management Requirements</title>
<author initials='R.' surname='Reddy' fullname='R. Reddy'><organization /></author>
<author initials='C.' surname='Wallace' fullname='C. Wallace'><organization /></author>
<date year='2010' month='October' />
<abstract><t>A trust anchor represents an authoritative entity via a public key and associated data.  The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative.  A relying party uses trust anchors to determine if a digitally signed object is valid by verifying a digital signature using the trust anchor's public key, and by enforcing the constraints expressed in the associated data for the trust anchor.  This document describes some of the problems associated with the lack of a standard trust anchor management mechanism and defines requirements for data formats and push-based protocols designed to address these problems.  This  document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract>
</front>
<seriesInfo name='RFC' value='6024'/>
<seriesInfo name='DOI' value='10.17487/RFC6024'/>
</reference>



<reference  anchor="RFC5649" target='https://www.rfc-editor.org/info/rfc5649'>
<front>
<title>Advanced Encryption Standard (AES) Key Wrap with Padding Algorithm</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='M.' surname='Dworkin' fullname='M. Dworkin'><organization /></author>
<date year='2009' month='September' />
<abstract><t>This document specifies a padding convention for use with the AES Key Wrap algorithm specified in RFC 3394.  This convention eliminates the requirement that the length of the key to be wrapped be a multiple of 64 bits, allowing a key of any practical length to be wrapped.  This  memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='5649'/>
<seriesInfo name='DOI' value='10.17487/RFC5649'/>
</reference>



<reference  anchor="RFC7228" target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='M.' surname='Ersue' fullname='M. Ersue'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2014' month='May' />
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>An Information Model for Firmware Updates in IoT Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='January' day='20' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality  One component of such a firmware update is a concise and machine- processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-05.txt' />
</reference>



<reference anchor="I-D.ietf-teep-architecture">
<front>
<title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>

<author initials='M' surname='Pei' fullname='Mingliang Pei'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<author initials='D' surname='Wheeler' fullname='David Wheeler'>
    <organization />
</author>

<date month='April' day='4' year='2020' />

<abstract><t>A Trusted Execution Environment (TEE) is an environment that enforces that any code within that environment cannot be tampered with, and that any data used by such code cannot be read or tampered with by any code outside that environment.  This architecture document motivates the design and standardization of a protocol for managing the lifecycle of trusted applications running inside such a TEE.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-08' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-teep-architecture-08.txt' />
</reference>



<reference anchor="I-D.ietf-cose-hash-sig">
<front>
<title>Use of the HSS/LMS Hash-based Signature Algorithm with CBOR Object Signing and Encryption (COSE)</title>

<author initials='R' surname='Housley' fullname='Russ Housley'>
    <organization />
</author>

<date month='December' day='11' year='2019' />

<abstract><t>This document specifies the conventions for using the Hierarchical Signature System (HSS) / Leighton-Micali Signature (LMS) hash-based signature algorithm with the CBOR Object Signing and Encryption (COSE) syntax.  The HSS/LMS algorithm is one form of hash-based digital signature; it is described in RFC 8554.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-cose-hash-sig-09' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-cose-hash-sig-09.txt' />
</reference>



<reference anchor="I-D.ietf-suit-manifest">
<front>
<title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<author initials='K' surname='Zandberg' fullname='Koen Zandberg'>
    <organization />
</author>

<date month='March' day='9' year='2020' />

<abstract><t>This specification describes the format of a manifest.  A manifest is a bundle of metadata about the firmware for an IoT device, where to find the firmware, the devices to which it applies, and cryptographic information protecting the manifest.  Firmware updates and trusted boot both tend to use sequences of common operations, so the manifest encodes those sequences of operations, rather than declaring the metadata.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-04' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-manifest-04.txt' />
</reference>


<reference anchor="LwM2M" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf">
  <front>
    <title>Lightweight Machine to Machine Technical Specification, Version 1.0.2</title>
    <author initials="." surname="OMA" fullname="Open Mobile Alliance">
      <organization></organization>
    </author>
    <date year="2018" month="February" day="09"/>
  </front>
  <format type="PDF" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf"/>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAEWPx14AA9V9W3fbVpbmO34FVvIQKSYpx11VXeXOpEu+lV0Txx5LqfT0
ypoUSByKaIMABxfJjOX57bO/vfe5AaBk2ZnqaT7YIoFz3/fbmc/nSVd0pXmY
nqbPimZ7lTUm/XGXZ51JT5vVpujMquvpt3XdpC+qzjSV6dJ6nZ5viuqiTbLl
sjGXH9e6Pk/yelVlWxotb7J1Ny9Mt563fdHNs+Dt+f0/JSvq4qJu9g/TolrX
SVLsmofprjG//6d//uN507fdg/v3/3T/QUIDZg/TM7Pqm6LbJ1d18/aiqfsd
/fbji/PkrdnTT/lDN/X5EwycJG2XVfkvWVlXNJm9aZNd8TBJ02a9Mnnb7Uv9
NU27ehX8WVS5qTr7Q1s3XWPWrfu+30Zfu6ZYuZdX9XZLbd3ToiqLyg9j3nXz
smi7OXWyrEt6bV5/fY+e0JZts92OdlvezfpuUzc02Tk95E9R0duPFunLuskq
+6Ns86PGVHlWxY/q5iKril+zrqgrOrlmm35fbGnzc/uC2WZF6RovuPGfs2a7
oDUkw4GfL9LzdrWp16YqLuLRn2dVZdqJxx87gw13sOhcBwdn8WRB062vBst/
kl0WefwgHvr7osqaejBqjlaLJVr9ueQXFtRqNORL2nHTFNkqHvNlUdY038Gz
eNjHddX2JYFgNxh6K43/vOXGstKqbrbU7tIAQN88e/zPf3rw+4cJ0CL+/Y8P
fndf//zD/Qe/0z9//4ff/ck2fPDgj/jzxfzJwmOe66iu5ts6N2X0SmfMLkLO
6Omqbs18k7WbeVtcjLve0pLXpu3w5Purlw9ePuTldllzYQgvNl23e3hycnV1
tah3ptrWy6I0WVkWWbUy2PKTxtAPrTn5vrjYdFcG/1IvJ3/75pf7vzyYP7j/
zR/vP7j/p/npyauXp/Pzs3n83nz03mKXr2UKQvO+CBqkLzNaZWUIzd2f52a1
qYpVVqZnO7Mq1vQn9mmW/s00Lf2RfrO4v3jwBXfp8NJDCM0qCUHjFa2SUBHL
TE91nfwCCObDFPOc338A8ocf5Vhsh6+fPPtP27FkPp+n2ZLoWbYi2vm3vqxM
k9HYRVcQfl8V3WaCN6RHRPGP09xcFit6a5NdmrTJipawvNuYtDImZ76QER0t
CU2JIKctCDmxC8tLeuElWzoHgqV2m3abrEsLooJlW6cAsmxZCntZEU7RBOnY
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
qwkU5gqYSloH59gm/xfHGt1RP9cAAA==

-->

</rfc>

