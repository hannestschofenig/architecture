<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-architecture-13" category="info">

  <front>
    <title abbrev="A Firmware Update Architecture for IoT">A Firmware Update Architecture for Internet of Things</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="D." surname="Brown" fullname="David Brown">
      <organization>Linaro</organization>
      <address>
        <email>david.brown@linaro.org</email>
      </address>
    </author>
    <author initials="M." surname="Meriac" fullname="Milosch Meriac">
      <organization>Consultant</organization>
      <address>
        <email>milosch@meriac.com</email>
      </address>
    </author>

    <date year="2020" month="October" day="14"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Vulnerabilities with Internet of Things (IoT) devices have raised
the need for a reliable and secure firmware update mechanism 
suitable for devices with resource constraints. Incorporating such update
mechanism to fix vulnerabilities, to update configuration settings
as well as adding new functionality is recommended by security
experts.</t>

<t>In addition to the definition of terminology and an architecture
this document motivates the standardization of a manifest format
as a transport-agnostic means for describing and protecting firmware
updates.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Firmware updates can help to fix security vulnerabilities and are
considered to be an important building block in securing IoT devices.
Due to rising concerns about insecure IoT devices the Internet
Architecture Board (IAB) organized a ‘Workshop on Internet of Things
(IoT) Software Update (IOTSU)’, which took place at Trinity College
Dublin, Ireland on the 13th and 14th of June, 2016 to take a look at
the bigger picture. A report about this workshop can be found at
<xref target="RFC8240"/>. The workshop revealed a number of challenges for developers
and led to the formation of the IETF 
Software Updates for Internet of Things (SUIT) working group.</t>

<t>Developing secure Internet of Things (IoT) devices is not an easy 
task and supporting a firmware update solution requires skillful
engineers. Once devices are deployed, firmware updates play a
critical part in their lifecycle management, particularly when devices have a
long lifetime, or are deployed in remote or inaccessible areas where manual
intervention is cost prohibitive or otherwise difficult. Firmware updates<vspace />
for IoT devices are expected to work automatically, i.e. without user
involvement. Automatic updates that do not require human intervention
are key to a scalable solution for fixing software vulnerabilities.</t>

<t>Firmware updates are not only done to fix
bugs, but they can also add new functionality, and re-configure
the device to work in new environments or to behave differently in
an already deployed context.</t>

<t>The firmware update process has to ensure that</t>

<t><list style="symbols">
  <t>The firmware image is authenticated and integrity protected.
Attempts to flash a maliciously modified firmware image or an image from
an unknown, untrusted source must be prevented. In examples this document 
uses asymmetric cryptography because it is the preferred approach by 
many IoT deployments. The use of symmetric credentials is also supported 
and can be used by very constrained IoT devices.</t>
  <t>The firmware image can be confidentiality protected so that
attempts by an adversary to recover the plaintext binary can
be mitigated or at least made more difficult. Obtaining the firmware is often one of
the first steps to mount an attack since it gives the adversary
valuable insights into used software libraries, configuration
settings and generic functionality. Even though reverse
engineering the binary can be a tedious process modern reverse 
engineering frameworks have made this task a lot easier.</t>
</list></t>

<t>While the standardization work has been informed by and optimised for firmware
update use cases of Class 1 devices (according to the device class
definitions in RFC 7228 <xref target="RFC7228"/>) devices, there is nothing in
the architecture that restricts its use to only these constrained IoT devices.
Moreover, this architecture is not limited to managing software updates,
but can also be applied to managing the delivery of arbitrary data, such
as configuration information and keys. Unlike higher end devices, like
laptops and desktop PCs, many IoT devices do not have user interfaces
and support for unattended updates is, therefore, essential for the design
of a practical solution. Constrained IoT devices often use a
software engineering model where a developer is responsible for creating
and compiling all software running on the device into a single, monolithic
firmware image. On higher end devices application software is, on the other 
hand, often downloaded separately and even obtained from developers different 
to the developers of the lower level software. The details for how to obtain 
those application layer software binaries then depends heavily on the platform, 
programming language uses and the sandbox the software is executed in.</t>

<t>While the IETF standardization work has been focused on the 
manifest format, a fully interoperable solution needs more than a standardized 
manifest. For example, protocols for transferring firmware images 
and manifests to the device need to be available as well as the status tracker 
functionality. These building blocks have been developed by various organizations 
under the umbrella of an IoT device management solution. The LwM2M protocol is one 
IoT device management protocol.</t>

<t>There are, however, several areas that (partially) fall outside the scope of the IETF
and other standards organizations but need to be considered by firmware authors, 
as well as device and network operators. Here are some of them, as highlighted during 
the IOTSU workshop:</t>

<t><list style="symbols">
  <t>Installing firmware updates in a robust fashion so that the
update does not break the device functionality of the environment
this device operates in. This requires proper testing and offering 
recovery strategies when a firmware update is unsuccessful.</t>
  <t>Making firmware updates available in a timely fashion considering the
complexity of the decision making process for updating devices,
potential re-certification requirements, the length of a supply chain 
an update needs to go through before it reaches the end customer, 
and the need for user consent to install updates.</t>
  <t>Ensuring an energy efficient design of a battery-powered IoT devices because a 
firmware update, particularly writing the firmware image to flash, is a heavy 
task for a device.</t>
  <t>Creating incentives for device operators to use a firmware update mechanism and to 
demand the integration of it from IoT device vendors.</t>
</list></t>

<t>This document starts with a terminology followed by the description of the architecture. 
We then explain the bootloader and how it integrates with the firmware update mechanism. 
Subsequently, we offer a categorization of IoT devices in terms of their hardware 
capabilities relevant for firmware updates. Next, we talk about the manifest structure 
and how to use it to secure firmware updates. We conclude with a more detailed example.</t>

</section>
<section anchor="terminology" title="Conventions and Terminology">

<section anchor="terms" title="Terms">

<t>This document uses the following terms:</t>

<t><list style="symbols">
  <t>Manifest: The manifest contains meta-data about the firmware
image. The manifest is protected against modification and
provides information about the author.</t>
  <t>Firmware Image: The firmware image, or image, is a binary
that may contain the complete software of a device or a subset of
it. The firmware image may consist of multiple images, if
the device contains more than one microcontroller. Often
it is also a compressed archive that contains code,
configuration data, and even the entire file system. The
image may consist of a differential update for performance
reasons.  <vspace blankLines='1'/>
The terms,
firmware image, firmware, and image, are used in this
document and are interchangeable. We use the term application firmware
image to differentiate it from a firmware image that 
contains the bootloader. An application firmware image, as the 
name indicates, contains the application program often including 
all the necessary code to run it (such as protocol stacks, and 
embedded operating system).</t>
  <t>Microcontroller (MCU for microcontroller unit): An MCU is a
compact integrated circuit designed for use in embedded systems.
A typical microcontroller includes a processor, memory (RAM and
flash), input/output (I/O) ports and other features connected via
some bus on a single chip. The term ’system on chip (SoC)’ is 
often used interchangeably with MCU, but MCU tends to imply more 
limited peripheral functions.</t>
  <t>System on Chip (SoC): An SoC is an integrated circuit that
contains all components of a computer, such as CPU, memory,
input/output ports, secondary storage, a bus to connect the 
components, and other hardware blocks of logic.</t>
  <t>Homogeneous Storage Architecture (HoSA): A device that stores
all firmware components in the same way, for example in a file
system or in flash memory.</t>
  <t>Heterogeneous Storage Architecture (HeSA): A device that
stores at least one firmware component differently from the rest,
for example a device with an external, updateable radio, or a
device with internal and external flash memory.</t>
  <t>Trusted Execution Environments (TEEs): An execution environment
that runs alongside of, but is isolated from, an REE. For more 
information about TEEs see <xref target="I-D.ietf-teep-architecture"/>.</t>
  <t>Rich Execution Environment (REE): An environment that is provided
and governed by a typical OS (e.g., Linux, Windows, Android, iOS),
potentially in conjunction with other supporting operating systems
and hypervisors; it is outside of the TEE.  This environment and
applications running on it are considered un-trusted.</t>
  <t>Trusted applications (TAs): An application component that runs in
a TEE.</t>
  <t>Trust Anchor: A trust anchor, as defined in <xref target="RFC6024"/>, represents 
an authoritative entity via a public key and associated data.  The 
public key is used to verify digital signatures, and the associated 
data is used to constrain the types of information for which the 
trust anchor is authoritative.”</t>
  <t>Trust Anchor Store: A trust anchor store, as defined in <xref target="RFC6024"/>, 
is a set of one or more trust anchors stored in a device.  A device 
may have more than one trust anchor store, each of which may be used 
by one or more applications. A trust anchor store must resist 
modification against unauthorized insertion, deletion, and modification.</t>
</list></t>

</section>
<section anchor="stakeholders" title="Stakeholders">

<t>The following stakeholders are used in this document:</t>

<t><list style="symbols">
  <t>Author: The author is the entity that creates the firmware image.
There may be multiple authors involved in producing firmware running 
on an IoT device. <xref target="device"/> talks about those IoT device deployment cases.</t>
  <t>Device Operator: The device operator is responsible for the day-to-day operation
of a fleet of IoT devices. Customers of IoT devices, as the owners of 
IoT devices - such as enterprise customers or end users, interact 
with their IoT devices indirectly through the device operator via 
web or smart phone apps.</t>
  <t>Network Operator: The network operator is responsible for the operation of a
network to which IoT devices connect.</t>
  <t>Trust Provisioning Authority (TPA): The TPA distributes
trust anchors and authorization policies to various stakeholders. 
The TPA may also delegate rights to stakeholders. For example,
in some cases, the Original Design Manufacturer (ODM), which is a
company that designs and manufactures a product, may act as a
TPA and may decide to remain in full control over the firmware
update process of their products.</t>
</list></t>

</section>
<section anchor="functions" title="Functions">

<t><list style="symbols">
  <t>(IoT) Device: A device refers to the entire IoT product, which
consists of one or many MCUs, sensors and/or actuators. Many IoT
devices sold today contain multiple MCUs and therefore a single
device may need to obtain more than one firmware image and
manifest to succesfully perform an update.</t>
  <t>Status Tracker: The status tracker has a client and a server component
and performs three tasks: 
1) It communicates the availability of a new firmware version. This 
   information will flow from the server to the client. <vspace />
2) It conveys information about software and hardware characteristics of 
   the device. The information flow is from the client to the server. <vspace />
3) It can remotely trigger the firmware update process. The 
   information flow is from the server to the client.  <vspace blankLines='1'/>
For example, a device operator may want to read the installed firmware
version number running on the device and information 
about available flash memory. Once an update has been triggered, the device 
operator may want to obtain information about the state of the firmware 
update. If errors occurred, the device operator may want to 
troubleshoot problems by first obtaining diagnostic information (typically 
using a device management protocol).  <vspace blankLines='1'/>
We make no 
assumptions about where the server-side component is deployed. The 
deployment of status trackers is flexible and may be found at<vspace />
cloud-based servers, on-premise servers, or may be embedded in edge 
computing device. A status tracker server component may even be 
deployed on an IoT device. For example, if the IoT device contains 
multiple MCUs, then the main MCU may act as a status tracker towards the 
other MCUs. Such deployment is useful when updates have to be 
synchronized across MCUs.</t>
  <t>Firmware Consumer: The firmware consumer is the recipient of the
firmware image and the manifest. It is responsible for parsing
and verifying the received manifest and for storing the obtained
firmware image. The firmware consumer plays the role of the
update component on the IoT device typically running in the
application firmware. It interacts with the firmware server and
with the status tracker client (locally).</t>
  <t>Firmware Server: The firmware server stores firmware images and 
manifests and distributes them to IoT devices. Some deployments 
may require a store-and-forward concept, which requires storing 
the firmware images/manifests on more than one entity before<vspace />
they reach the device. There is typically some interaction between the
firmware server and the status tracker and these two entities are often
physically separated on different devices for scalability reasons.</t>
  <t>Bootloader: A bootloader is a piece of software that is
executed once a microcontroller has been reset. It is
responsible for deciding what code to execute.</t>
</list></t>

</section>
</section>
<section anchor="architecture" title="Architecture">

<t>More devices today than ever before are connected to the Internet,
which drives the need for firmware updates to be provided over the
Internet rather than through traditional interfaces, such as USB or
RS-232. Updating updates over the Internet requires the device to fetch
the new firmware image as well as the manifest.</t>

<t>Hence, the following components are necessary on a device for a firmware 
update solution:</t>

<t><list style="symbols">
  <t>the Internet protocol stack for firmware downloads. Because firmware images are often multiple kilobytes, sometimes
exceeding one hundred kilobytes, in size for low end IoT devices and even
several megabytes large for IoT devices running full-fledged operating systems
like Linux, the protocol mechanism for retrieving these images needs
to offer features like congestion control, flow control, fragmentation
and reassembly, and mechanisms to resume interrupted or corrupted transfers.</t>
  <t>the capability to write the received firmware image to
persistent storage (most likely flash memory).</t>
  <t>a manifest parser with code to verify a digital
signature or a message authentication code.</t>
  <t>the ability to unpack, to decompress and/or to decrypt the 
received firmware image.</t>
  <t>(optionally) a status tracker.</t>
</list></t>

<t>The features listed above are most likely offered by code in the application firmware 
image running
on the device rather than by the bootloader itself. Note that 
cryptographic algorithms will likely run in a trusted execution 
environment, on a separate MCU, in a hardware security module, or in a secure element
rather than in the same context with the application code.</t>

<t><xref target="arch-figure"/> shows the architecture where a
firmware image is created by an author, and made available to a firmware
server. For security reasons, the author will not have the permissions to 
upload firmware images to the firmware server and to initiate an update him- or herself. 
Instead, authors will make firmware images available to the device operators. Note that 
there may be a longer supply chain involved to pass software updates from the author all 
the way to the party that can then finally make a decision to deploy it with IoT devices.</t>

<t>As a first step in the firmware update process, the the status tracker client need to be 
made aware of the availability of a new firmware update by the status tracker server. 
This can be accomplished via polling (client-initiated), push notifications (server-initiated),
or more complex mechanisms (such as a hybrid approach):</t>

<t><list style="symbols">
  <t>Client-initiated updates take the form of a status tracker client proactively 
checking (polling) for updates.</t>
  <t>With Server-initiated updates the server-side component of the status tracker 
learns about a new firmware version and determines what devices qualify for a 
firmware update. Once the relevant devices have been selected, the 
status tracker informs these devices and the firmware consumers obtain those 
images and manifests. Server-initiated updates are important because they allow a quick 
response time. Note that the client-side status tracker needs to be reachable by the server-side
component. This may require devices to keep reachability information on the 
server-side up-to-date and state at NATs and stateful packet filtering 
firewalls alive.</t>
  <t>Using a hybrid approach the server-side of the status tracker
pushes notifications of availability of an update to the client side and requests 
the firmware consumer to pull the manifest and the firmware image from the 
firmware server.</t>
</list></t>

<t>Once the device operator triggers update via the status tracker, it will keep 
track of the update process on the device. This allows the device operator to know what 
devices have received an update and which of them are still pending an update.</t>

<t>Firmware images can be conveyed to devices in a variety of ways,
including USB, UART, WiFi, BLE, low-power WAN technologies, mesh networks and many more. 
At the application layer 
a variety of protocols are also available: MQTT, CoAP, and HTTP are the 
most popular application layer protocols used by IoT devices. This architecture 
does not make assumptions about how the firmware images are distributed to the 
devices and therefore aims to support all these technologies.</t>

<t>In some cases it may be desireable to distribute firmware images using a multicast
or broadcast protocol. This architecture does not make recommendations for any 
such protocol. However, given that broadcast may be desirable for some networks,
updates must cause the least disruption possible both in metadata
and firmware transmission. For an update to be broadcast friendly, it cannot rely on link
layer, network layer, or transport layer security. A solution has
to rely on security protection applied to the manifest and firmware image
instead. In addition,
the same manifest must be deliverable to many devices, both those
to which it applies and those to which it does not, without a
chance that the wrong device will accept the update. Considerations
that apply to network broadcasts apply equally to the use of
third-party content distribution networks for payload distribution.</t>

<figure title="Architecture." anchor="arch-figure"><artwork><![CDATA[
                                                      +----------+
                                                      |          |
                                                      |  Author  |
                                                      |          |
                                                      +----------+
                       Firmware + Manifest                 |
              +----------------------------------+         | Firmware +
              |                                  |         | Manifest
              |                               ---+-------  |
              |                           ----   |       --|-
              |                         //+----------+     | \\
             -+--                      // |          |     |   \
        ----/ |  ----                |/   | Firmware |<-+  |    \
      //      |      \\              |    | Server   |  |  |     \
     /        |        \             /    |          |  +  +      \
    /         |         \           /     +----------+   \ /       |
   / +--------+--------+ \         /                      |        |
  /  |        v        |  \       /                       v        |
 |   | +------------+  |   |     |          +----------------+      |
 |   | |  Firmware  |  |                    |     Device     |      |
 |   | |  Consumer  |  |   |     |          |     Management |      |
|    | +------------+  |    |    |          |                |      |
|    | +------------+  |    |    |          |    +--------+  |      |
|    | |  Status    |<-+--------------------+->  |        |  |      |
|    | |  Tracker   |  |    |    |          |    | Status |  |      |
|    | |  Client    |  |    |    |          |    | Tracker|  |     |
 |   | +------------+  |   |     |          |    | Server |  |     |
 |   |    Device       |   |      |         |    +--------+  |     |
 |   +-----------------+   |       \        |                |    /
  \                       /         \       +----------------+   /
   \       Network       /           \                          /
    \     Operator      /             \     Device Operator    /
      \\             //                \ \                   //
        ----     ----                     ----           ----
            -----                             -----------
]]></artwork></figure>

<t>Firmware images and manifests may be conveyed as a bundle or detached. The 
manifest must support both approaches.</t>

<t>For distribution as a bundle, the firmware image is embedded into the manifest.
This is a useful approach for deployments where devices are not connected
to the Internet and cannot contact a dedicated firmware server for the firmware
download. It is also applicable when the firmware update happens via a
USB sticks or short range radio technologies (such as Bluetooth Smart).</t>

<t>Alternatively, the manifest is distributed detached from the firmware image. 
Using this approach, the firmware consumer is presented with the manifest first 
and then needs to obtain one or more firmware images as dictated in the 
manifest.</t>

<t>The pre-authorisation step involves verifying whether the entity
signing the manifest is indeed authorized to perform an update.
The firmware consumer must also determine whether it should fetch and
process a firmware image, which is referenced in a manifest.</t>

<t>A dependency resolution phase is needed when more than one
component can be updated or when a differential update is used.
The necessary dependencies must be available prior to installation.</t>

<t>The download step is the process of acquiring a local copy of the
firmware image.  When the download is client-initiated, this means
that the firmware consumer chooses when a download occurs and initiates
the download process.  When a download is server-initiated,
this means that the status tracker tells
the device when to download or that it initiates the transfer
directly to the firmware consumer. For example, a download from an
HTTP/1.1-based firmware server is client-initiated. Pushing a manifest
and firmware image to the Package resource of the LwM2M
Firmware Update object <xref target="LwM2M"/> is server-initiated update.</t>

<t>If the firmware consumer has downloaded a new firmware image and is ready to
install it, to initiate the installation, it may 
- either need to wait for a trigger from the status tracker, 
- or trigger the update automatically, 
- or go through a more complex decision making process to determine 
the appropriate timing for an update. Sometimes the final decision may 
require confirmation of the user of the device for safety reasons.</t>

<t>Installation is the act of processing the payload into a format that
the IoT device can recognise and the bootloader is responsible for
then booting from the newly installed firmware image.</t>

</section>
<section anchor="bootloader" title="The Bootloader">

<t><xref target="architecture"/> describes the steps for getting the firmware image and the manifest
from the author to the firmware consumer on the IoT device. Once the firmware consumer 
has retrieved and successfully processed the manifest and the firmware image it needs 
to hand control over to the bootloader.</t>

<t>In most cases this requires the MCU to restart. Once the
MCU has initiated a restart, the bootloader determines whether a newly available 
firmware image should be executed.</t>

<t>A power failure at any time during a firmware update must not cause a failure 
of the device. Equally, adverse network conditions during an update must not 
cause the failure of the device.</t>

<t>One way to achieve this functionality is to provide a minimum of two storage
locations for firmware. An alternative approach is to use a second stage
bootloader with built-in full featured firmware update functionality such
that it is possible to return to the update process after power down.</t>

<t>Assuming the first approach, there are (at least) three firmware images available
on the device:</t>

<t><list style="symbols">
  <t>First, the bootloader is also firmware. If a bootloader is updatable then its 
firmware image is treated like any other application firmware image.</t>
  <t>Second, the firmware image that has to be replaced is still available on the 
device as a backup in case the freshly downloaded firmware image does not 
boot correctly.</t>
  <t>Third, there is the newly downloaded firmware image.</t>
</list></t>

<t>Since many low end IoT devices use non-relocatable code, 
the bootloader needs to copy the newly downloaded application firmware image 
into the location of the old application firmware image and vice versa.</t>

<t>The boot process is security sensitive. An attacker will typically try to 
retrieve a firmware image from the device for reverse engineering or will try to get 
the bootloader to excute an attacker-modified firmware image. The
bootloader will therefore have to perform security checks on the
firmware image before it can be booted. These security checks by the
bootloader happen in addition to the security checks that took place
when the firmware image and the manifest were downloaded by the firmware consumer.</t>

<t>Throughout this document we assume that the bootloader itself is
distinct from the role of the firmware consumer and therefore does not
manage the firmware update process. This may give the impression
that the bootloader itself is a completely separate component,
which is mainly responsible for selecting a firmware image to boot.</t>

<t>The overlap between the firmware update process and the bootloader
functionality comes in two forms, namely</t>

<t><list style="symbols">
  <t>A bootloader must verify the firmware image it boots as
part of the secure boot process. Doing so requires meta-data to be
stored alongside the firmware image so that the bootloader can
cryptographically verify the firmware image before booting it to
ensure it has not been tampered with or replaced. This meta-data
used by the bootloader may well be the same manifest obtained with the
firmware image during the update process (with the severable
fields stripped off).</t>
  <t>An IoT device needs a recovery strategy in case the firmware
update / boot process fails. As mentioned earlier, the recovery 
strategy may include storing two or more application firmware images 
on the device or offering the ability to have a second stage bootloader 
perform the firmware update process again using firmware updates over 
serial, USB or even wireless connectivity like Bluetooth Smart.
In the latter case the firmware consumer functionality is contained in the
second stage bootloader and requires the necessary functionality for
executing the firmware update process, including manifest parsing.</t>
</list></t>

<t>In general, it is assumed that the bootloader itself, or a minimal part of it,
will not be updated since a failed update of the bootloader poses a 
reliability risk.</t>

<t>For a bootloader to offer a secure boot functionality it needs to 
implement the following functionality:</t>

<t><list style="symbols">
  <t>The bootloader needs to fetch the manifest (or manifest-alike headers)
stored in flash memory alongside the firmware image and parse their 
content for subsequent cryptographic verification.</t>
  <t>Cryptographic libraries with hash functions, digital signatures
(for asymmetric crypto), keyed message digests (for symmetric 
crypto) need to be accessible.</t>
  <t>The device needs to have a trust anchor store to verify the 
digital signature. (Alternatively, access to a key store for use 
with the keyed message digest.)</t>
  <t>Ability to expose boot process-related data to the application
firmware (such as to the status tracker).  This allows
to share information about the current firmware version, and the 
status of the firmware update process and whether errors have occurred.</t>
  <t>Produce boot measurements as part of an attestation solution. See 
<xref target="I-D.ietf-rats-architecture"/> for more information. (optional)</t>
  <t>Ability to decrypt firmware images, in case confidentiality protection 
was applied). This requires a solution for key management. (optional)</t>
</list></t>

</section>
<section anchor="device" title="Types of IoT Devices">

<t>There are billions of MCUs used in devices today produced by a large 
number of silicon manufacturers. While MCUs can vary significantly 
in their characteristics, there are a number of similiaries allowing 
us to categorize in groups.</t>

<t>The firmware update architecture, and the manifest format in particular, 
needs to offer enough flexibility to cover these common deployment cases.</t>

<section anchor="single-mcu" title="Single MCU">

<t>The simplest, and currently most common, architecture consists of
a single MCU along with its own peripherals.  These SoCs generally
contain some amount of flash memory for code and fixed data, as
well as RAM for working storage.  A notable characteristic of these 
SoCs is that the primary code is generally execute in place (XIP). 
Due to the non-relocatable nature of the code, the firmware image 
needs to be placed in a specific location in flash since the code 
cannot be executed from an arbitrary location in flash. Hence, then 
the firmware image is updated it is necessary to swap the old and 
the new image.</t>

</section>
<section anchor="single-cpu-with-secure-normal-mode-partitioning" title="Single CPU with Secure - Normal Mode Partitioning">

<t>Another configuration consists of a similar architecture to the
previous, with a single CPU.  However, this CPU supports a security
partitioning scheme that allows memory (in addition to other things)
to be divided into secure and normal mode.  There will generally be
two images, one for secure mode, and one for normal mode.  In this
configuration, firmware upgrades will generally be done by the CPU
in secure mode, which is able to write to both areas of the flash
device. In addition, there are requirements to be able to update
either image independently, as well as to update them together
atomically, as specified in the associated manifests.</t>

</section>
<section anchor="symmetric-multiple-cpus" title="Symmetric Multiple CPUs">

<t>In more complex SoCs with symmetric multi-processing support, advanced
operating systems, such as Linux, are often used. These SoCs frequently
use an external storage medium, such as raw NAND flash or eMMC. Due to
the higher quantity of resources, these devices are often capable of
storing multiple copies of their firmware images and selecting the most
appropriate one to boot. Many SoCs also support bootloaders that are
capable of updating the firmware image, however this is typically a last
resort because it requires the device to be held in the bootloader while
the new firmware is downloaded and installed, which results in down-time
for the device. Firmware updates in this class of device are typically
not done in-place.</t>

</section>
<section anchor="dual-cpu-shared-memory" title="Dual CPU, shared memory">

<t>This configuration has two or more heterogeneous CPUs in a single SoC that 
share memory (flash and RAM).  Generally, there will be a mechanism to prevent 
one CPU from unintentionally accessing memory currently allocated to the other.
Upgrades in this case will typically be done by one of the CPUs, and is 
similar to the single CPU with secure mode.</t>

</section>
<section anchor="dual-cpu-other-bus" title="Dual CPU, other bus">

<t>This configuration has two or more heterogeneous CPUs, each having their own memory.
There will be a communication channel between them, but it will be
used as a peripheral, not via shared memory.  In this case, each CPU
will have to be responsible for its own firmware upgrade.  It is
likely that one of the CPUs will be considered the primary CPU, and will
direct the other CPU to do the upgrade.  This configuration is
commonly used to offload specific work to other CPUs.  Firmware
dependencies are similar to the other solutions above, sometimes
allowing only one image to be upgraded, other times requiring several
to be upgraded atomically.  Because the updates are happening on
multiple CPUs, upgrading the two images atomically is challenging.</t>

</section>
</section>
<section anchor="manifests" title="Manifests">

<t>In order for a firmware consumer to apply an update, it has to make several decisions
using manifest-provided information and data available on the device itself. For more 
detailed information and a longer list of information elements in the manifest consult the 
information model specification <xref target="I-D.ietf-suit-information-model"/>, which offers justifications 
for each element, and the manifest, see <xref target="I-D.ietf-suit-manifest"/>}, for details about how this 
information is included in the manifest.</t>

<t><xref target="manifest-info"/> provides examples of decisions to be made.</t>

<texttable title="Firmware Update Decisions." anchor="manifest-info">
      <ttcol align='right'>Decision</ttcol>
      <ttcol align='left'>Information Elements</ttcol>
      <c>Should I trust the author of the firmware?</c>
      <c>Trust anchors and authorization policies on the device</c>
      <c>Has the firmware been corrupted?</c>
      <c>Digital signature and MAC covering the firmware image</c>
      <c>Does the firmware update apply to this device?</c>
      <c>Conditions with Vendor ID, Class ID and Device ID</c>
      <c>Is the update older than the active firmware?</c>
      <c>Sequence number in the manifest (1)</c>
      <c>When should the device apply the update?</c>
      <c>Wait directive</c>
      <c>How should the device apply the update?</c>
      <c>Manifest commands</c>
      <c>What kind of firmware binary is it?</c>
      <c>Unpack algorithms to interpret a format.</c>
      <c>Where should the update be obtained?</c>
      <c>Dependencies on other manifests and firmware image URI in Manifest</c>
      <c>Where should the firmware be stored?</c>
      <c>Storage Location and Component Identifier</c>
</texttable>

<t>(1): A device presented with an old, but valid manifest and firmware
must not be tricked into installing such firmware since a
vulnerability in the old firmware image may allow an attacker to
gain control of the device.</t>

<t>Keeping the code size and complexity of a manifest parsers small is important 
for constrained IoT devices. Since the manifest parsing code may 
also be used by the bootloader it is part of the trusted computing base.</t>

<t>A manifest may not only be used to protect firmware images but also personalization data
related to firmware or software. Trusted Execution Environments (TEEs), for example,
benefit from a protocol for managing the lifecycle of trusted
applications (TAs) running inside a TEE. TEEs may obtain TAs
from different authors and those TAs may require personalization data,
such as payment information, to be securely conveyed to the TEE.</t>

</section>
<section anchor="securing" title="Securing Firmware Updates">

<t>Using firmware updates to fix vulnerabilities in devices is important but securing this
update mechanism is equally important since security problems are
exacerbated by the update mechanism: update is essentially authorized
remote code execution, so any security problems in the update process
expose that remote code execution system. Failure 
to secure the firmware update process will help attackers to take control over devices.</t>

<t>End-to-end security mechanisms are used to protect the firmware
image and the manifest. The following assumptions are made to allow 
the firmware consumer to verify the received firmware image and 
manifest before updating software:</t>

<t><list style="symbols">
  <t>Authentication ensures that the device can cryptographically identify
the author(s) creating firmware images and manifests. Authenticated
identities may be used as input to the authorization process. Not all 
entities creating and signing manifests have the same
permissions. A device needs to determine whether the requested action
is indeed covered by the permission of the party that signed the manifest.
Informing the device about the permissions of the different parties
also happens in an out-of-band fashion and is also a duty of the
Trust Provisioning Authority.</t>
  <t>Integrity protection ensures that no third party can modify the manifest
or the firmware image. To accept an update, a device needs to verify the signature covering
the manifest. There may be one or multiple manifests that need to be
validated, potentially signed by different parties. The device needs
to be in possession of the trust anchors to verify those signatures.
Installing trust anchors to devices via the Trust Provisioning Authority
happens in an out-of-band fashion prior to the firmware update process.</t>
  <t>For confidentiality protection of the firmware image, it must be done in such a
way that the intended firmware consumer(s) can decrypt it. The information
that is encrypted individually for each device must maintain
friendliness to Content Distribution Networks, bulk storage, and
broadcast protocols. For confidentiality protection of firmware images the author needs
to be in possession of the certificate/public key or a pre-shared key
of a device. The use of confidentiality protection of firmware images
is optional.</t>
</list></t>

<t>A manifest specification must support different cryptographic algorithms
and algorithm extensibility. Due of the nature of
unchangeable code in ROM for bootloaders the use of
post-quantum secure signature mechanisms, such as hash-based
signatures <xref target="RFC8778"/>, are attractive. These
algorithms maintain security in presence of quantum computers.</t>

<t>When a device obtains a monolithic firmware image from a single author
without any additional approval steps then the authorization flow is
relatively simple. There are, however, other cases where more complex
policy decisions need to be made before updating a device.</t>

<t>In this architecture the authorization policy is separated from
the underlying communication architecture. This is accomplished
by separating the entities from their permissions. For example,
an author may not have the authority to install a firmware image
on a device in critical infrastructure without the authorization
of a device operator. In this case, the device may be programmed
to reject firmware updates unless they are signed both by the
firmware author and by the device operator.</t>

<t>Alternatively, a device may trust precisely one entity, which
does all permission management and coordination. This entity
allows the device to offload complex permissions
calculations for the device.</t>

</section>
<section anchor="example" title="Example">

<t><xref target="firmware-update"/> illustrates an example message flow
for distributing a firmware image to a device. The firmware
and manifest are stored on the same firmware server and 
distributed in a detached manner.</t>

<figure title="First Example Flow for a Firmware Upate." anchor="firmware-update"><artwork><![CDATA[
+--------+    +-----------------+    +-----------------------------+
|        |    | Firmware Server |    |         IoT Device          |
| Author |    | Status Tracker  |    | +------------+ +----------+ |
+--------+    | Server          |    | |  Firmware  | |Bootloader| |
  |           +-----------------+    | |  Consumer  | |          | |
  |                   |              | +------------+ +----------+ |
  |                   |              |      |                |     |
  |                   |              |  +-----------------------+  |
  | Create Firmware   |              |  | Status Tracker Client |  |
  |--------------+    |              |  +-----------------------+  |
  |              |    |               `''''''''''''''''''''''''''''
  |<-------------+    |                     |        |       |
  |                   |                     |        |       |
  | Upload Firmware   |                     |        |       |
  |------------------>|                     |        |       |
  |                   |                     |        |       |
  | Create Manifest   |                     |        |       |
  |---------------+   |                     |        |       |
  |               |   |                     |        |       |
  |<--------------+   |                     |        |       |
  |                   |                     |        |       |
  | Sign Manifest     |                     |        |       |
  |-------------+     |                     |        |       |
  |             |     |                     |        |       |
  |<------------+     |                     |        |       |
  |                   |                     |        |       |
  | Upload Manifest   |                     |        |       |
  |------------------>|  Notification of    |        |       |
  |                   |  new firmware image |        |       |
  |                   |----------------------------->|       |
  |                   |                     |        |       |
  |                   |                     |Initiate|       |
  |                   |                     | Update |       |
  |                   |                     |<-------|       |
  |                   |                     |        |       |
  |                   |   Query Manifest    |        |       |
  |                   |<--------------------|        .       |
  |                   |                     |        .       |
  |                   |   Send Manifest     |        .       |
  |                   |-------------------->|        .       |
  |                   |                     | Validate       |
  |                   |                     | Manifest       |
  |                   |                     |--------+       |
  |                   |                     |        |       |
  |                   |                     |<-------+       |
  |                   |                     |        .       |
  |                   |  Request Firmware   |        .       |
  |                   |<--------------------|        .       |
  |                   |                     |        .       |
  |                   | Send Firmware       |        .       |
  |                   |-------------------->|        .       |
  |                   |                     | Verify .       |
  |                   |                     | Firmware       |
  |                   |                     |--------+       |
  |                   |                     |        |       |
  |                   |                     |<-------+       |
  |                   |                     |        .       |
  |                   |                     | Store  .       |
  |                   |                     | Firmware       |
  |                   |                     |--------+       |
  |                   |                     |        |       |
  |                   |                     |<-------+       |
  |                   |                     |        .       |
  |                   |                     |        .       |
  |                   |                     |        .       |
  |                   |                     |        |       |
  |                   |                     | Update |       |
  |                   |                     |Complete|       |
  |                   |                     |------->|       |
  |                   |                              |       |
  |                   |  Firmware Update Completed   |       |
  |                   |<-----------------------------|       |
  |                   |                              |       |
  |                   |  Reboot                      |       |
  |                   |----------------------------->|       |
  |                   |                     |        |       |
  |                   |                     |        |       |
                      |                     |        |Reboot |
  |                   |                     |        |------>|
  |                   |                     |        |       |
  |                   |                     |        .       |
  |                   |                 +---+----------------+--+
  |                   |                S|   |                |  |
  |                   |                E|   | Verify         |  |
  |                   |                C|   | Firmware       |  |
  |                   |                U|   | +--------------|  |
  |                   |                R|   | |              |  |
  |                   |                E|   | +------------->|  |
  |                   |                 |   |                |  |
  |                   |                B|   | Activate new   |  |
  |                   |                O|   | Firmware       |  |
  |                   |                O|   | +--------------|  |
  |                   |                T|   | |              |  |
  |                   |                 |   | +------------->|  |
  |                   |                P|   |                |  |
  |                   |                R|   | Boot new       |  |
  |                   |                O|   | Firmware       |  |
  |                   |                C|   | +--------------|  |
  |                   |                E|   | |              |  |
  |                   |                S|   | +------------->|  |
  |                   |                S|   |                |  |
  |                   |                 +---+----------------+--+
  |                   |                     |        .       |
  |                   |                     |        |       |
  |                   |                     .        |       |
  |                   |  Device running new firmware |       |
  |                   |<-----------------------------|       |
  |                   |                     .        |       |
  |                   |                              |       |
]]></artwork></figure>

<t><xref target="firmware-update2"/> shows an exchange that starts with the 
status tracker querying the device for its current firmware version. 
Later, a new firmware version becomes available and since this 
device is running an older version the status tracker server interacts
with the device to initiate an update.</t>

<t>The manifest and the firmware are stored on different servers in this 
example. When the device processes the manifest it learns where to 
download the new firmware version. The firmware consumer downloads 
the firmware image with the newer version X.Y.Z after successful validation
of the manifest. Subsequently, a reboot is initiated and the secure
boot process starts. Finally, the device reports the successful boot 
of the new firmware version.</t>

<figure title="Second Example Flow for a Firmware Upate." anchor="firmware-update2"><artwork><![CDATA[
 +---------+   +-----------------+    +-----------------------------+
 | Status  |   | Firmware Server |    | +------------+ +----------+ |
 | Tracker |   | Status Tracker  |    | |  Firmware  | |Bootloader| |
 | Server  |   | Server          |    | |  Consumer  | |          | |
 +---------+   +-----------------+    | |  +Status   | +----------+ |
      |                |              | |  Tracker   |        |     |
      |                |              | |  Client    |        |     |
      |                |              | +------------+        |     |
      |                |              |      |  IoT Device    |     |
      |                |               `''''''''''''''''''''''''''''
      |                |                     |                |
      |        Query Firmware Version        |                |
      |------------------------------------->|                |
      |        Firmware Version A.B.C        |                |
      |<-------------------------------------|                |
      |                |                     |                |
      |         <<some time later>>          |                |
      |                |                     |                |
    _,...._         _,...._                  |                |
  ,'       `.     ,'       `.                |                |
 |   New     |   |   New     |               |                |
 \ Manifest  /   \ Firmware  /               |                |
  `.._   _,,'     `.._   _,,'                |                |
      `''             `''                    |                |
      |            Push manifest             |                |
      |----------------+-------------------->|                |
      |                |                     |                |
      |                '                     |                '
      |                |                     | Validate       |
      |                |                     | Manifest       |
      |                |                     |---------+      |
      |                |                     |         |      |
      |                |                     |<--------+      |
      |                | Request firmware    |                |
      |                | X.Y.Z               |                |
      |                |<--------------------|                |
      |                |                     |                |
      |                | Firmware X.Y.Z      |                |
      |                |-------------------->|                |
      |                |                     |                |
      |                |                     | Verify         |
      |                |                     | Firmware       |
      |                |                     |--------------+ |
      |                |                     |              | |
      |                |                     |<-------------+ |
      |                |                     |                |
      |                |                     | Store          |
      |                |                     | Firmware       |
      |                |                     |-------------+  |
      |                |                     |             |  |
      |                |                     |<------------+  |
      |                |                     |                |
      |                |                     |                |
      |                |                     | Trigger Reboot |
      |                |                     |--------------->|
      |                |                     |                |
      |                |                     |                |
      |                |                     | __..-------..._'
      |                |                    ,-'               `-.
      |                |                   |      Secure Boot    |
      |                |                   `-.                 _/
      |                |                     |`--..._____,,.,-'
      |                |                     |                |
      | Device running firmware X.Y.Z        |                |
      |<-------------------------------------|                |
      |                |                     |                |
      |                |                     |                |
]]></artwork></figure>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document describes terminology, requirements and an architecture for 
firmware updates of IoT devices. The content of the document is thereby 
focused on improving security of IoT devices via firmware update mechanisms
and informs the standardization of a manifest format.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their feedback:</t>

<t><list style="symbols">
  <t>Geraint Luff</t>
  <t>Amyas Phillips</t>
  <t>Dan Ros</t>
  <t>Thomas Eichinger</t>
  <t>Michael Richardson</t>
  <t>Emmanuel Baccelli</t>
  <t>Ned Smith</t>
  <t>Jim Schaad</t>
  <t>Carsten Bormann</t>
  <t>Cullen Jennings</t>
  <t>Olaf Bergmann</t>
  <t>Suhas Nandakumar</t>
  <t>Phillip Hallam-Baker</t>
  <t>Marti Bolivar</t>
  <t>Andrzej Puzdrowski</t>
  <t>Markus Gueller</t>
  <t>Henk Birkholz</t>
  <t>Jintao Zhu</t>
  <t>Takeshi Takahashi</t>
  <t>Jacob Beningo</t>
  <t>Kathleen Moriarty</t>
  <t>Bob Briscoe</t>
</list></t>

<t>We would also like to thank the WG chairs, Russ Housley, David Waltermire,
Dave Thaler for their support and their reviews.</t>

</section>


  </middle>

  <back>


    <references title='Informative References'>





<reference  anchor="RFC8240" target='https://www.rfc-editor.org/info/rfc8240'>
<front>
<title>Report from the Internet of Things Software Update (IoTSU) Workshop 2016</title>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<date year='2017' month='September' />
<abstract><t>This document provides a summary of the Internet of Things Software Update (IoTSU) Workshop that took place at Trinity College Dublin, Ireland on the 13th and 14th of June, 2016.  The main goal of the workshop was to foster a discussion on requirements, challenges, and solutions for bringing software and firmware updates to IoT devices. This report summarizes the discussions and lists recommendations to the standards community.</t><t>Note that this document is a report on the proceedings of the workshop.  The views and positions documented in this report are those of the workshop participants and do not necessarily reflect IAB views and positions.</t></abstract>
</front>
<seriesInfo name='RFC' value='8240'/>
<seriesInfo name='DOI' value='10.17487/RFC8240'/>
</reference>



<reference  anchor="RFC6024" target='https://www.rfc-editor.org/info/rfc6024'>
<front>
<title>Trust Anchor Management Requirements</title>
<author initials='R.' surname='Reddy' fullname='R. Reddy'><organization /></author>
<author initials='C.' surname='Wallace' fullname='C. Wallace'><organization /></author>
<date year='2010' month='October' />
<abstract><t>A trust anchor represents an authoritative entity via a public key and associated data.  The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative.  A relying party uses trust anchors to determine if a digitally signed object is valid by verifying a digital signature using the trust anchor's public key, and by enforcing the constraints expressed in the associated data for the trust anchor.  This document describes some of the problems associated with the lack of a standard trust anchor management mechanism and defines requirements for data formats and push-based protocols designed to address these problems.  This  document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract>
</front>
<seriesInfo name='RFC' value='6024'/>
<seriesInfo name='DOI' value='10.17487/RFC6024'/>
</reference>



<reference  anchor="RFC7228" target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='M.' surname='Ersue' fullname='M. Ersue'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2014' month='May' />
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference  anchor="RFC8778" target='https://www.rfc-editor.org/info/rfc8778'>
<front>
<title>Use of the HSS/LMS Hash-Based Signature Algorithm with CBOR Object Signing and Encryption (COSE)</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='2020' month='April' />
<abstract><t>This document specifies the conventions for using the Hierarchical Signature System (HSS) / Leighton-Micali Signature (LMS) hash-based signature algorithm with the CBOR Object Signing and Encryption (COSE) syntax. The HSS/LMS algorithm is one form of hash-based digital signature; it is described in RFC 8554.</t></abstract>
</front>
<seriesInfo name='RFC' value='8778'/>
<seriesInfo name='DOI' value='10.17487/RFC8778'/>
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>An Information Model for Firmware Updates in IoT Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='June' day='2' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality.  One component of such a firmware update is a concise and machine- processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-07' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-07.txt' />
</reference>



<reference anchor="I-D.ietf-teep-architecture">
<front>
<title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>

<author initials='M' surname='Pei' fullname='Mingliang Pei'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<author initials='D' surname='Wheeler' fullname='David Wheeler'>
    <organization />
</author>

<date month='July' day='13' year='2020' />

<abstract><t>A Trusted Execution Environment (TEE) is an environment that enforces that any code within that environment cannot be tampered with, and that any data used by such code cannot be read or tampered with by any code outside that environment.  This architecture document motivates the design and standardization of a protocol for managing the lifecycle of trusted applications running inside such a TEE.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-12' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-teep-architecture-12.txt' />
</reference>



<reference anchor="I-D.ietf-suit-manifest">
<front>
<title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<author initials='K' surname='Zandberg' fullname='Koen Zandberg'>
    <organization />
</author>

<date month='July' day='13' year='2020' />

<abstract><t>This specification describes the format of a manifest.  A manifest is a bundle of metadata about the firmware for an IoT device, where to find the firmware, the devices to which it applies, and cryptographic information protecting the manifest.  Firmware updates and secure boot both tend to use sequences of common operations, so the manifest encodes those sequences of operations, rather than declaring the metadata.  The manifest also serves as a building block for secure boot.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-09' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-manifest-09.txt' />
</reference>



<reference anchor="I-D.ietf-rats-architecture">
<front>
<title>Remote Attestation Procedures Architecture</title>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<author initials='M' surname='Richardson' fullname='Michael Richardson'>
    <organization />
</author>

<author initials='N' surname='Smith' fullname='Ned Smith'>
    <organization />
</author>

<author initials='W' surname='Pan' fullname='Wei Pan'>
    <organization />
</author>

<date month='September' day='1' year='2020' />

<abstract><t>In network protocol exchanges, it is often the case that one entity (a Relying Party) requires evidence about a remote peer to assess the peer's trustworthiness, and a way to appraise such evidence.  The evidence is typically a set of claims about its software and hardware platform.  This document describes an architecture for such remote attestation procedures (RATS).</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-rats-architecture-06' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-rats-architecture-06.txt' />
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC8392" target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='E.' surname='Wahlstroem' fullname='E. Wahlstroem'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2018' month='May' />
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>


<reference anchor="LwM2M" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf">
  <front>
    <title>Lightweight Machine to Machine Technical Specification, Version 1.0.2</title>
    <author initials="." surname="OMA" fullname="Open Mobile Alliance">
      <organization></organization>
    </author>
    <date year="2018" month="February" day="09"/>
  </front>
  <format type="PDF" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf"/>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIADPahl8AA+19e3Pb2JXn//gUqPiPyGOS6nZmJom3NzOy7E47036MJadn
p7qqA5KgiAgEGACUmrG8tV9jv95+kj2/87gPAJQlu5PerRpV0iYJ3Ne55573
OXc6nSZd0ZX5k/Qk/bpoNtdZk6fvtsusy9OTZrEuunzR7ei3Vd2kL6oub6q8
S+tVer4uqos2yebzJr+6W+v6PFnWiyrb0GjLJlt10yLvVtN2V3TTLHh7+uWv
kgV1cVE3+ydpUa3qJCm2zZO0a3Zt9/iLL377xeOERsqepGf5YtcU3T65rpvL
i6bebem3dy/Ok8t8Tz8tn7g5T59hxCRpu6xa/pCVdUWz2Odtsi2eJGnarBb5
su32pf6apl29CD4W1TKvOvuhrZuuyVet+77fRF+7pli4lxf1ZkNt3dOiKovK
D5P/2E3Lou2m1Mm8Lum1af0Pj+gJwWqTbbcEZnk323XruqHJTukh/xUVvf10
lr6sm6yyHwW+T5u8WmZV/KhuLrKq+GvWFXVFW9Zs0m+LDUF9aS/km6woXeMZ
N/7XrNnMaA1Jf+BvZul5u1jXq7wqLuLRv8mqKm9HHt91BmvuYNa5Dg7O4tmM
pltf95b/LLsqlvGDeOhviypr6t6oS7SazdHqX0t+YUatBkO+JIjnTZEt4jFf
FmVN8+09i4c9rat2VxIKdr2hN9L4XzfcWFYKzG821PIqB4q+/fr0N4//8Qv9
+M9fPP5H/fjrx49/Yy/8+tf88cX02cwfLtdRXU039TIvo1e6PN9G52/YwYaW
sMrbLnrSZF07aBfMATP7py9/a7/+6reP8fHb65ePXz7h1XdZc5HTMVl33fbJ
8fH19fWs3ubVpp4XZZ6VZZFVixw7cNzk9EObH39bXKy76xz/pV6O//jlD1/8
8Hj6+Isvf/PF4y9+Oz05fv3yZHp+No3fmw7em22XK5mC0L5fBA3Slxktqcrp
1LuP5/liXRWLrEzPtvmiWNFHAHOS/jFvWvqQfjn7Yvb4F9ylO6YeYWhWSYgp
r2mVdDKxzPRE18kvgHA+STHP6RePp1/8ln+UvbMO3zz7+meDWDKdTtNsTuQt
WxAp/eOurPImo7GLrqDjfl106xEekR4R5X+YLvOrYkFvrbOrPG2yoqVD363z
tMrzJfOHLKVJF9mcgEIkOm1B2olzGFvZCVvZ0FYQNrabNAFq8utobd3zJJq8
rXfNIifaW2G2BZHfGU1tUTdbomkdTSttd3RWpdPEd0qbvip+TK/ipU3wu06A
ulwVF7uGMYBm2XXCCGnovCxT+jdbLjFAlV+nq121wHsZ9bNPi5ZmJuxgSYue
72WR4F/5j9u8oUkmyYuKO+DeaVSAaJmvikp+IagSfDdFVZf1xZ4BRVQ+PIUE
VBqHmMcOXCfd1EQ/aN4t98TcL2uWSpDQXZba6VZMw1Iy4rVZ1RKwiDVfVHXb
FQsCPf2kwG4XTTHHKjGDbVNjcHy17UoEWlgQkGZTLJdlniQPUiBIUy93DJYk
+Tre3jZd0HLWebm1nTAI9bdElk4DYYuLZd4QQKnJHMiTFhvMnKhsOt8VJe/G
vKwXl3QctUP6hbDSsGaWPNvxgW+KFo+ozwVhMQ0yr3cdDrEgY9CEwWnInkTC
ztOaIExYf/L0oZF/mlyW/vI7ElLadb1NCfIjspSck7N61YVy1NGL1+dn7x7+
cpJerwtC2a6uL9NtmRF2Z1163gAz9sRYyjK/yGkdc+Jck/QFnSVACEhEE/3y
V3Qq8P3Lf6QPNOQfdlU+AaX5Z0ay7JJ6S0t0TQiAFvPi4iJv0m3Ba5qRgNfk
AKqChJHs2taDTZvjHO6wKV3y/r0yqw8fSEig3tybJCwSoWJwVLvNnEagydDh
o9lXF7lh11VeEl1r6FRRf6XsLCbl2BifA2zA8/Ov06QHsvaAsJoeQTR8yJPB
LrO8SAj6TMZjoqD7/DEiRouv6g6oRlR2nyZd1l4K1dptASU+GQPa1dbljmff
5H/ZFUSk0vayKMvVrkxo9cRoaMmz9DXhnhsIrZf5tqz3+XLS77AFHhARSOgw
dsyetlkDdAVsiiYt6Vgv9guikHTEs4scBGHC7xSLXZk15Z5wilhRRJqzhGTj
C27bFRtCEpDmYBbovsmJrOR4QlLSgpq2BZNtkslbdNnwiLusJBmGIHlF42LZ
BLUFkRLQizVRDwg26KOm2TbXxBDSZbFaYWrdLB0QhjRRJSKCDejmohMMwb6C
/dbAEYJGuZ+kxYxwFzwBSLtr84ZmdFWXVwwLwmp72w3TrelULWveXt2mdL3b
gKgES4H6kZKOgWGztKXBmBG5DcZUiXoxShly9gjYbIT44TMGrivammUtQgj1
k8x3F8SE5nzwaFSct6xsa3CKIZ+ZMCaSHmWsKk+EiwBsDlC0jWiZV1dFU1es
oWAzmIYyImAzaCerjuZS0IoxJG3wcu9RgQaA/kJLwSHvozttM1CD0KpFtzmJ
vvQQACamkEYtig2hJ/AD0hNADP1vyesA2C+YAyibyZczkoVOui7fbDvueVVm
7ZoZWVksinrX0oxJziU5DaJFPAawudLPq4bE7BTfd9VlRVL/hD6wkkntVILY
0DfQti0oV4XBiToQ2mWbbcnoEjJb6oxwjFZButwmhxaYLpr9tqsvmmy73lM/
i4xeSIsOa8WmULcEZDAvUvWamuRNiAXUD2HcXrEdwOb9EVqKDoguhUPkUE4L
wggGIRBD6RD1ywtcGommxix4XOXN3ktH9FvIDdMD+6N9MFrpiNG+EMxke2lI
2575ngWUJQ3YZg0fGMhA9FXWX0I4IxwihlPh+YLVVRqF1MLigrEAW9alkGdJ
nMmW9KhuIlrxet5RLzhsXTRpQuhVR/QNB6mGwK+PqR/a4i3jzoZ4FhNymnFG
EgLx/wVv0AVRJ9kjN3nq4Sord3zUSSaAsNwCP2sBqzvpZTFvsoblxkhahGlA
5UXek4ucCAJtYHR6Z+lzQrQUFOtizfyyaaEdGIewZXp4sdBDYuESqO9OHRS9
prIO0l4Pq4Y0EebKQvUZrozMwspIFujA24q8ATp8t4auMiZBMi3BCZ/neZWK
pikoxuLHlngIRH2liJFwyJi8yHBgCJ9P6RC36ZeOuh8RY6kblt2cGMwEbIEX
Ey8TYwugYabQg1MWPfDpwwfHridoLghB1BX8HASNtzaU25j0E1dm6w31Sv/H
DGl0psf0fpsfPDPJS0JKoPVEwBj1rOJCKbYORjsw5Ig9KA+YJKDyjsBja7fb
sui1EnCUBR9jCPENsdMG+ECdZBNWbiDHx8pKYAfg3SEGRof9XVUWJP6tCZ3p
UJJq4sGGB0mZEQHbCsaS4H9JX9I3p/Q0IFGyZco2GaHAa4VlrkhUFUlOiRLj
wq4CiWA9yLhfYRtFz0nuICQWGsPvy4rpzFUJKy1b6KAs8xjTnbF1ZWRvlApg
L7PEwTs8DWwUUcEl8/KnKGykBVUi32AeRGxZf+QFkS63JXYOYa8s/VY2u4qp
kQrfirdMKDIQmIuSlrepSYcjwaRYJDGZhQQ4shuCBwtVO20owEyHYTEqTUiR
JUlRlrwknlbWGYDc5iT3EZhLOZhgZmnNdBOHkxhhIHZ71k+SrTt79lBF77K+
puFK/O6mIwxqmVO3pUjh6/qaDxCPRL2t6zaPVkICLHXj1sNUrRDCC8F0SxAg
EpVnVwXNXFdKTKMDJk/ShKgd8dbNBuAmhediBz4lPJhWyQSLPszrH+WzBxux
cJL1O5ZnYwrHOsXtZG5FDB9ETeeT9DToCWT/XclyEx0AgC0WD2HzaIWNEdGp
gBVuPLBs64/EYIKhChsTZrT1olbQsoYO4SHUuwWF2pTR07ppexSUTS6qLF/R
VonNxRswlM53xE1g6rkEWvV41DkTw1i7VlbCEDJ8EWGDthSsKbSF0hRJWVQp
gDRB0lfLjElZFZzdQHEJzjmQjO2IDiLM64nLJ+NN7bVZSmoEZNWGlZUJ0DNn
mt3iHyImosIwJzhiRQlqxMN0hfNNKgQsDQKeBS0u1EIZ4HIEbS/7CwZhD0Af
GC4IRm4DxX5Ixzo0KemSMAappYyMjFVdDY3xG10PgWhjk6LDQe1ARkrIKTTI
UswezPfYpuC08icElPQfSK6lmZdlhE6ONgNJm3oOaXhF0rYQIQEUdQjjpDL1
ZZ0Lt6MtzS5DtIuNYQq7QP9AJyJPy/uyQh4ce87EWPXmLR8qknnazoxQNUgW
L5C6URFzD1cMPElsngRFGSrl1O2ONBPWYunQzgQWL7PLUTj488IQgYZMx9wg
YluqLBozAYso8x+DFS/zRcFG442MYQIbc0UMgx+NBaOLLYnXwgih0+WElGaA
NoCwdjARskx8TUw8GfNbmt1izbQ3FU1HVi0UiBDxApvYsKw5Z8YL2Zd2brFW
6RcsiKgd6ck4J9KLUFZnuWVej7XjrFGfhSBS6m2ABNHnUP9ks1LIvRf7NIcE
X6CRcHaZ9RyCQbOfbsFgepzcFKiMJ9Lbnb5pA0aRgU7AiozpjBPWl5i9sNIl
wq8Yo2VIRYdT5foptIOqY9XAW539WUxFFxhBM29iZvDVPNwy3xgwRc11xi3a
BGbKAT0jjr3k4w4KFmqdBOymU8t3FpmHV3UJNs0ERgWoRVNsQwtaKKdS19/l
wnnzH1kzE02jrjuWIhqeO1g6FFidsNncIzD3F009n+3mLWEr2xMmRNjkwNKE
1dUbmKTDHcccaEUmdhQkUhBp5UGSRbb19mB4PK5g8g01DYeC6SvSMXlYwsxL
Z8TMvfGbKMVOpPXEVqmbWTBSj/sjqOfvmJQvyh2xBt0DUVBZDCLgK//Gxj1I
IaSqEUlklPNgv94/CHbvA73+gB+3gy1nCUcsothhRnO8+CRJQLvUW8eM0i0Q
xhraUpI7aGJT6AkBGJxqlpoQGrUt2kDLzy7QTacmloXTJ6gtvXRFBLCNVQ03
ivC2GSbpbF8vMNyTEXMDWx71Ex9T0XhZjc9gCdjbkrhvIbRdIOQxNbET2jA9
JBTsxBRQdLMxE4f22hYtG383u7IrtqWJVTQRMyOYMuqA6oQ5yCGbYkFUvYar
oyyhQr+GPM7DOhNNxlNuoOYs5RheqQ7qOl2QXjLhEIJQjRMVz0nxQqS7gpET
Uua+7fINr852s7+szEv4YCt6WnFwiJDxxolHEsIQtZqBWNH/AC9GM8ypv1n2
XWamP/JBacVoDNYuYQ2Cw+rAERkZdOIiB2PlA8V6t44WqQt9PMXJDNbS5Y5y
ZgOiD9AKMAW6MW2bpSfV6FBuLdIiES8uTXvJVkox8vgewy5UO1FtrGAioSIK
+KMwUTB/tuTUS/FB7Sos4ogdlFnrZdwWBqpW4AtzzmaeL6HaCfdhYwJv/UNQ
GiIDMQ6mRy9P3/Ee95CTxJ+ie/gEy8cbQE+JWtmShu3JPEkBRbPYFcasPe/H
5rrJyBRaNtGm3X7LKnp/RIEExCmTfmqSLTY5HaJ9evT25KWSE2bSD+nUVdtd
d0xUhP5Jj14cv36YwpAgBFSE7hUx6B1EQxqmEjp1VWQcq7OBogL9wGnfJBIV
25nD5/T//K//LfPGS3iWHp3Vpw/pZ4CDOnEWhGUPXfdC8glwYp4HBDvWWSEH
bbZsiW4Ya8z6Q7tVbNesbZhE3DJJPHNTOHVT4G2hD7wt1dhuqMHV4SAQC5tH
ZIhN+islNKTrNmIYAlKdvnlnAJ9wTFIAYAYtVCLqc5mxEF03cgQYkLQyBbId
CD/eJNgSx6hVO6SpEF8rFrzYb+pNDfsn9MIz6T8OGTv6pj47wfqd4wLnF1Ph
uCks053QYL3KDVoc0euMJI2V16BFZgeR5JgtgTawUT0IAg+ZXg7F/SMTzIcT
5OgvTNGbrMEPhjON3CtMsDBtWB+ZuAaTdjxMhAvIZvBOZuVECTerI022LGpx
1oHIBi0YYSvotuAY2na44nP1ezxnuwio1/PQNXR0/vx5K+iYuzdi5U3spzvG
wbq6YF25Xsm5KGDeq0vGXKwWeJK+ff5cLBx2RIZSA0YlTMzT9+8PByx9+MAr
eAv3+Oj0iaY8f66TD37lCYtoA6llqa6SC6iOlRqxHQ17fZYe5bOL2QSxY7sf
J+l3xAHqa8L4k2rZ1MWSyNTrs4fYPaewsQUIh+XPetBlR9RM4F3FfQre6kzW
e3pwRYBr2v+mooMZIVR8PwcIRTkOVybkM2BFbWiUpJ4EF50BYldN1e8V4ULU
wdH5iSJAyOI8QvvtLyDpZDw31xu1WyAuClyBv2f8fSLWjRWbIQlWbL5HbNuH
DxNEHNCBYPQTN53Ij0XHMXEs9CAwpMjARxD4sGCfLAsWxFIWBaMbxKWZCC/Y
G/9e0QpFJ3pGG16s9nQmL6hz4rTE34SdTJy2G/SYcKRWFnbg3AIittC+Mb0L
ERpnWkM4ZCohHMz36VY3+0UfdEyF8j4AhdzcCkYcLLBakX3FG6ZnLuypla6W
QiVN/fXkjZ2Se3UXRdLu2HxgQcBosmI0NO8j3Hv7aBYhms1G1yduWNoPCLCY
SKR6qD6yqxSCf+VFtLCUIEhvSZqhfGKjaNB0xirWGcJf1nW5hHVbXdlOrWrD
h31x1gmzrHedSOQfY5rMxLy8iqki3MOUYNpbbPgXEbvJDVxO+1CbYKqxCzz+
lqOoIiOVHXEILFVsSJ0RSsinDx9YBW6dWgaLfGBm8P5m8c3xEX4mz16rneOJ
2vkj48eYt4Q1pWw/7WpSOPdG59gTyoLJqswFKSP386mam9reEyeD19eVPkVA
amAtmDoBB776ZtsgqmThuxOPCuxV0OXwCmRc6sRMGEXTsz4sSa9adOz+EytZ
N7JykCB0ks8xRLtBFM52DRQn1G7F6vwP6Su13MZQ7NtzD4HRwY4hBy1EGyKg
gw9ZOHEV0AL6+wZMDnZHYMiJkhqSts/fQIjBTOgTUUC4P4ljS3B6RB6YruoJ
U/2mRsBFziKhGfnDAzMzrRFdA6lZ8cV5hGc/bcSDDuNK1Ch0erBUIEI8o6NY
OV9T0wJizDMxHL7Mqt0qY2GAFJ3Xz14+tHC5UJ2p9AiKAiML2viWqo4gNnEi
syXcyKQ9FiCv79mAq6oaorcrFiB3LHazhpO66IZAW+3FxDhrlg7YCin62hQC
RhiJOZOzF8iZHDLifDqq+mPz3eR56aIUgGK2IdkHFEhLYQG/anVfjyE3EhDU
ofBSPbtOkmzhfQGjWwZWF0ee0J3xSfHeOk3Ly6KAnHk/1B0Yc5Geui4ijLNA
AUnYSC+ONbVTeIu26Lxn4rU6F6+VoHXPk7Xm8NZFWTgbBAGiuWILtooyKn3p
GCA5TZ6zbbh9Aoz+8mH6ouO8jl0lNgCREMQ3UJh7I5PQLFvWlcSKqysj0fBw
Lx9cF1BpiO14dUAnpjstc2ZqkqaPdQ7VVb4fM7c5KxjLkaaJkd4KikfSDiJ6
jYKmoUlL1OJIcMGcaMpuWgo8nZZMUqf1K5lWZjGCIJyNhJKOGYj1OMxMOuuB
ZDDyLQCh/0XO0mxApYGB15lMHIFsandnX0UQKIYoHw3r1xDVcX++BKf5yQJr
GPTeRxQpWRLY6V0wzpusAEKAZ9A9WOTYzPXsjBtYgetON3DAduRnlr5YpXnT
4NTXi8Wu6Q86OiIzgprk5rxd1zV7U+nzplW3JVRcF4C1LFy4eDjDI9Wiyr3E
yEl87GFH7UMzOX6Hx5eIimT4tu1us1XbOS9aYjY8akxZOfJKCXsTJVrRIVkg
4SCOLiIPHEG3gsPO8hBUFrPYZp7Voqx3y+k846gvHpfDMKakriDaKfitsfbO
QAZj2fLCmU12gbsPsm+PWvVJE3fHZt95sBYJRegJfNFpKNRT7eU8ZzAClQ0p
+UQ8QOIcKcQoGHLD/hS7+pqd3arViHKLjmbpGYSxANyiMBEFF2esOVVZpRCn
OBtmSN4gRVai5hdNTeySu4vcBpxJtTEaH9hX5GeTvEl4K7aFbrW4ZId8JnIE
zUDARmSwbdYAbZU3iMJo7kUaJS8glzt2hXdWqr3YWxZuM5jD7MAaEN2ty6jL
3K/AZaIYUihhCnbXnzcjXqKaxlYBN6YsWuXhMYee4qEwZfe4hwnKF47Kmod+
GO/YGXfR2y/tV21m/SgWtXT7OBaOQfMiKgc6AHMi9eEMwmIQNmuaq4VzZzLc
lDqb0h4BeyXjY2uiUxCgr/vng0fDCR77mdV9cUZ1PnWqawd7ca332a1EJPk9
Y3HXtgP7NCdZP8+rPgb7XRnbDv0ZrpTrWuZTaJB5re6o7Xrf2pgaIMakxAeA
mfzHyMxx7iLfmGsIW/zUOVEgpQbuYjY70PFbSMSyiSRqd4MPw4KwauaNA0eB
45GwA9nRZMdUfDhZJMc+XYv/TMRz7Z3mmDyIbbfvH0T2w4SjN31qD4u5vJMI
C7I91LNZuYQDPnOaKjJJBHOWjYsbdvERgygSoXVmdnT6QuLyTmgj1vxbVnnF
EyZeiZ8JAiu9Sf/d2VPiN8nbs+njXz2eSS4MQGKDOq3Ej2JYHkgACI3IO9Ie
ZAXXA3IZh4l5qpkk3+S0iZOeWzowzXN2g3N31d7KpBEXXl7p5cs8QTx6NPPY
JxYD2YIeiRI81XCRAV2xI+A532VR1vM9u/Nw+hDY0yb5jwvaQxH9kAZSLWEf
C16Fakp8iicAWRXWhShFRZ20icWXbUjz5bZpiexXS4x3DYxaQ8uZkhxCksLQ
wdcmHLGrduiO0wgUHj7MBD03SBCgnoUBtW79HP2D0E6JwXC+M+6WUPwCcVUS
z4STOBFB3H9rsgtQVjHlSLIJiWYk4pSafOKm0YqwDX4mSNvsthrTv6jti0Uy
cragSPYW2cEJA4jkyWNGOwjoATGD1N52EhIjDpujDfKNsCx4WQJp/CEPFeQ+
gr0TKJi1Gf1Qq3BmdmEIJ2YZloiCDZD5Ig/TVgRuy9ytJVjIrtoSunI26TI3
77/p3/Ij0kVMlDqwWu75qN4KLUB4Yl8mm5kZ02+s2PPn9ZXQsRAujATi7uCV
qxF71BeeCLwVTZNYIwqplkYchcyga/NyNUtf1Z0544PkGFIYshJhQN1604ou
rNNjfzgH26lXwvufksDnMVEHr7IxcclyO6f9ulzSTb3clRpgIo04ticvWQtJ
wnWE/kRNd/LyT+wIWbIR4v17sJapJF59+JCSznTdDkKtLNi8F/vNKXJsIF5a
5gwb3PRUIUnDa5ccTu60VlPDIfa7hSqXngTRNwJbF6fP1ANBR23LahX0vd0W
WzagmpaEOSZ9IOivkACMQMMtNlPAeI0MFGx9ghBT0rwnzqLNk2ENb0Cjw3WO
qKhthEldaDdH9kp1oS42FwDpjOfU3xa5Jv3UC29mUEjBx8x88Drb2ywQYmiW
fGbOCAcv+BzKOjIf4MknGmIoPG6SHR9nWZ20soOakGTIdsBKIrt4WO4OYosT
QRULg7qDdUqH0mM7qoXSjNl0ZSlHCw65Ktq1xFrAGszBw0cyn6lhxPLhJN3u
iPQS0jnXS5seqcYevJaYR0ijZkM+4uJh6EDv503hM+Yesnxw2hvUC1vYFRFK
mo0Gxo7Cj3uD7w1WisU6X3B47pEu66EP0LUUue+wpWe9VQSZpIeMEroj/RD7
Ms98zvm48VCTcCRKkGOaMy+i/2WXleBXIk0lva1V+5NwUQ2VjBJ/Wc6mc8ri
reBa0puimHRaFSZCISdCW1NgWzNWiZMpCbQ6pzjNDgNQiIHL5FdZjrWoDOIl
LZLkVxL/ElUHco7HDumCtxLKHvTW46Kg57koZkxv7Az4vUvc3qn1NlQnvdaQ
Xub51jqSgxYawSxbJESK3VZ8Y50WvWD7HU381cl563+BxQSSA0m+q6LsNM6d
4J1fEyQQbwGPMVDynZrWekdkgIyjKJjglEr0fnBOcWL6tMOR+MgSm3LXIg/+
ZcdqcTKKGEyCdxoBF9lMhkq2p8pJj/PQgh1K9+2XalNtbZ6gT8MFT4Qw00R4
5xL+2WDT99iEoo6iAaNhOz4BwoaKcJRPaBIXPzGxzoMRSxf9UbM3JJ2jw9SQ
AqVx83qSg8xxPVI+M/cq3wsXCAKoM3bO5bJ3xMvaSeJjEUltnKTvTt6eI6Ll
62KSPv32+QTKjATgp9+dvEo71L9BUDLntJLQuzbvozvNEudGdPGkG4hGkuOV
RNPwuUzspOCAWOP4T9KX/35O8zmtT96I5PPN+fmbNFNLb8LC67beItB/ZCDf
tWU7R2z3fJCembicFeHgAyszB4MPzT9SF8GZo5xNIOlRRvOJFaIOWRqkhoCC
bAXwncFZ/CJ0eQJJVbKB57LJTSryQw9mZiZ21m+plw6sdU60YIkvQULUEBox
MFzBGqUGzFxotxNmx76fbyyTCnnTlVBfP144fVeyh1doeDSxijES6uFovQbR
0VKhLIrTWctNzGuObuN4dsTjsCbqAMFKpYq1IhVHVItm46e3IrSsllwvgsU6
Kf4gCYfE+y8TRqyJc7nrV0vC493UREaVvNmUb+l+64yVbevRSedWN6euwiTf
AU2M9zYpRIbmOgRWKWiSOCXFNbXKBZonbEjDZ9UFVDAMmT0nLo4A4WE8HUPg
WrKg3VPDkImrrJElkNMWAde9bmrn1xASi0IhqtuaRHKqEWiCWwk3zlhkp+EM
2G6bWn2WQ9ApnUQu9RBQ9qhZTkU8Z0WNYyz1gEjSpVIssebvWccJ3yC6+j/p
L0k/6e/R1P09+sQuboKPn96FxHZ8VhefO4u7wMKxsEcuYWU4lV7joN9Df4+C
dfghev3cpB/9uwk+2fzu2Qtmo7MaLuW2xtLCvTKd3kzv3Pr4+FEfGDfp99/H
7TGvQ82j/Xf/9R2gX35JZxnP6ziNAH/zFebA3VgPx8fREr7/fmRlN6oUyPcb
e1m7OI6nhwfxGqJn/PER/8/3cRw+HOlEnvcg+b1rxpt57J/7D0Evx+nonxsQ
nRwH36+CN6yXA30E7ybcwU18NBTmfvv0b3B+HvV6uQnOpYf76Ao0JDAYIezF
3LOul8Fc5ONL7/t3vSgKjK0o+E/a7zD64RN6edR/K+iF/tHQInz9ajpKiB5N
fxdu72gvGpkUPB+dy40NN96L2DrSj/eiw7le7ocu8VkcdpJGWBB2EpHPUdhq
J0NAPgpafx91Ev7xD8dJ/+j7P39y7I1R5EcX7g0L0Oz3cHgU60FfsMjOYQf2
Ri+Q1ncwoITHg7P//eg0jo8j0hx/6P/1HuBr0n9+gDOEb8ifSEvvn6QPAou3
lFT9778I3a2zX3wYqqxxgQpVEJwCy3a++Y6Ecva0IJd2sXYxPLGMa/oUy7Jm
8RAbHcT+SAgM+p2MGRuQR+EjdXrS+Ezsn+zV1jgWZ2ARL7SPORD7fliqDkqF
cx9bXRXn0dQaXfpSx8E21HypldD6RneLCnbmf/N6WviKaNSiG0Pyv7aYnr7F
d00v5aTYcRpFAicyorcuOVi6XQOuDXLdJMEo0lS9SfZpucu7GuA/Q+wzJyCe
lJxpJPbUSazVICorUJttd72ppx8fk4hdSyorKch7+xdG/mjaCPXoXDW+RAub
2xNVzStvA1RbZZiYMND3Me9Fl3WWApCHtVrE57ZFZIlESbdarEdM++x9aIPI
IdoS9TNZtEgC96KFC4XQQvnx3EdfqxNjEAMbl+FzEOFToqHXajp2g5M6R7u8
K5fi9ucIHzN59VNog5hqjkGGv1/TRfwRSU60bA893XMlXtWCt6QGSyksWgq2
BtCPYma8mdWVq+N1sbtYy3eMJS5rHo4s30cYuGkUZlWICt5sm0LsdBoCahkh
6MROk+6d1epzsdvZArZfMbFwtBMBe2sVPgb1nNLv7PC5fuFG6TkstHAYV9lN
nB493M3Fuq5bX8/EdckBna2GpUqfbRIN6qJtZUJZNJ2+N2aS+Ol4tb4f+5eX
ZRtWlxQyUwezajTcp/OzEj+WOv0Tn2FRj694Ngjstc4l0btKYB48/nL2pYZk
9onlCLBn6Ztdu1Ybmal3Q2OLzekNLZf93lZYWm3EXIXIszYt2VvP/4zk2Pfv
+fGHD2Pg9bbcF6sDG43gp6CCVzYajlMt5TiiLmdXJ1Z6pegmkVO286HOWrpc
jYrJNM0LpgTmPrzOik59SBa67eOve+bzZJp6Y3toNe+VYZX3glozWeznO1QT
pwtJVqJ25aamo8uLKrju1yq07Un4H4fvKFgRLxX0v4e7SDw3XFahV1GYa9m4
Sj0uOqnNVnkQ9cYmWg9NoxDg2mLb5pq4SsjN1qQF4MQhxKdCajEFMbkcN7+o
iQm0PjI1Dqjrhb4lzMTwipR11I0iVOHk035wu4sgecCSlI/cS98/8ON8sDAG
n2GrtWPmrpA46mcCMhdS0XJMmOqH1iZ9B/uhEz8MaA28l8O3E5wUjXXSqrG+
oFO5t/3I49kc8jcVncoEkNHWUuYvzOupe5tiBnv2SojBvouKVeF1rgvAkVAo
1uNXk+ABpu8JQ2ZvTfq7Hzl+hX1nutOerfUjSpS7IwRdgy15wiepuHdW1A5i
OyyvyI8qEDurhZqG9XzARFlE1SpM1jqJTswsfS4m2onWTvVZbigpoFU7l64c
VL/3xFv/bYC4fzj+XFQG7mjIr7R66aDgPuQkibPk8NKq2Ow4CAAhsRolloCD
e++Gj4lGqrOXYr2sXwR1nqRKAggjdRTsFQueqI8HpiPpYRqNtRyANZ401+50
PLP1/g7GH+rB3QvQ81Bmqw7eL95W8A3IYnBlBaez7WLxWaNaj6xYwcNUcp0O
BuPEEV9PUo6D+BodD7DVlJAgxpzLe0Vv8BLENQE6Vki09lAp6zQoiiMUgaiS
ZnC4XguSaWlqZ7w9o6oeg1hrU7P/n4vqiyzEjld/psxzb5k/rEQSC9xxyA7O
vAxAB3fNlbsd0+6N6XxrjCocAsmyj5VcLpplUKzWE/KDPaLhGZcsZr/OWAwq
8LSqq2mTM57zgriwkDDUYD+cKsTC7OjohwGeJk5ftvNkpxapg7c05HwKqXDW
tJlK4HPNNGLMZvlJnWbIWuTS8XI+uWpzrlFtPoK+k1LTiXGFYTkgx4sCLm/F
ksPasBYxpz0SuxvAjUPNQVp9HWkS9Q5UIJfCTBGlED+weoktGca0O7dwjkiy
OIQ+lfe1+1RzwgBqL2nzQScS4hLOQswArMz1bh/ptxVdwN1CkQwtC+PcP73O
g+hsX5RuRN4HCrCc6K6acFWjrtU/H7gaBzGmyBGAfYHORRfUVvE5NCMyROyq
t3OaSG7aqOEkyF3UiKCLQgMqC4nsRXT0rbPU0jwoWxZkYPhIMUsq4P4LFKHu
Jz5IvFaPWzvVBWPqeYLsUmbbMJPkYMH+oeAZl3/FBLU0H3FRDgmbcFGscg8y
FqWAMFPXQOpxYQsvw7SS8OUVFpgkEbkhFZilz2qpmO1FK1/Kjol4ohUsfP2Z
kSGDsqXhRFF4PopHZjpyeOZ64kzy5iKBid5xUAhj4SqoDGxSXTnEWsq/NI7Z
GPLYMhKLWOlNjtMxkXYx1wDQyNPv6jibtatPHVTUGpEZjnwuV65BAtQ4L5ct
32K3RQXferWScPmTqDSvcItsUGt1H/PEXs3345iyQ75DzQ/AgIsiIr47a0hb
b4Rpu94T1z2AoRXEfH4dIeJIOZFhXeQ4Yh23j1jdWNZLfKy+XIYSyXfhjiRG
n289SKhMorE4gyQg1iYQDFiglJNk70hq53WBCM3WVXEorjAnFn16ltYZFA9m
uVw0dQh2T+AGkrEmgDpTZnJoqRbQ55QZb2KLO4U6qsH5fYWwH8ns48+iDAz6
Qa7A4qsRABctmMgkf3kLzZ9oQgYkfLsIh+uoEg21gPfAoCjXPIgC44wxRnyC
zrdsassgSOBuMs19K9rLmTgXsp4cYEVNQ/rVg3zn5awEFeJyrUUVZk1FTZ6w
cJier8eFNbHbRpz2SAo98JdpJuX9c7RqH8Ld4+v8hCkxt1NNLoiAHBk8LBpO
1rcwG2ZErrxrGmd1MAW1ejuyktPoBXdbhpCvNWbkCuNNRmoyYegjNvr0r1l5
OEFhJ+Thal4ONWb3Er/u3+bJS4uoGLq7ymjmQR5RO08XRmoU+YwhVhZojMHc
Z+lRzy8iY0ouB4pSSVdWWRGdOAo9trTZQ57oiadb+Y/A2YjKQvR3pbBMrAuo
JEZx2+2cOib+RSa/h1ZtTEJf0RIRjWtGlNGSBFxloOoGoey+spagJI/SF89G
BBOzfGgZA94Oq2UApQ9aH4rdLHcLhcKGNNudFsnmgppKG0RYh61F71Sw+vJn
uUwqqDk3uOzywweppVnHC5/5xKzBzlh2V48nTRy/PHCxjhaXSK+z1uIEH/YL
omfx3VPAJF9WIZoUIATrn5UoA0d/pqri+wdaIyookp/SAkoLBOdKL1YBK06X
leIzVjVPshsTf8dbS2BYsAHWV+pB8WS+doG7heJyxeUm4QQDyeDaiIm7zqxX
vCQ0YIS3ybXFhsYSipIZQU20bqXVmuYsN74ArnXJcj2kC3d7MtRm1IyLSlyu
6jip1N6dyJwgr9jcLRUlHCa4+4940zebuhqW3UqlNpnUKyUAySRb5hiwtrBh
Us4WFxltO+1qEofzBjWAElf/FFZHJvdaIhKPr6ugNGkrFfNofmf1aWvsmOR7
K/7DwbuZ3J5EQI8YCd+TUmsqwKr4USkPynclljyMIq9cEU8v41NbHBecI14t
Vopow5U4gCrynIrALbVt6CxZDd0imK8ZPXmf+NLEo/948QYOar3xkeWZnnXE
MjyFGImtZIQlJmH6iBmPOJ1QL4n1hhDHakXusG5h6axUMnGp8OrUCu70GXSD
Kx8s17rq5Vg4k5mJOiJBeZkN9PqaNEFnmUGRBTX2eKOSx73TN+8ES85Eppmm
r4D6ZfoSK3gD5O+krFiSnFRil4sLVodlqDI5nwjcj+5e4p1IcMsaqohNrJJ6
6+ZAmOFizNkkgHlp6EdrEhd86NtgRmm7WOdmK9BsDSsz3DN1yMT5diiSkmRT
l4Uk6LNlS0U6voNDALDhlE8t4MBSpsc7UkahkxiJ5wJXlpmZc0stlasP4i5f
aLnsCI7R/Y8kPS3zdjiqXBuoGiSBKLErT21QXxZNbcqaXV1r/AxfgGJ8GMiW
mFE/jDcPaG94B4UJUtq1Xq+rDkbFzMr88nwRQFhPwN2x20lZjwvm9EnW1Rtz
JNJrerp8CEZQmdOnlQkGO4nvpeX5E0haddcE/kcmKIxyXkjk1Ilp4MtTZGOn
BoLdl8kgMd9XY9DkfF9pgCMUQpq6auw6hIRdCb6wr0tfJ5Wn2G18p012nb46
efVMiQn0xZcvT2ep0DI+xHpx1F92mdQfoZ00p7VwzDaOSpLJcb49m8cS06hd
ZYRFvS3yoGLdWJEWb4ZiHlnDmR44avUmSzZHSXE5hkB4U2Gg2ihdh9HAz8tf
jTKkdu4eHyEMUSkViCI0G8Cg8UmExcHiF3OoSqXDrdBOC1FlpCxG7KTn6Av1
uvpqMrj0nQ1meHUKJ1viLzXTck19+4DVGOX77gAB8z40QXmfBNyDj3xRTZkH
CeY/2xEacZFvls2XSvX0HomYPLMPJLCfrKPa1zgwytaEFqMauSRdi9hv9FRv
4SQAEG+HnvB7I0tGLZhYcX52dOG2Xq0J24xwG+aAu6pg7VKLHJhyBsyUAb3w
A8IuYXLK0JmWz5J3RiUdKCFl9zwFAcmUeyKNcmrtX9TqM5ZlKlGPMQb0tQ99
4SrzXfuJkNdCuqTlKOrTAYSkZoW7z3uA9UUJmfESkKu8DI2+G63H3VkjMTmy
S8uLfxO2lyAkMEIfz5kYlDo5cBnuLKjj1bdTm4TZ52DokWv6aLEHRqzePrjl
hVd9B0IfA5pVQ3pPw4k8GvA2cUSS2j9t3JH9YI4LGZpmYpWdSY6XSDAT6qzo
qusdsrKd3iQKOuMYpBh3tPa3KmutlOQIa844lYVnwSfbmfPd9JeGWRLoIrRM
LrDmOjNJ/HbqWSjN9anPpI5yrcUFJEMnm5BhTrQnI79esgl6Zpui3uQtdjxS
My11Rnhu3Sw1djUbsVB2tSZ4uZCAiVnSOW/t0ozUPp6nTcS46oxdrqZS/65L
ue+m79G1qxm1NImvRe8u7+n342pLlHqXSviCFhBxtxCEd++ABYi5I2whN08a
bslvgdmh3RWIH3DvT/l9FPW2bGEuBfvnXRtmbDNv4aOpExqqr5N+UX0eyZ5+
wAgrjbvGVY5hGiwIYrgEDk9la/yyv+4Z4ojc3qDRhw/+jiB3iTLzNt1QxfNN
JtVUbtJnFrp1Q7THj/rcQH2TJjcSj/4kiPBHtsSZRL68UFtd5+OOemamf+FM
iTuWOo4xB+N8k/WqebPPx5U3+hdkKzzrWwJ5iJcnp2ILOBBAhd6f1f1i4Waf
sETJ4M48rOTUh9gwd/oj3xuWvng20Tt2XzzjwTUVgb5hmBdt6B7iSsyplh/j
uDa4NkN4nbHwCsOoGF76GH/05UPulyNNNQYpgJtO3o2ILr9D4KGQb4zGoCWM
u1vjl/6obXCpWqujEzu5LPh6wGB/5OpkIG6Htu+4LFNYf4hDJ7mAOELz1dYz
swU1eTgpq5ziCzyiz2chH0AoBJPruJJhb7ffvX0BMLqVjI4WIJna8Xk3VGH4
1iwF6P7URVO/YKMi6UycxcMpG9GptKSNfiCrnb2WMzhoS4Mq1L0Ye0Rwl0sR
Lq6ysujXwjT+6IK84MkkNevS1OvC3z7J6o4P4hVXTXK1KyFPusIazoDRA6PU
Gef6IEF8CKlH7IxzsXy9gLJ/y/OtnUI2zXBdN7vk19/gOCgZ1qLee8k3kPpi
JYmYwA5cr37mjEB955cMzUGqdv3zAY+wxoYFLnMrj+WryiIamlMxgqRwVOGu
OxEurHeJkYMpZqDcYTt5Jiiuxv6ov/pLyBLzK3Q+yovTRvx1wHe5VCa6o2eS
zEn8XflbvFxpu5U4tfwF2CUtabFfaFSHjJQMrywJKqBKfRK5NIVvlgE4NO+D
XpX4VF/70opU+Sz485O49ssYVCaJu7kr07K3nm9NlL+JylDuo5IdWJRcmkKS
E1vbMO3eoYSVvtVndCjfjTuXeUd+TMMzU4gi5OqChPiKbbZOxfI0uLYSmVGa
eO/bydkMCxpIZWicdNrQRd7MrZZZQCpdp0+CDA533TcEQJfnkkgZcTkXrvAb
5GWOAhyOrHQhdhwl6hTTG95HenS35n1tEa3e4nebR0r0nrzcOkojjrNMCin6
sGF3T3zyvFqi5k/OZhMrSOfrXPEgvVMZBVIcKlt8HnmQoyImjQhULGEzZTxc
lifwYB4qtsgGY0dRNA7GmWfs8LsrUYK6iBIeE9jtg7j3YeyNuMJW+8RLbkd0
nO0G9lFDVFBXKhib8Eg640MQXkbDkde49My8orHQZ5FHr2op15K4Ttws2Pyl
aVuevbvaeojUSYICezPPQZ37YJiVJeDnGkpcBJu9tD4PjGVGf6x898YLgip1
eldfLJaLJG2E1MQq57MNCwIao3RUke3rrKi2tcseLLj8OLWf1qvpnDm+3oms
NhS98nK5cxchJ7fdS8J1hV/wbXc9T2iEQxVLv81SFww84rDLfbTepJcs6QIx
aytKEmic2WB7giPhxXcT25PBIWxcHUJLJTRVOriPnSfvIg8SlpgkCSy8PEz3
br4fgn82CE5Qnb+QCjl5hA/xRS7hmkAWfWjFLAkuAR80MtZhxbRu28Dk45jh
EvBuIbBSQrxubvON94MG7M7YoASOGEjVjp5cZ3tPgtjKGAVWGzlkYpNVzm9v
V8YG7DyxK+RI0Mc7LMyy10g4pVPE7aqDHctgBftQEy07hIQOhu+pxtM8CzOW
X1mBJGLS5WVwF2O1TIYFnfT2nNuhNSjs6TXjj2KSv388Pw7uUmOTDlJf1V5I
vyXB/bsCOKnUc7/JgepZ8IImrvgrmyOzSZQL7s/LoRqznO3nvrLvBfZK1i7E
o6Irdt7gZFf5a2pdqdy3r8WRHfsvXFkigmA3ZW/MbmMChacinu97Jw8CoCSR
MfEHU250+82vf/0bmGY45KHrGtHL1auUBPqroZiXMPjGMGhskrxoM7KbQXHQ
LClUQyPnep8oUdSqJqgAfGMx9M4xICiUuJpQJJ+ZvzDTTPkrdm4hdayzqPGY
4+qNL6JZSClOCXkw0po13t1jRlBJupKM+9Ctl7DRZh8Yl4JgLxaI+sJL5hVC
M3THbuqhiCBDcIaCFdAHWJgv7IiwNOVe66AHhvn41nVXVSCoqJrMXUC4sWkn
e1hIe9GkkWQR3Zvlagc7nc/JJJm7/cvr3YP48SQs0A7FmRrwRZhE/prM35Zu
2z0ATXj+XV3EWc+BEIgfyjT1zuSN1Eho8j9HaqnpN7uKA2Q7LgaqRwqcEi5s
TW5wbayab+UEpv6kBtUKsnBSwge3uEqkzdUmL/n6dtMWpwtkXKvRSWLBrTZi
RaibZVFpkJhe2Mk5/8MikoHXwRzUwT4ntAmINvIZa5Eh40FK2rbcHPv+gWID
53MaPKYCQ6Qll+VOoqpbcT9LM4swxFlkQ4avoHEgzyAm805TCQVyLWjJgad1
UFO7n6vNykVYHEJvo9QKERs4tDhDhIuPhHVlDhWT+UjVsEdJWLInql7lC9+E
FWh8wJyvigJTndZdi+v3uHo/4+WIogpTN73lBFWw4gn2qjTd+CzeG64qFVbL
OQCTQZGmqOxPv5No/PDr7cu5YydjvwZlgu7YyaFdfmSdnHIKYQC5kU4G+6aV
lm60k1FI3nsmw5X0l/inX97yl3AJqo9NpA8o+3BHiN7e/J1UiD8My1ubD0Hz
u7/n5BURgqqDnzH5R/dsPvLSfZp/9ZOOHr14l+ZnetmmL9f4yaB7FL9438kP
ipV9tPlXP+HovRfv0lyPzE+DdXpkXgWFuiHV33PyI/VE7t78AJHrneefBHR3
bv5Ciyh86ujq9vrE5oZgf4e1//sOKXHhQbx786/GNsy9Ofu8yd+l+RlM3+NE
5KPNb0W2T578H9X89onNe/Vr79k8Jkl/7yPz1U8z+h0g/1bs2aNCw0eb/8xI
yygbTPx+zf9GSCsm3E9t3l/NfyHtnZufcY7ef0H+00f/O3CZv13zn0e6ONVC
EZ/Y/PMEs8HjW5r3g4hs4su7NB+l8wOC/7eb/NucU0Y/rfmtc/+ZROKx5re+
eKC5AuZTRzcY/Cxrv/95hwlnWC9abjO4Uw9nN2O/3txjDs+lB+Xyn9LDqfQw
FFvu3MM76aEHifv08FZ6uBm8dl84xHP43X16SD97L55KDydwt4GkQXG+Xw+v
P3svXn/2Xpx/9l6kn70Xbz57LxSjYPPWfbhvD5+/F6efvRfPP3svzj57Lz6f
Rn0+nYx//VkEs1n/8S3N1e9jEaWRAe2jzf8Wss19Jn/bn2/uivr3/IVBjDgp
8eZi/Br+eknoCeQ+1OH9xZjT8bG7EJf9jRJOoXFqKHna+mon/bsn/wKTVy9i
zTLLDtUYmaXJtzQqrs8dv05znkspM58YJOF8Ep+NTBdzgPuruSXSnWZknXSD
Kimu8DRyCLJF1yZuWd7FO7ww1ypRHK5QGztRfZCLjOcTHRP15c6C0uMWti+1
cOPr2xEspdePShgFihO5MtuDnFcH3tDd68NI3Q3so6UJHCioywCK/zH7H7P/
1BqmvnpvqpFxGk8QB9uduZpD4rNvREYtomq6CkIJvUmi4mOCcki9rVyaqrvL
OpfCAtzWT4fb20zGYWK3iHm6CGX5E33TqfNIpj2uFTunP+KIdTfBaC8HvNM3
tzuWvUNaeznonr7Ns3wnuHCzR+7OnZuha3mUqA346U3vyp3wtXv1El2582m9
9O/c+bRe7J84DOF+vXzUv3ynTg691m8vzgqHWH/UA//R9rceDfsbeo4H4w9G
Ppk9nZ1+fPzb+bX9fXz8gyN9ZHz3y1dfcbUdrs2NhJvmd7+7V/tPGf+HyYz+
fnC/9r/f3n7yS/3yJxFQ+t8/0h6/vVLZ3oTU8PvH2n8fuGRwjdL3AVnrX6s0
Ov8/yVJ/mOjE+98/1p7b/DJ+t//9Y+2jB7itwnPru7UfENZPPD8HR7rH/PE3
uvyR1+47/oj37l7tR9x392nfJ+mfDD+j7fds/9XdxzcX3CpQfe+z/yKjfWRW
h9vf7sS7w/hjf/dp76hAsJB7tP+Zz89B/O+ZCO/bfsQfdZ/2PSLzmeu/+XT8
/0nG/wT4qTvwk9v/lPB/9Jn4d/MZ9OenGD/9Gdqf6/VFgYvjPu0HBOH/t/X/
8MNsppOHiHc//juZ9tn6n6az+/Sgv2lxwafqfbvXImjEwW8/HN8TDH+S1eNv
MpnRsn6ybegZDVcjTOi29v/PqCH3bX/IkvjYTIlyOcsdbYkPSOU9eXXSvzNe
ymq56yHcBSuWoc9ZSFJLGtkf6EKSJM4sM+ojHfprrzhHF3df7idx0UPOJIuT
engdPgXF1XxfxZUgzte5q6JtibY2slwA0+Q062RFP7Zi9MPdEvWV1HrSFcS9
cnrm4OYml2iWSIk6vrXBTJfVMmuWltEUF7mw0ieA2cnisqqvy3wpeS0Eq+/y
9JpLk3CNcU7lzKpLsVm6VHQpkuBSVVBCMM+XuD+Hc8TT3+coktGl3+5WK3w/
2eyzNn2zRt3hbYtfnhF039b88Xxdb+jp82KBSp15g99e0pcsL9O3+LdZ0mD4
9TnqwOzo56dI8qW+8OMrAuLZpujW+PKHYpOeUZNsiW+nWdOiFuJTrLjiLk53
qGaV/iHnk8vjvy6zVfo0by7snbMdClS9Agwvd5uMJ6RzT7/BBXGb6dPsUieK
3F0aoCyu5MWTatn8Nf8zqXd/XTb1dXtZ6GuXuzb9PU2+lIbf5ATVp0Vzua7L
v8rUqy6r0/9c7xgoNEC7LvBvhvRB7uUP2aKe01Qx9Ro//FvWrUuUJnpZNwXy
pfHjU7zTFO2izoPt5Gzt4Z5+93tU+CqadpK+3bVt+k29a8ucjsOz7KpYpt/x
bVkbOheT5BmSzc7XWekvqy0al56pVtmCr9wp8mukHxIR40uVkv8LfEkQuZXS
AAA=

-->

</rfc>

