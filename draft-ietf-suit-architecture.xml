<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-architecture-13" category="info">

  <front>
    <title abbrev="A Firmware Update Architecture for IoT">A Firmware Update Architecture for Internet of Things</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="D." surname="Brown" fullname="David Brown">
      <organization>Linaro</organization>
      <address>
        <email>david.brown@linaro.org</email>
      </address>
    </author>
    <author initials="M." surname="Meriac" fullname="Milosch Meriac">
      <organization>Consultant</organization>
      <address>
        <email>milosch@meriac.com</email>
      </address>
    </author>

    <date year="2020" month="October" day="01"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Vulnerabilities with Internet of Things (IoT) devices have raised
the need for a solid and secure firmware update mechanism that is
also suitable for constrained devices. Incorporating such update
mechanism to fix vulnerabilities, to update configuration settings
as well as adding new functionality is recommended by security
experts.</t>

<t>In addition to the definition of terminology and an architecture
this document motivates the standardization of a manifest format
as transport-agnostic means for describing and protecting firmware 
updates.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Firmware updates can help to fix security vulnerabilities and are 
considered to be an important building block in securing IoT devices. 
Due to rising concerns about insecurre IoT devices the Internet
Architecture Board (IAB) organized a ‘Workshop on Internet of Things
(IoT) Software Update (IOTSU)’, which took place at Trinity College
Dublin, Ireland on the 13th and 14th of June, 2016 to take a look at
the bigger picture. A report about this workshop can be found at
<xref target="RFC8240"/>. The workshop revealed a number of challenges for developers
and the need to initiate standardization activites. The workshop
subsequently led to the formation of the IETF SUIT working group.</t>

<t>Developing secure Internet of Things (IoT) devices is not an easy 
task and supporting a firmware update solution requires skillful 
engineers. Once the device is deployed, firmware updates play a 
critical part in its lifecycle management, particularly when devices have a 
long lifetime, are deployed in remote or inaccessible areas where manual
intervention is cost prohibitive or otherwise difficult. Solutions 
for IoT devices are expected to work automatic, i.e. without user 
involvement. Automatic updates that do not require human intervention 
are key to a scalable solution for fixing software vulnerabilities.</t>

<t>Updates to the firmware of an IoT device are not only done to fix 
bugs, but they can also add new functionality, and to re-configure
the device to work in new environments or to behave differently in 
an already deployed context.</t>

<t>The firmware update process has to ensure that</t>

<t><list style="symbols">
  <t>The firmware image is authenticated and integrity protected.
Attempts to flash a maliciously modified firmware image or an image from
an unknown, untrusted source are prevented.</t>
  <t>The firmware image can be confidentiality protected so that
attempts by an adversary to recover the plaintext binary can
be prevented or at least made more difficult. Obtaining the firmware is often one of
the first steps to mount an attack since it gives the adversary
valuable insights into used software libraries, configuration
settings and generic functionality (even though reverse
engineering the binary can be a tedious process).</t>
</list></t>

<t>In examples this document uses asymmetric cryptography 
because it is the preferred approach by many IoT deployments. The 
use of symmetric credentials is also supported and can be used by<vspace />
very constrained IoT devices.</t>

<t>While the standardization work has been informed by and optimised for firmware
update use cases of Class 1 devices (according to the device class
definitions in RFC 7228 <xref target="RFC7228"/>) devices, there is nothing in
the architecture that restricts its use to only these constrained IoT devices.
Moreover, this architecture is not limited to managing software updates,
but can also be applied to managing the delivery of arbitrary data, such
as configuration information and keys. Unlike higher end devices, like 
laptops and desktop PCs, many IoT devices do not have user interfaces 
and support for unattended updates are therefore essential for the design
of a practical solution. Constrained IoT devices often use a 
software engineering model where a developer is responsible for creating
and compiling all software running on the device into a single, monolithic 
firmware image. On higher end devices application software is, on the other 
hand, often downloaded separately and even obtained from developers different 
to the developers of the lower level software. The details for how to obtain 
those application layer software binaries then depends heavily on the platform, 
programming language uses and the sandbox the software is executed in.</t>

<t>While the IETF standardization work has been focused on the 
manifest format, a fully interoperable solution needs more than a standardized 
manifest. For example, protocols for transferring firmware images 
and manifests to the device need to be available as well as the status tracker 
functionality. These building blocks have been developed by various organizations 
under the umbrella of an IoT device management solution. The LwM2M protocol is one 
IoT device management protocol.</t>

<t>There are, however, several areas that fall outside the scope of the IETF
and other standards organizations but need to be considered by firmware authors, 
as well as device and network operators. Here are some of them, as highlighted during 
the IOTSU workshop:</t>

<t><list style="symbols">
  <t>Installing firmware updates in a robust fashion so that the
update does not break the device functionality of the environment
this device operates in. This requires proper testing and offering 
recovery strategies when a firmware update is unsuccessful.</t>
  <t>Making firmware updates available in a timely fashion considering the
complexity of the decision making process for updating devices,
potential re-certification requirements, the length of a supply chain 
an update needs to go through before it reaches the end customer, 
and the need for user consent to install updates.</t>
  <t>Ensuring an energy efficient design of a battery-powered IoT devices because a 
firmware update (particularly writing the firmware image to flash).</t>
  <t>Creating incentives for device operators to use a firmware update mechanism and to 
demand the integration of a firmware update mechanism from IoT device vendors.</t>
</list></t>

<t>This document is structured as follows. <xref target="terminology"/> offers terminology for 
talking about firmware updates supporting the standardization of a manfest format.</t>

</section>
<section anchor="terminology" title="Conventions and Terminology">

<t>This document uses the following terms:</t>

<t><list style="symbols">
  <t>Manifest: The manifest contains meta-data about the firmware
image. The manifest is protected against modification and
provides information about the author.</t>
  <t>Firmware Image: The firmware image, or image, is a binary
that may contain the complete software of a device or a subset of
it. The firmware image may consist of multiple images, if
the device contains more than one microcontroller. Often
it is also a compressed archive that contains code,
configuration data, and even the entire file system. The
image may consist of a differential update for performance
reasons. Firmware is the more universal term. The terms,
firmware image, firmware, and image, are used in this
document and are interchangeable. The term application firmware
image is used to differentiate it from a firmware image that 
contains the bootloader. An application firmware image, as the 
name indicates, contains the application program often including 
all the necessary code to run it (such as protocol stacks, and 
embedded operating system).</t>
  <t>Software: The terms “software” and “firmware” are used
interchangeably.</t>
  <t>Microcontroller (MCU for microcontroller unit): An MCU is a
compact integrated circuit designed for use in embedded systems.
A typical microcontroller includes a processor, memory (RAM and
flash), input/output (I/O) ports and other features connected via
some bus on a single chip. The term ’system on chip (SoC)’ is 
often used interchangeably with MCU, but MCU tends to imply more 
limited peripheral functions.</t>
  <t>System on Chip (SoC): An SoC is an integrated circuit that
integrates all components of a computer, such as CPU, memory,
input/output ports, secondary storage, etc.</t>
  <t>Homogeneous Storage Architecture (HoSA): A device that stores
all firmware components in the same way, for example in a file
system or in flash memory.</t>
  <t>Heterogeneous Storage Architecture (HeSA): A device that
stores at least one firmware component differently from the rest,
for example a device with an external, updatable radio, or a
device with internal and external flash memory.</t>
  <t>Trusted Execution Environments (TEEs): An execution environment
that runs alongside of, but is isolated from, an REE. For more 
information about TEEs see <xref target="I-D.ietf-teep-architecture"/>.</t>
  <t>Rich Execution Environment (REE): An environment that is provided
and governed by a typical OS (e.g., Linux, Windows, Android, iOS),
potentially in conjunction with other supporting operating systems
and hypervisors; it is outside of the TEE.  This environment and
applications running on it are considered un-trusted.</t>
  <t>Trusted applications (TAs): An application component that runs in
a TEE.</t>
  <t>Trust Anchor: A trust anchor, as defined in <xref target="RFC6024"/>, represents 
an authoritative entity via a public key and associated data.  The 
public key is used to verify digital signatures, and the associated 
data is used to constrain the types of information for which the 
trust anchor is authoritative.”</t>
  <t>Trust Anchor Store: A trust anchor store, as defined in <xref target="RFC6024"/>, 
is a set of one or more trust anchors stored in a device.  A device 
may have more than one trust anchor store, each of which may be used 
by one or more applications. A trust anchor store must resist 
modification against unauthorized insertion, deletion, and modification.</t>
</list></t>

<section anchor="stakeholders" title="Stakeholders">

<t>The following stakeholders are used in this document:</t>

<t><list style="symbols">
  <t>Author: The author is the entity that creates the firmware image.
There may be multiple authors involved in producing firmware running 
on an IoT device. <xref target="device"/> talks about those IoT device deployment cases.</t>
  <t>Device Operator: The device operator is responsible for the day-to-day operation
of a fleet of IoT devices. Customers of IoT devices, as the owners of 
IoT devices - such as enterprise customers or end users, interact 
with their IoT devices indirectly through the device operator via 
web or smart phone apps.</t>
  <t>Network Operator: The network operator is responsible for the operation of a
network to which IoT devices connect.</t>
  <t>Trust Provisioning Authority (TPA): The TPA distributes
trust anchors and authorization policies to various stakeholders. 
The TPA may also delegate rights to stakeholders. For example,
in some cases, the Original Design Manufacturer (ODM), which is a
company that designs and manufactures a product, may act as a
TPA and may decide to remain in full control over the firmware
update process of their products.</t>
</list></t>

<section anchor="functions" title="Functions">

<t><list style="symbols">
  <t>(IoT) Device: A device refers to the entire IoT product, which
consists of one or many MCUs, sensors and/or actuators. Many IoT
devices sold today contain multiple MCUs and therefore a single
device may need to obtain more than one firmware image and
manifest to succesfully perform an update.</t>
  <t>Status Tracker: The status tracker has a client and a server component
and performs three tasks: 
1) It communicates the availability of a new firmware version. This 
   information will flow from the server to the server. <vspace />
2) It conveys information about software and hardware characteristics of 
   the device. The information flow is from the client to the server. <vspace />
3) It can trigger the firmware update process on the device. The 
   information flow is from the server to the client.  <vspace blankLines='1'/>
For example, a device operator may want to read the installed firmware
version number running on the device and information 
about available flash memory. Once an update has been triggered, the device 
operator may want to obtain the state information about the firmware 
update process. If errors occurred, the device operator may want to 
troubleshoot problems by first obtaining diagnostic information (typically 
using a device management software).  <vspace blankLines='1'/>
We make no 
assumptions about where the server-side component is deployed. The 
deployment of status trackers is flexible and may be found at<vspace />
cloud-based servers, on-premise servers, or may be embedded in edge 
computing device. A status tracker server component may even be 
deployed on an IoT device. For example, if the IoT device contains 
multiple MCUs, then the main MCU may act as a status tracker towards the 
other MCUs. Such deployment is useful when updates have to be 
synchronized across MCUs.</t>
  <t>Firmware Consumer: The firmware consumer is the recipient of the
firmware image and the manifest. It is responsible for parsing
and verifying the received manifest and for storing the obtained
firmware image. The firmware consumer plays the role of the
update component on the IoT device typically running in the
application firmware. It interacts with the firmware server and
with the status tracker, if present.</t>
  <t>Firmware Server: The firmware server stores firmware images and 
manifests and distributes them to IoT devices. Some deployments 
may require a store-and-forward concept, which requires storing 
the firmware images/manifests on more than one entity before<vspace />
they reach the device. There is typically some interaction between the
firmware server and the status tracker and these two entities are often
physically separated on different devices for scalability reasons.</t>
  <t>Bootloader: A bootloader is a piece of software that is
executed once a microcontroller has been reset. It is
responsible for deciding what code to execute.</t>
</list></t>

</section>
</section>
</section>
<section anchor="architecture" title="Architecture">

<t>More devices today than ever before are being connected to the Internet,
which drives the need for firmware updates to be provided over the
Internet rather than through traditional interfaces, such as USB or
RS232. Updating a device over the Internet requires the device to fetch
the new firmware image and the manifest.</t>

<t>Hence, the following components are necessary on a device for a firmware 
update solution:</t>

<t><list style="symbols">
  <t>the Internet protocol stack for firmware downloads (*),</t>
  <t>the capability to write the received firmware image to
persistent storage (most likely flash memory) prior to performing
the update,</t>
  <t>a manifest parser with code to verify a digital
signature or a message authentication code,</t>
  <t>the ability to unpack, to decompress and/or to decrypt the 
received firmware image,</t>
  <t>(optionally) a status tracker.</t>
</list></t>

<t>(*) Because firmware images are often multiple kilobytes, sometimes
exceeding one hundred kilobytes, in size for low end IoT devices and even
several megabytes large for IoT devices running full-fledged operating systems
like Linux, the protocol mechanism for retrieving these images needs
to offer features like congestion control, flow control, fragmentation
and reassembly, and mechanisms to resume interrupted or corrupted transfers.</t>

<t>The features listed above are most likely offered by code in the application firmware 
image, or more precisely by the firmware consumer, running
on the device rather than by the bootloader itself. Note that 
cryptographic algorithms will likely run in a trusted execution 
environment, on a separate MCU, in a hardware security module, or in a secure element
rather than in the same context with the application code.</t>

<t><xref target="arch-figure"/> shows the architecture where a
firmware image is created by an author, and made available to a firmware
server. For security reasons, the author will not have the permissions to 
upload firmware images to the firmware server and to initiate an update him- or herself. 
Instead, authors will make firmware images available to the device operators. Note that 
there may be a longer supply chain involved to pass software updates from the author all 
the way to the party that can then finally make a decision to deploy it with IoT devices.</t>

<t>As a first step in the firmware update process, the firmware consumer needs to be 
made aware of the availability of a new firmware update by the status tracker. This can 
be accomplished via polling (client-initiated), push notifications (server-initiated),
or more complex mechanisms (such as a hybrid approach):</t>

<t><list style="symbols">
  <t>Client-initiated updates take the form of a firmware consumer on
a device proactively checking (polling) for updates.</t>
  <t>With Server-initiated updates the server-side component of the status tracker 
learns about a new firmware version and determines what devices qualify for a 
firmware update. Once the relevant devices have been selected the updates 
are distributed to the firmware consumers on those devices. Server-initiated 
updates are important because they allow timely update of firmware images.
Note that the client-side status tracker needs to be reachable by the server-side
component. This may require devices to keep reachability information on the 
server-side up-to-date and to keep state at NATs and stateful packet filtering 
firewalls alive.</t>
  <t>Using a hybrid approach the server-side of the status tracker
pushes notifications of availability of an update to the client side and requests 
the firmware consumer to pull the manifest and the firmware image from the 
firmware server.</t>
</list></t>

<t>Once the device operator triggers update via the status tracker, it will keep 
track of the update process on the device. This allows the device operator to know what 
devices have received an update and which of them are still pending an update.</t>

<t>Firmware images can be conveyed to devices in a variety of ways,
including USB, UART, WiFi, BLE, low-power WAN technologies. At the application layer 
a variety of different protocols may be used as well. MQTT, CoAP, and HTT are the 
most popular application layer protocols used by IoT devices. This architecture 
does not make assumptions about how the firmware images are distributed to the 
devices.</t>

<t>In some cases it may be desireable to distribute firmware images using a multicast
or broadcast protocol. This architecture does not make any assumptions about such 
a protocol. However, given that broadcast may be desirable for some networks,
updates must cause the least disruption possible both in metadata
and firmware transmission.</t>

<t>For an update to be broadcast friendly, it cannot rely on link
layer, network layer, or transport layer security. A solution has
to rely on security protection applied to the manifest and firmware image
instead. In addition,
the same manifest must be deliverable to many devices, both those
to which it applies and those to which it does not, without a
chance that the wrong device will accept the update. Considerations
that apply to network broadcasts apply equally to the use of
third-party content distribution networks for payload distribution.</t>

<figure title="Architecture." anchor="arch-figure"><artwork><![CDATA[
                                                      +----------+
                                                      |          |
                                                      |  Author  |
                                                      |          |
                                                      +----------+
                       Firmware + Manifest                 |
              +----------------------------------+         | Firmware +
              |                                  |         | Manifest
              |                               ---+-------  |
              |                           ----   |       --|-
              |                         //+----------+     | \\
             -+--                      // |          |     |   \
        ----/ |  ----                |/   | Firmware |<-+  |    \
      //      |      \\              |    | Server   |  |  |     \
     /        |        \             /    |          |  +  +      \
    /         |         \           /     +----------+   \ /       |
   / +--------+--------+ \         /                      |        |
  /  |        v        |  \       /                       v        |
 |   | +------------+  |   |     |          +----------------+      |
 |   | |  Firmware  |  |                    |     Device     |      |
 |   | |  Consumer  |  |   |     |          |     Management |      |
|    | +------------+  |    |    |          |                |      |
|    | +------------+  |    |    |          |    +--------+  |      |
|    | |  Status    |<-+--------------------+->  |        |  |      |
|    | |  Tracker   |  |    |    |          |    | Status |  |      |
|    | |  Client    |  |    |    |          |    | Tracker|  |     |
 |   | +------------+  |   |     |          |    | Server |  |     |
 |   |    Device       |   |      |         |    +--------+  |     |
 |   +-----------------+   |       \        |                |    /
  \                       /         \       +----------------+   /
   \       Network       /           \                          /
    \     Operator      /             \     Device Operator    /
      \\             //                \ \                   //
        ----     ----                     ----           ----
            -----                             -----------
]]></artwork></figure>

<t>Firmware images and manifests may be conveyed as a bundle or detached. The 
manifest must support both approaches.</t>

<t>For distribution as a bundle, the firmware image is embedded into a manifest.
This is a useful approach for deployments where devices are not connected
to the Internet and cannot contact a dedicated firmware server for the firmware
download. It is also applicable when the firmware update happens via a
USB sticks or short range radio technologies (such as Bluetooth Smart).</t>

<t>Alternatively, the manifest is distributed detached from the firmware image. 
Using this approach, the firmware consumer is presented with the manifest first 
and then needs to obtain one or more firmware images as dictated in the 
manifest.</t>

<t>The pre-authorisation step involves verifying whether the entity
signing the manifest is indeed authorized to perform an update.
The firmware consumer must also determine whether it should fetch and
process a firmware image, which is referenced in a manifest.</t>

<t>A dependency resolution phase is needed when more than one
component can be updated or when a differential update is used.
The necessary dependencies must be available prior to installation.</t>

<t>The download step is the process of acquiring a local copy of the
firmware image.  When the download is client-initiated, this means
that the firmware consumer chooses when a download occurs and initiates
the download process.  When a download is server-initiated,
this means that the status tracker tells
the device when to download or that it initiates the transfer
directly to the firmware consumer. For example, a download from an
HTTP-based firmware server is client-initiated. Pushing a manifest
and firmware image to the Package resource of the LwM2M
Firmware Update object <xref target="LwM2M"/> is server-initiated update.</t>

<t>If the firmware consumer has downloaded a new firmware image and is ready to
install it, to initiate the installation, it may 
- either need to wait for a trigger from the status tracker, 
- or trigger the update automatically, 
- or go through a more complex decision making process to determine 
the appropriate timing for an update.</t>

<t>Installation is the act of processing the payload into a format that
the IoT device can recognise and the bootloader is responsible for
then booting from the newly installed firmware image.</t>

</section>
<section anchor="bootloader" title="The Bootloader">

<t><xref target="architecture"/> describes the steps for getting the firmware image and the manifest
from the author to the firmware consumer on the IoT device. Once the firmware consumer 
has retrieved and successfully processed the manifest and the firmware image it needs 
to hand control over to the bootloader.</t>

<t>In most cases this requires the MCU to restart. Once the
MCU has initiated a restart, the bootloader determines whether a newly available 
firmware image should be executed.</t>

<t>A power failure at any time during a firmware update must not cause a failure 
of the device. Equally, adverse network conditions during an update must not 
cause the failure of the device.</t>

<t>One way to achieve this functionality is to provide a minimum of two storage 
locations for firmware. An alternative approach is to use a second stage 
bootloader with build-in full featured firmware update functionality such 
that it is possible to return to the update process after power down.</t>

<t>Assuming the first approach, there are (at least) three firmware images available
on the device:</t>

<t><list style="symbols">
  <t>First, the bootloader itself is a firmware image.</t>
  <t>Second, the firmware image that has to be replaced is still available on the 
device as a backup in case the freshly downloaded firmware image does not 
boot correctly.</t>
  <t>Third, there is the newly downloaded firmware image.</t>
</list></t>

<t>To differentiate the firmware image of the bootloader from the other firmware 
images that contain application code we refer to the latter as application 
firmware images.</t>

<t>Since many low end IoT devices use non-relocatable code, 
the bootloader needs to copy the newly downloaded application firmware image 
into the location of the old application firmware image and vice versa.</t>

<t>The boot process is security sensitive. An attacker will typically try to 
retrieve a firmware image from the device for reverse engineering or will try to get 
the bootloader to excute an attacker-modified firmware image. The
bootloader will therefore have to perform security checks on the
firmware image before it can be booted. These security checks by the
bootloader happen in addition to the security checks that happened
when the firmware image and the manifest were downloaded by the firmware consumer.</t>

<t>The manifest will likely be stored alongside the firmware image on flash to
allow re-verification of the firmware image with every boot
attempt. The firmware consumer may strip information from the manifest instead of 
storing the complete manifest.  Whether to re-use the standardized
manifest format also for the boot process or to use a different format for the
secure boot-specific meta-data depends on the system design.  The
manifest format does, however, have the capability to serve also as a
building block for secure boot with its severable elements that allow
shrinking the size of the manifest by stripping elements that are no
longer needed.</t>

<t>The design of a reliable firmware update solution requires devices 
to return to a working firmware image. This has implications for the 
design of the bootloader.
If the firmware image contains the firmware consumer
functionality, as described above, then the bootloader must be able to
roll back to a working firmware image. Alternatively, the bootloader
may have enough functionality to
fetch a firmware image plus manifest from a firmware server over the
Internet.  A multi-stage bootloader may soften this requirement at
the expense of a more sophisticated boot process.</t>

<t>For a bootloader to offer a secure boot functionality it needs to 
implement the following functionality:</t>

<t><list style="symbols">
  <t>Cryptographic libraries with hash functions, digital signatures
(for asymmetric crypto), keyed message digests (for symmetric 
crypto).</t>
  <t>The device needs to have a trust anchor store to verify the 
digital signature. (Alternatively, access to a key store for use 
with the keyed message digest.)</t>
  <t>Ability to expose boot process-related data to the application
firmware (such as to the status tracker).  This allows
to share information about the current firmware version, and the 
status of the firmware update process and whether errors have occurred.</t>
  <t>Offer attestation information, such as boot measurements. (optional)</t>
  <t>Ability to decrypt firmware images, in case confidentiality protection 
was applied). This requires a solution for key management. (optional)</t>
</list></t>

<t>Throughout this document we assume that the bootloader itself is
distinct from the role of the firmware consumer and therefore does not
manage the firmware update process. This may give the impression
that the bootloader itself is a completely separate component,
which is mainly responsible for selecting a firmware image to boot.</t>

<t>The overlap between the firmware update process and the bootloader
functionality comes in two forms, namely</t>

<t><list style="symbols">
  <t>First, a bootloader must verify the firmware image it boots as
part of the secure boot process. Doing so requires meta-data to be
stored alongside the firmware image so that the bootloader can
cryptographically verify the firmware image before booting it to
ensure it has not been tampered with or replaced. This meta-data
used by the bootloader may well be the same manifest obtained with the
firmware image during the update process (with the severable
fields stripped off).</t>
  <t>Second, an IoT device needs a recovery strategy in case the firmware
update / boot process fails. As mentioned earlier, the recovery 
strategy may includestoring two or more application firmware images 
on the device or offering the ability to have a second stage bootloader 
perform the firmware update process again using firmware updates over 
serial, USB or even wireless connectivity like Bluetooth Smart.
In the latter case the firmware consumer functionality is contained in the
second stage bootloader and requires the necessary functionality for
executing the firmware update process, including manifest parsing.</t>
</list></t>

<t>In general, it is assumed that the bootloader itself, or a minimal part of it,
will not be updated since a failed update of the bootloader poses a 
reliability risk.</t>

</section>
<section anchor="device" title="Types of IoT Devices">

<t>There are billions of MCUs used in devices today produced by a large 
number of silicon manufacturers. While MCUs can vary significantly 
in their characteristics, there are a number of similiaries allowing 
us to categorize in groups.</t>

<t>The firmware update architecture, and the manifest format in particular, 
needs to offer enough flexibility to cover the most common deployment cases.</t>

<section anchor="single-mcu" title="Single MCU">

<t>The simplest, and currently most common, architecture consists of
a single MCU along with its own peripherals.  These SoCs generally
contain some amount of flash memory for code and fixed data, as
well as RAM for working storage.  A notable characteristic of these 
SoCs is that the primary code is generally execute in place (XIP). 
Due to the non-relocatable nature of the code, the firmware image 
needs to be placed in a specific location in flash since the code 
cannot be executed from an arbitrary location in flash. Hence, then 
the firmware image is updated it is necessary to swap the old and 
the new image.</t>

</section>
<section anchor="single-cpu-with-secure-normal-mode-partitioning" title="Single CPU with Secure - Normal Mode Partitioning">

<t>Another configuration consists of a similar architecture to the
previous, with a single CPU.  However, this CPU supports a security
partitioning scheme that allows memory (in addition to other things)
to be divided into secure and normal mode.  There will generally be
two images, one for secure mode, and one for normal mode.  In this
configuration, firmware upgrades will generally be done by the CPU
in secure mode, which is able to write to both areas of the flash
device. In addition, there are requirements to be able to update
either image independently, as well as to update them together
atomically, as specified in the associated manifests.</t>

</section>
<section anchor="symmetric-multiple-cpus" title="Symmetric Multiple CPUs">

<t>In more complex SoCs with symmetric multi-processing support, advanced
operating systems, such as Linux, are often used. These SoCs frequently
use an external storage medium, such as raw NAND flash or eMMC. Due to
the higher quantity of resources, these devices are often capable of
storing multiple copies of their firmware images and selecting the most
appropriate one to boot. Many SoCs also support bootloaders that are
capable of updating the firmware image, however this is typically a last
resort because it requires the device to be held in the bootloader while
the new firmware is downloaded and installed, which results in down-time
for the device. Firmware updates in this class of device are typically
not done in-place.</t>

</section>
<section anchor="dual-cpu-shared-memory" title="Dual CPU, shared memory">

<t>This configuration has two or more heterogeneous CPUs in a single SoC that 
share memory (flash and RAM).  Generally, there will be a mechanism to prevent 
one CPU from unintentionally accessing memory currently allocated to the other.
Upgrades in this case will typically be done by one of the CPUs, and is 
similar to the single CPU with secure mode.</t>

</section>
<section anchor="dual-cpu-other-bus" title="Dual CPU, other bus">

<t>This configuration has two or more heterogeneous CPUs, each having their own memory.
There will be a communication channel between them, but it will be
used as a peripheral, not via shared memory.  In this case, each CPU
will have to be responsible for its own firmware upgrade.  It is
likely that one of the CPUs will be considered the primary CPU, and will
direct the other CPU to do the upgrade.  This configuration is
commonly used to offload specific work to other CPUs.  Firmware
dependencies are similar to the other solutions above, sometimes
allowing only one image to be upgraded, other times requiring several
to be upgraded atomically.  Because the updates are happening on
multiple CPUs, upgrading the two images atomically is challenging.</t>

</section>
</section>
<section anchor="manifests" title="Manifests">

<section anchor="overview" title="Overview">

<t>In order for a firmware consumer to apply an update, it has to make several decisions
using manifest-provided information and data available on the device itself. For more 
detailed information and a longer list of information elements in the manifest consult the 
information model specification <xref target="I-D.ietf-suit-information-model"/>, which offers justifications 
for each element, and the manifest, see <xref target="I-D.ietf-suit-manifest"/>}, for details about how this 
information is included in the manifest.</t>

<texttable title="Firmware Update Decisions." anchor="manifest-info">
      <ttcol align='right'>Decision</ttcol>
      <ttcol align='left'>Information Elements</ttcol>
      <c>Should I trust the author of the firmware?</c>
      <c>Trust anchors and authorization policies on the device</c>
      <c>Has the firmware been corrupted?</c>
      <c>Digital signature and MAC covering the firmware image</c>
      <c>Does the firmware update apply to this device?</c>
      <c>Conditions with Vendor ID, Class ID and Device ID</c>
      <c>Is the update older than the active firmware?</c>
      <c>Sequence number in the manifest (1)</c>
      <c>When should the device apply the update?</c>
      <c>Wait directive</c>
      <c>How should the device apply the update?</c>
      <c>Manifest commands</c>
      <c>What kind of firmware binary is it?</c>
      <c>Unpack algorithms to interpret a format.</c>
      <c>Where should the update be obtained?</c>
      <c>Dependencies on other manifests and firmware image URI in Manifest</c>
      <c>Where should the firmware be stored?</c>
      <c>Storage Location and Component Identifier</c>
</texttable>

<t>(1): A device presented with an old, but valid manifest and firmware
must not be tricked into installing such firmware since a
vulnerability in the old firmware image may allow an attacker to
gain control of the device.</t>

<t>Keeping the code size and complexity of a manifest parsers small is important 
for constrained IoT devices. Since the manifest parsing code may 
also be used by the bootloader it is part of the trusted computing base.</t>

<t>A manifest may not only be used to protect firmware images but also personalization data
related to firmware or software. Trusted Execution Environments (TEEs), for example,
benefit from a protocol for managing the lifecycle of trusted
applications (TAs) running inside a TEE. TEEs may obtain TAs
from different authors and those TAs may require personalization data,
such as payment information, to be securely conveyed to the TEE.</t>

</section>
</section>
<section anchor="securing" title="Securing Firmware Updates">

<t>Securing the firmware update process itself is important. Failure 
to do so can help attackers to take control over the devices.</t>

<t>End-to-end security mechanisms are used to protect the firmware
image and the manifest. The following assumptions are made to allow 
the firmware consumer to verify the received firmware image and 
manifest before updating software:</t>

<t><list style="symbols">
  <t>Authentication ensures that the device can cryptographically identify
the author(s) creating firmware images and manifests. Authenticated
identities may be used as input to the authorization process. Not all 
entities creating and signing manifests have the same
permissions. A device needs to determine whether the requested action
is indeed covered by the permission of the party that signed the manifest.
Informing the device about the permissions of the different parties
also happens in an out-of-band fashion and is also a duty of the
Trust Provisioning Authority.</t>
  <t>Integrity protection ensures that no third party can modify the manifest
or the firmware image. To accept an update, a device needs to verify the signature covering
the manifest. There may be one or multiple manifests that need to be
validated, potentially signed by different parties. The device needs
to be in possession of the trust anchors to verify those signatures.
Installing trust anchors to devices via the Trust Provisioning Authority
happens in an out-of-band fashion prior to the firmware update process.</t>
  <t>For confidentiality protection of the firmware image, it must be done in such a
way that the intended firmware consumer(s) can decrypt it. The information
that is encrypted individually for each device must maintain
friendliness to Content Distribution Networks, bulk storage, and
broadcast protocols. For confidentiality protection of firmware images the author needs
to be in possession of the certificate/public key or a pre-shared key
of a device. The use of confidentiality protection of firmware images
is optional.</t>
</list></t>

<t>A manifest specification must support different cryptographic algorithms
and algorithm extensibility. Due of the nature of
unchangeable code in ROM for use with bootloaders the use of
post-quantum secure signature mechanisms, such as hash-based
signatures <xref target="RFC8778"/>, are attractive. These
algorithms maintain security in presence of quantum computers.</t>

<t>When a device obtains a monolithic firmware image from a single author
without any additional approval steps then the authorization flow is
relatively simple. There are, however, other cases where more complex
policy decisions need to be made before updating a device.</t>

<t>In this architecture the authorization policy is separated from
the underlying communication architecture. This is accomplished
by separating the entities from their permissions. For example,
an author may not have the authority to install a firmware image
on a device in critical infrastructure without the authorization
of a device operator. In this case, the device may be programmed
to reject firmware updates unless they are signed both by the
firmware author and by the device operator.</t>

<t>Alternatively, a device may trust precisely one entity, which
does all permission management and coordination. This entity
allows the device to offload complex permissions
calculations for the device.</t>

</section>
<section anchor="example" title="Example">

<t><xref target="firmware-update"/> illustrates an example message flow
for distributing a firmware image to a device
starting with an author uploading the new firmware to
the firmware server and creating a manifest. The firmware
and manifest are stored on the same firmware server.</t>

<t>This
setup does not use a status tracker and the firmware consumer
component is therefore responsible for periodically checking
whether a new firmware image is available for download.</t>

<figure title="First Example Flow for a Firmware Upate." anchor="firmware-update"><artwork><![CDATA[
+--------+    +-----------------+    +-----------------------------+
|        |    |                 |    | +------------+ +----------+ |
| Author |    | Firmware Server |    | |  Firmware  | |Bootloader| |
+--------+    +-----------------+    | |  Consumer  | |          | |
  |                   |              | +------------+ +----------+ |
  |                   |              |      |  IoT Device    |     |
  |                   |               `''''''''''''''''''''''''''''
  |                   |                     |                |
  | Create Firmware   |                     |                |
  |--------------+    |                     |                |
  |              |    |                     |                |
  |<-------------+    |                     |                |
  |                   |                     |                |
  | Upload Firmware   |                     |                |
  |------------------>|                     |                |
  |                   |                     |                |
  | Create Manifest   |                     |                |
  |---------------+   |                     |                |
  |               |   |                     |                |
  |<--------------+   |                     |                |
  |                   |                     |                |
  | Sign Manifest     |                     |                |
  |-------------+     |                     |                |
  |             |     |                     |                |
  |<------------+     |                     |                |
  |                   |                     |                |
  | Upload Manifest   |                     |                |
  |------------------>|                     |                |
  |                   |                     |                |
  |                   |   Query Manifest    |                |
  |                   |<--------------------|                |
  |                   |                     |                |
  |                   |   Send Manifest     |                |
  |                   |-------------------->|                |
  |                   |                     | Validate       |
  |                   |                     | Manifest       |
  |                   |                     |---------+      |
  |                   |                     |         |      |
  |                   |                     |<--------+      |
  |                   |                     |                |
  |                   |  Request Firmware   |                |
  |                   |<--------------------|                |
  |                   |                     |                |
  |                   | Send Firmware       |                |
  |                   |-------------------->|                |
  |                   |                     | Verify         |
  |                   |                     | Firmware       |
  |                   |                     |--------------+ |
  |                   |                     |              | |
  |                   |                     |<-------------+ |
  |                   |                     |                |
  |                   |                     | Store          |
  |                   |                     | Firmware       |
  |                   |                     |-------------+  |
  |                   |                     |             |  |
  |                   |                     |<------------+  |
  |                   |                     |                |
  |                   |                     |                |
  |                   |                     | Trigger Reboot |
  |                   |                     |--------------->|
  |                   |                     |                |
  |                   |                     |                |
  |                   |                 +---+----------------+--+
  |                   |                S|   |                |  |
  |                   |                E|   | Verify         |  |
  |                   |                C|   | Firmware       |  |
  |                   |                U|   | +--------------|  |
  |                   |                R|   | |              |  |
  |                   |                E|   | +------------->|  |
  |                   |                 |   |                |  |
  |                   |                B|   | Activate new   |  |
  |                   |                O|   | Firmware       |  |
  |                   |                O|   | +--------------|  |
  |                   |                T|   | |              |  |
  |                   |                 |   | +------------->|  |
  |                   |                P|   |                |  |
  |                   |                R|   | Boot new       |  |
  |                   |                O|   | Firmware       |  |
  |                   |                C|   | +--------------|  |
  |                   |                E|   | |              |  |
  |                   |                S|   | +------------->|  |
  |                   |                S|   |                |  |
  |                   |                 +---+----------------+--+
  |                   |                     |                |
]]></artwork></figure>

<t><xref target="firmware-update2"/> shows an example with the device using
a status tracker. Depiction of the author publishing the manifest at
the status tracker and the firmware image at the firmware server would
be the same as in <xref target="firmware-update"/>. So for brevity they are not shown.
Also omitted is the secure boot process following the successful 
firmware update process.</t>

<t>The exchange starts with the device interacting with the status
tracker; the details of such exchange will vary with the different
device management systems being used. In any case, the status
tracker learns about the firmware version of the devices it
manages. In our example, the device under management is using
firmware version A.B.C. At a later point in time the author uploads
a new firmware along with the manifest to the firmware server and the
status tracker, respectively. While there is no need to store the
manifest and the firmware on different servers this example shows
a common pattern used in the industry. The status tracker may then
automatically, based on human intervention or based on a more
complex policy decide to inform the device about the newly available
firmware image. In our example, it does so by pushing the manifest
to the firmware consumer. The firmware consumer downloads the firmware
image with the newer version X.Y.Z after successful validation
of the manifest. Subsequently, a reboot is initiated and the secure
boot process starts.</t>

<figure title="Second Example Flow for a Firmware Upate." anchor="firmware-update2"><artwork><![CDATA[
 +---------+   +-----------------+    +-----------------------------+
 | Status  |   |                 |    | +------------+ +----------+ |
 | Tracker |   | Firmware Server |    | |  Firmware  | |Bootloader| |
 |         |   |                 |    | |  Consumer  | |          | |
 +---------+   +-----------------+    | +------------+ +----------+ |
      |                |              |      |  IoT Device    |     |
      |                |               `''''''''''''''''''''''''''''
      |                |                     |                |
      |        Query Firmware Version        |                |
      |------------------------------------->|                |
      |        Firmware Version A.B.C        |                |
      |<-------------------------------------|                |
      |                |                     |                |
      |         <<some time later>>          |                |
      |                |                     |                |
    _,...._         _,...._                  |                |
  ,'       `.     ,'       `.                |                |
 |   New     |   |   New     |               |                |
 \ Manifest  /   \ Firmware  /               |                |
  `.._   _,,'     `.._   _,,'                |                |
      `''             `''                    |                |
      |            Push manifest             |                |
      |----------------+-------------------->|                |
      |                |                     |                |
      |                '                     |                '
      |                |                     | Validate       |
      |                |                     | Manifest       |
      |                |                     |---------+      |
      |                |                     |         |      |
      |                |                     |<--------+      |
      |                | Request firmware    |                |
      |                | X.Y.Z               |                |
      |                |<--------------------|                |
      |                |                     |                |
      |                | Firmware X.Y.Z      |                |
      |                |-------------------->|                |
      |                |                     |                |
      |                |                     | Verify         |
      |                |                     | Firmware       |
      |                |                     |--------------+ |
      |                |                     |              | |
      |                |                     |<-------------+ |
      |                |                     |                |
      |                |                     | Store          |
      |                |                     | Firmware       |
      |                |                     |-------------+  |
      |                |                     |             |  |
      |                |                     |<------------+  |
      |                |                     |                |
      |                |                     |                |
      |                |                     | Trigger Reboot |
      |                |                     |--------------->|
      |                |                     |                |
      |                |                     |                |
      |                |                     | __..-------..._'
      |                |                    ,-'               `-.
      |                |                   |      Secure Boot    |
      |                |                   `-.                 _/
      |                |                     |`--..._____,,.,-'
      |                |                     |                |
]]></artwork></figure>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document describes terminology, requirements and an architecture for 
firmware updates of IoT devices. The content of the document is thereby 
focused on improving security of IoT devices via firmware update mechanisms
and informs the standardization of a manifest format.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their feedback:</t>

<t><list style="symbols">
  <t>Geraint Luff</t>
  <t>Amyas Phillips</t>
  <t>Dan Ros</t>
  <t>Thomas Eichinger</t>
  <t>Michael Richardson</t>
  <t>Emmanuel Baccelli</t>
  <t>Ned Smith</t>
  <t>Jim Schaad</t>
  <t>Carsten Bormann</t>
  <t>Cullen Jennings</t>
  <t>Olaf Bergmann</t>
  <t>Suhas Nandakumar</t>
  <t>Phillip Hallam-Baker</t>
  <t>Marti Bolivar</t>
  <t>Andrzej Puzdrowski</t>
  <t>Markus Gueller</t>
  <t>Henk Birkholz</t>
  <t>Jintao Zhu</t>
  <t>Takeshi Takahashi</t>
  <t>Jacob Beningo</t>
  <t>Kathleen Moriarty</t>
  <t>Bob Briscoe</t>
</list></t>

<t>We would also like to thank the WG chairs, Russ Housley, David Waltermire,
Dave Thaler for their support and their reviews.</t>

</section>


  </middle>

  <back>


    <references title='Informative References'>





<reference  anchor="RFC8240" target='https://www.rfc-editor.org/info/rfc8240'>
<front>
<title>Report from the Internet of Things Software Update (IoTSU) Workshop 2016</title>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<date year='2017' month='September' />
<abstract><t>This document provides a summary of the Internet of Things Software Update (IoTSU) Workshop that took place at Trinity College Dublin, Ireland on the 13th and 14th of June, 2016.  The main goal of the workshop was to foster a discussion on requirements, challenges, and solutions for bringing software and firmware updates to IoT devices. This report summarizes the discussions and lists recommendations to the standards community.</t><t>Note that this document is a report on the proceedings of the workshop.  The views and positions documented in this report are those of the workshop participants and do not necessarily reflect IAB views and positions.</t></abstract>
</front>
<seriesInfo name='RFC' value='8240'/>
<seriesInfo name='DOI' value='10.17487/RFC8240'/>
</reference>



<reference  anchor="RFC6024" target='https://www.rfc-editor.org/info/rfc6024'>
<front>
<title>Trust Anchor Management Requirements</title>
<author initials='R.' surname='Reddy' fullname='R. Reddy'><organization /></author>
<author initials='C.' surname='Wallace' fullname='C. Wallace'><organization /></author>
<date year='2010' month='October' />
<abstract><t>A trust anchor represents an authoritative entity via a public key and associated data.  The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative.  A relying party uses trust anchors to determine if a digitally signed object is valid by verifying a digital signature using the trust anchor's public key, and by enforcing the constraints expressed in the associated data for the trust anchor.  This document describes some of the problems associated with the lack of a standard trust anchor management mechanism and defines requirements for data formats and push-based protocols designed to address these problems.  This  document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract>
</front>
<seriesInfo name='RFC' value='6024'/>
<seriesInfo name='DOI' value='10.17487/RFC6024'/>
</reference>



<reference  anchor="RFC7228" target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='M.' surname='Ersue' fullname='M. Ersue'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2014' month='May' />
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference  anchor="RFC8778" target='https://www.rfc-editor.org/info/rfc8778'>
<front>
<title>Use of the HSS/LMS Hash-Based Signature Algorithm with CBOR Object Signing and Encryption (COSE)</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='2020' month='April' />
<abstract><t>This document specifies the conventions for using the Hierarchical Signature System (HSS) / Leighton-Micali Signature (LMS) hash-based signature algorithm with the CBOR Object Signing and Encryption (COSE) syntax. The HSS/LMS algorithm is one form of hash-based digital signature; it is described in RFC 8554.</t></abstract>
</front>
<seriesInfo name='RFC' value='8778'/>
<seriesInfo name='DOI' value='10.17487/RFC8778'/>
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>An Information Model for Firmware Updates in IoT Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='June' day='2' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality.  One component of such a firmware update is a concise and machine- processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-07' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-07.txt' />
</reference>



<reference anchor="I-D.ietf-teep-architecture">
<front>
<title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>

<author initials='M' surname='Pei' fullname='Mingliang Pei'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<author initials='D' surname='Wheeler' fullname='David Wheeler'>
    <organization />
</author>

<date month='July' day='13' year='2020' />

<abstract><t>A Trusted Execution Environment (TEE) is an environment that enforces that any code within that environment cannot be tampered with, and that any data used by such code cannot be read or tampered with by any code outside that environment.  This architecture document motivates the design and standardization of a protocol for managing the lifecycle of trusted applications running inside such a TEE.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-12' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-teep-architecture-12.txt' />
</reference>



<reference anchor="I-D.ietf-suit-manifest">
<front>
<title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<author initials='K' surname='Zandberg' fullname='Koen Zandberg'>
    <organization />
</author>

<date month='July' day='13' year='2020' />

<abstract><t>This specification describes the format of a manifest.  A manifest is a bundle of metadata about the firmware for an IoT device, where to find the firmware, the devices to which it applies, and cryptographic information protecting the manifest.  Firmware updates and secure boot both tend to use sequences of common operations, so the manifest encodes those sequences of operations, rather than declaring the metadata.  The manifest also serves as a building block for secure boot.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-09' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-manifest-09.txt' />
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC8392" target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='E.' surname='Wahlstroem' fullname='E. Wahlstroem'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2018' month='May' />
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>


<reference anchor="LwM2M" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf">
  <front>
    <title>Lightweight Machine to Machine Technical Specification, Version 1.0.2</title>
    <author initials="." surname="OMA" fullname="Open Mobile Alliance">
      <organization></organization>
    </author>
    <date year="2018" month="February" day="09"/>
  </front>
  <format type="PDF" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf"/>
</reference>


    </references>




  </back>

<!-- ##markdown-source:
H4sIAEUFdl8AA9V963Lc2JHmf0bwHRDdP0xZVcVueXZsa3q9Q1FqtzxmSyNS
7tmJjmijCigWTBRQxoXssqSNfY19vX2SzS8v5wKAlChpxjsMu0VWAXnOyZMn
75lnPp8fHnRFV+aPk5Pk26LZ3qRNnrzeZWmXJyfNalN0+arr6bN13STPqy5v
qrxL6nVysSmqy/bwIF0um/z6w16vLw4PsnpVpVsaL2vSdTcv8m49b/uim6fB
4/Ovf3V4sCIgl3Wzf5wU1bo+PDg8KHbN46Rr+rZ79NVXv/3qEY3e5Onj5Dxf
9U3R7Q8Pburm6rKp+x19+Po5DXeV7+mz7LGb+/wpxgW0tkur7Ke0rCuazT6n
teyKx4cHSdKsV3nWdvvSPk+Srl6FvxdVlled+6Stm67J163/YL+N/+6aYuWf
X9XbLb3vvy+qsqiC0fKfu3lZtN2cAC3rkh6c1798iK8Ifdt0tyPc69Np323q
BvOe43v+KSp648kiOaubtHKfCtqfNHmVpdXgu7q5TKvib2lX1BXtZbNN/lhs
aTcy90S+TYvSvb7g1/85bbYLWgywORz+u0Vy0a429TqvisvBHL5Lqypvp77/
4HlsGMSicyDumsvTBc27vhmi4ml6XWSDb+IJ/LGo0qYejp3hvcUS7/1zyU8s
6LWpgc9oD/KmSFeDkc+KsqaZD7+MBz+tq7YviUi74QS28vo/b/l1WzVOSbOl
l69zJuNX357+5tE/fGW//+NXj/7Bfv/1o0e/cc/8+tfy+/P504U/jg5aXc23
dZaX8TNdnu+iIzsBYkuLWedtNxoJM/hvX//Wff6r3z7i3/94c/bo7LGstkub
y5yOzKbrdo+Pj29ubhb1Lq+29bIo87Qsi7Ra5cD7cZPTB21+/MfictPd5Pgv
gTn+09c/ffXTo/mjr77+zVePvvrt/OT4xdnJ/OJ8Hj83Hz232GVrnYNwxi+C
N5KzlNZc5cQF3K8X+WpTFau0TM53+apY069A2yz5U9609Evy9eKrxaMvBKY/
r55MaGL2t9DHC1opnVAsNTnRtcoT4KyPE0x2/tWj+Ve/lU9lqxzQl0+//fsh
7vBgPp8n6ZJ4XrpiRvunvqzyJqXxi66gc39TdJsJWZIckYB4kGT5dbGipzbp
dZ40adHi8HebPKnyPGM5khLDLenkEvtOWrB+Ei8me3qRPVvaEqK+dpt0m7RL
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
ORYBRx3r2BJh0GW7oOnhQV/5y7Ndb+tXL85cHqaUZkVufd9DjDDazTlO0W/N
Z+o5jNcRfPwDKa1SNCxl+Np9my+N/M2vf/0b+B84a6DrGrFZNeQClu0sO6M7
r4/wTYQwY6RS2OZkFwvLCbQibE3aWUrqNVKDq5qQBHROlaY4X7nQFXyi2sgN
nf8yd2MBB0uuOfiDAtDOErNj2ax3RKmiLf1wJV/AeG/a5EGavkZnUy1Bb/Io
8oU9ILLde+dYwJRFhRoqO2loJ5nbN47sjhUKGYTLf+xSDeBGhEdPbKcp93od
QuCoDqFqyhrGCtoc07l3GY0m0p2qYlmZRZNEekh8FZ/r5u0sIafDpO5OQW+V
jhIgOZnLUQWsSnqDb+El/tgQQ2p6bS6u2z5CT8QcXIfSxcCnHmgrKl31dvet
9ixp8r9E9po5b/uKc7g67tqrJ4yz13EytXbIvWT9tSunYg2nNdE8JA0nJhLT
d633t7+4q/s48zXlzqlOfQsuwhIzu26yopJGD3ZjsLTfGDd1DVzxFtENNhwB
xBIZPHG5RUDFXyZkjco91m++VMrQSm1DzFywic4AZdlLEmArIVt50ZLL11yt
so6a29ySNmtoQ8A1lbuVzYOi2yAN342wo3ijRXuHZRCMPKejD60lZ1OFVoO2
suUkVisIQp7nALQlU4H5tHnX73z5phboTl63M1WXEl1Q1rmM6NFNU6Sh1Zka
Rtb0m4vUOleaPZELE1xGVzcuKhu0mwwbYN3W9Oo9PQ8fag8w/AwbfsUfD7p7
RS3t2LmnvSP1cWfT+05fEz3h3vr+Am8B5YNWNGoJF7UX42Z4U63m3g7/fM+K
PhCK/eMzFf3nHwol+fMv7vj5UCC3fKqTOOWLHwLs3+/9yX24z/jjh+71/jef
dfzpJ+98/7VcWvF58Ief3/3nzl/3P2iW+inzfzj15D3m/3bqybve/+bzjj/5
5J3vn+tVxr7V7Mfj7+H0kx88/1FXxfe//83nHP+WJ+98X8/PZ6K///zzM/3k
v/YopwjJ4h7vfzNe1Hz+nzv/c7iz76bq29+fmv54V+49/z+pC+1j3x/0g77v
+4NT8vH4N93gnu9/87nGtw/ueP+VuKjvlGr/H9MvU28w93u+/x9Fv+KQ/ej3
hwv6WPpVIvo0/H+4Qm2fDjW1/1D+NfXpOVdQf/z7nxP/Dz+R/t9+Av/4HOMn
f4f3L7Sf36ucqxs/jf7pQP/XWT9M0HE/ab0G4YNAnE8q1veiomcCYsjF7gPi
VECMOfOHg3gtIAbYuBeIVwJixNDuj4t4Fr+736H89B15IiBOEAiAXgR30T1B
vPj0HXnx6Tty8ek7knz6jrz89B1R0oL3Snfj3iA+w46cfvqOPPv0HTn/9B35
DFzrM/DO6U/fhq3oB270INGQlGjzvX+L0JYkegeZTWgN+8W0N/6Ru8k1cMS7
vgIaHOBcby6KHVye+TTfFVHkXJ3uHMmVXsNRTp61BXqfm1tThgb9oNU9f4MU
Tr6t07nZORcnmQg1LJJz6QG2RIkkZ7VoCAc+dywcTSdPkFxSb4uuk26NDHfc
ySLIlOInXAvX8U2UUdoBwgb5zxLlTThO0Y5QzGmy6cpHMDya9M6+vPknfUHy
wlHMjZCug8yVHFwk7oFbyNo1mgxiRFpvp7fOS20dyhSrfRAuG0whiW7wjHbH
7u+MMkGRG2fNWVoGX/dBU+uQxippluGmV7RGd6MhThZPFqd8QR+q0qSHaMHZ
gNIYNqBECf8gMh9HOoKa7ohCh1kk4UXAGwkzRX2gEW/J9VJVq9jvrNlmVbtQ
sLZpiprCjcgeeY4uyUBG1ka9djL5qGIxWhG/41YRles7IFkoGaJre4lXDY4a
hxc3uKl80Kda2oijdqrf8gXRHcav5HA3/mtp4yXxJ44S+uC3JAtKSst0Ztig
D/C4cfyQQOz2NuTt7vnC3SFPcXdNTPRNvJj62EWz4pIAy5F0JEFzpYeN5P5t
8T8X/64Na4ODrylXFoGO87jO+2Vr9akz7rDC3KSIGikrDQi70R6uxm+EV4SX
vHkp8zD5+LBb4m7kmdYQ5ZP3R6ncjTzJQKG4V+AtGP/O2bx9T+Ttg3DzAaG3
aVE8+efbO2JvHwLm/cG3D4Jy22MjAOIydpvxJyXu9wO4k6Ls5xb/VQR6NDbz
8g+YwaTDb/TzATO4daz3zcB99M033NKDRQ2Ln9/97n4APmoGP80W9POT+3j4
93sAzH6hf/15wf8M/34fAHz4vZobdkzDv98L4MfAOY5boH4MmMLwVqjpJfxZ
lvvTTOc+/Pu9APilX8QPD/9+L4DoG9yo4ZWHDwQwYkwfe5huHes+S8DPJAom
Hrv3DKbiKfcCMBVQuQ+AmPt/ChKN5d8XwGRM5RYAFhNZB5b5vehA1JT3zOsO
APcIq9wyg6mfewFwXCFYy30A/N0P061nYSI2cy8AU8GB+wAYcJ1PxcHbTzgL
n2cGH4PEqQjNvQB81l14+DEzGPz1abvwyTNI/i4ApgI19wEwYhD/BXHw00+L
hc4fmuA9pfNsPpT6f54v7gVCP9MeZ+yQvvc6aMzRZz8d3xcVfxYM4Gc2W9DK
PsNm3Op5fWSuV+mn+sG+1y/JWDz5/mR0ibx2sHG9k11KsNXCcpGDdCCHFwRA
LOf63Kov3gvU34/F5YK44nI/i/uPcfFKXDLA6xl5N117TFekerHJ3RX25gC0
oS0/ebnnKu5Vr54kNF+ur6Wpiq4iBssFYkPHqi9pkQxscTfZtV92H4S70CKo
LrfuA4K6k9VVVd+UeSbuRkbZD7k4l6U/K/uV0upK3ETO9SuVyS4JHq288jxD
Z3+tXU1+n6NEvUv+2K/X/MHJdp+2ycsNuoXuWv7oKSH6VS2/X2zqLX3/rFjB
u4XkbvrwjP5K8zJ5hX+brIWHiT5+hrYMPX3+BGWHBI8//Z4wer4tug3/9Ydi
m5zTW2nGf56mTYv2ZE+w/krAnPZoIpP8IecKbpnGizJdJ0/y5tI9dd6jCcz3
QOpVv01lYrqM5DtcMredP0mvbMZIwKdRyuJaHz2psuZv+V/ISvpb1tQ37VVh
D171bfJ7Wkap736XE56fFM3Vpi7/pouourRO/n3TC45omHZT4N8UFUwC6Q/p
ql7SnLGImj/5l7TblGgeclY3BSo6+dMneKop2lWdR/vMVaXjzf7h92izUzTt
LHnVt23yXd23ZU7H5Wl6XWTJD3zP1pbOzezw4CkqXS42aemvrS0aVzOm7r2C
r9Mp8htx5hHD5qsgDg/+HwhYG2U30wAA

-->

</rfc>

