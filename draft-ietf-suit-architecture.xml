<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-architecture-13" category="info">

  <front>
    <title abbrev="A Firmware Update Architecture for IoT">A Firmware Update Architecture for Internet of Things</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="D." surname="Brown" fullname="David Brown">
      <organization>Linaro</organization>
      <address>
        <email>david.brown@linaro.org</email>
      </address>
    </author>
    <author initials="M." surname="Meriac" fullname="Milosch Meriac">
      <organization>Consultant</organization>
      <address>
        <email>milosch@meriac.com</email>
      </address>
    </author>

    <date year="2020" month="October" day="02"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Vulnerabilities with Internet of Things (IoT) devices have raised
the need for a reliable and secure firmware update mechanism 
suitable for devices with resource constraints. Incorporating such update
mechanism to fix vulnerabilities, to update configuration settings
as well as adding new functionality is recommended by security
experts.</t>

<t>In addition to the definition of terminology and an architecture
this document motivates the standardization of a manifest format
as transport-agnostic means for describing and protecting firmware 
updates.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Firmware updates can help to fix security vulnerabilities and are 
considered to be an important building block in securing IoT devices. 
Due to rising concerns about insecurre IoT devices the Internet
Architecture Board (IAB) organized a ‘Workshop on Internet of Things
(IoT) Software Update (IOTSU)’, which took place at Trinity College
Dublin, Ireland on the 13th and 14th of June, 2016 to take a look at
the bigger picture. A report about this workshop can be found at
<xref target="RFC8240"/>. The workshop revealed a number of challenges for developers
and led to the formation of the IETF 
Software Updates for Internet of Things (SUIT) working group.</t>

<t>Developing secure Internet of Things (IoT) devices is not an easy 
task and supporting a firmware update solution requires skillful 
engineers. Once devices are deployed, firmware updates play a 
critical part in their lifecycle management, particularly when devices have a 
long lifetime, are deployed in remote or inaccessible areas where manual
intervention is cost prohibitive or otherwise difficult. Firmware updates<vspace />
for IoT devices are expected to work automatic, i.e. without user 
involvement. Automatic updates that do not require human intervention 
are key to a scalable solution for fixing software vulnerabilities.</t>

<t>Firmware updates are not only done to fix 
bugs, but they can also add new functionality, and to re-configure
the device to work in new environments or to behave differently in 
an already deployed context.</t>

<t>The firmware update process has to ensure that</t>

<t><list style="symbols">
  <t>The firmware image is authenticated and integrity protected.
Attempts to flash a maliciously modified firmware image or an image from
an unknown, untrusted source must be prevented. In examples this document 
uses asymmetric cryptography because it is the preferred approach by 
many IoT deployments. The use of symmetric credentials is also supported 
and can be used by very constrained IoT devices.</t>
  <t>The firmware image can be confidentiality protected so that
attempts by an adversary to recover the plaintext binary can
be mitigated or at least made more difficult. Obtaining the firmware is often one of
the first steps to mount an attack since it gives the adversary
valuable insights into used software libraries, configuration
settings and generic functionality. Even though reverse
engineering the binary can be a tedious process modern reverse 
engineering frameworks have made this task a lot easier.</t>
</list></t>

<t>While the standardization work has been informed by and optimised for firmware
update use cases of Class 1 devices (according to the device class
definitions in RFC 7228 <xref target="RFC7228"/>) devices, there is nothing in
the architecture that restricts its use to only these constrained IoT devices.
Moreover, this architecture is not limited to managing software updates,
but can also be applied to managing the delivery of arbitrary data, such
as configuration information and keys. Unlike higher end devices, like 
laptops and desktop PCs, many IoT devices do not have user interfaces 
and support for unattended updates are therefore essential for the design
of a practical solution. Constrained IoT devices often use a 
software engineering model where a developer is responsible for creating
and compiling all software running on the device into a single, monolithic 
firmware image. On higher end devices application software is, on the other 
hand, often downloaded separately and even obtained from developers different 
to the developers of the lower level software. The details for how to obtain 
those application layer software binaries then depends heavily on the platform, 
programming language uses and the sandbox the software is executed in.</t>

<t>While the IETF standardization work has been focused on the 
manifest format, a fully interoperable solution needs more than a standardized 
manifest. For example, protocols for transferring firmware images 
and manifests to the device need to be available as well as the status tracker 
functionality. These building blocks have been developed by various organizations 
under the umbrella of an IoT device management solution. The LwM2M protocol is one 
IoT device management protocol.</t>

<t>There are, however, several areas that (partially) fall outside the scope of the IETF
and other standards organizations but need to be considered by firmware authors, 
as well as device and network operators. Here are some of them, as highlighted during 
the IOTSU workshop:</t>

<t><list style="symbols">
  <t>Installing firmware updates in a robust fashion so that the
update does not break the device functionality of the environment
this device operates in. This requires proper testing and offering 
recovery strategies when a firmware update is unsuccessful.</t>
  <t>Making firmware updates available in a timely fashion considering the
complexity of the decision making process for updating devices,
potential re-certification requirements, the length of a supply chain 
an update needs to go through before it reaches the end customer, 
and the need for user consent to install updates.</t>
  <t>Ensuring an energy efficient design of a battery-powered IoT devices because a 
firmware update, particularly writing the firmware image to flash, is a heavy 
task for a device.</t>
  <t>Creating incentives for device operators to use a firmware update mechanism and to 
demand the integration of it from IoT device vendors.</t>
</list></t>

<t>This document starts with a terminology followed by the description of the architecture. 
We then explain the bootloader and how it integrates with the firmware update mechanism. 
Subsequently, we offer a categorization of IoT devices in terms of their hardware 
capabilities relevant for firmware updates. Next, we talk about the manifest structure 
and how to use it to secure firmware updates. We conclude with a more detailed example.</t>

</section>
<section anchor="terminology" title="Conventions and Terminology">

<section anchor="terms" title="Terms">

<t>This document uses the following terms:</t>

<t><list style="symbols">
  <t>Manifest: The manifest contains meta-data about the firmware
image. The manifest is protected against modification and
provides information about the author.</t>
  <t>Firmware Image: The firmware image, or image, is a binary
that may contain the complete software of a device or a subset of
it. The firmware image may consist of multiple images, if
the device contains more than one microcontroller. Often
it is also a compressed archive that contains code,
configuration data, and even the entire file system. The
image may consist of a differential update for performance
reasons.  <vspace blankLines='1'/>
The terms,
firmware image, firmware, and image, are used in this
document and are interchangeable. We use the term application firmware
image to differentiate it from a firmware image that 
contains the bootloader. An application firmware image, as the 
name indicates, contains the application program often including 
all the necessary code to run it (such as protocol stacks, and 
embedded operating system).</t>
  <t>Microcontroller (MCU for microcontroller unit): An MCU is a
compact integrated circuit designed for use in embedded systems.
A typical microcontroller includes a processor, memory (RAM and
flash), input/output (I/O) ports and other features connected via
some bus on a single chip. The term ’system on chip (SoC)’ is 
often used interchangeably with MCU, but MCU tends to imply more 
limited peripheral functions.</t>
  <t>System on Chip (SoC): An SoC is an integrated circuit that
contains all components of a computer, such as CPU, memory,
input/output ports, secondary storage, a bus to connect the 
components, and other hardware blocks of logic.</t>
  <t>Homogeneous Storage Architecture (HoSA): A device that stores
all firmware components in the same way, for example in a file
system or in flash memory.</t>
  <t>Heterogeneous Storage Architecture (HeSA): A device that
stores at least one firmware component differently from the rest,
for example a device with an external, updateable radio, or a
device with internal and external flash memory.</t>
  <t>Trusted Execution Environments (TEEs): An execution environment
that runs alongside of, but is isolated from, an REE. For more 
information about TEEs see <xref target="I-D.ietf-teep-architecture"/>.</t>
  <t>Rich Execution Environment (REE): An environment that is provided
and governed by a typical OS (e.g., Linux, Windows, Android, iOS),
potentially in conjunction with other supporting operating systems
and hypervisors; it is outside of the TEE.  This environment and
applications running on it are considered un-trusted.</t>
  <t>Trusted applications (TAs): An application component that runs in
a TEE.</t>
  <t>Trust Anchor: A trust anchor, as defined in <xref target="RFC6024"/>, represents 
an authoritative entity via a public key and associated data.  The 
public key is used to verify digital signatures, and the associated 
data is used to constrain the types of information for which the 
trust anchor is authoritative.”</t>
  <t>Trust Anchor Store: A trust anchor store, as defined in <xref target="RFC6024"/>, 
is a set of one or more trust anchors stored in a device.  A device 
may have more than one trust anchor store, each of which may be used 
by one or more applications. A trust anchor store must resist 
modification against unauthorized insertion, deletion, and modification.</t>
</list></t>

</section>
<section anchor="stakeholders" title="Stakeholders">

<t>The following stakeholders are used in this document:</t>

<t><list style="symbols">
  <t>Author: The author is the entity that creates the firmware image.
There may be multiple authors involved in producing firmware running 
on an IoT device. <xref target="device"/> talks about those IoT device deployment cases.</t>
  <t>Device Operator: The device operator is responsible for the day-to-day operation
of a fleet of IoT devices. Customers of IoT devices, as the owners of 
IoT devices - such as enterprise customers or end users, interact 
with their IoT devices indirectly through the device operator via 
web or smart phone apps.</t>
  <t>Network Operator: The network operator is responsible for the operation of a
network to which IoT devices connect.</t>
  <t>Trust Provisioning Authority (TPA): The TPA distributes
trust anchors and authorization policies to various stakeholders. 
The TPA may also delegate rights to stakeholders. For example,
in some cases, the Original Design Manufacturer (ODM), which is a
company that designs and manufactures a product, may act as a
TPA and may decide to remain in full control over the firmware
update process of their products.</t>
</list></t>

</section>
<section anchor="functions" title="Functions">

<t><list style="symbols">
  <t>(IoT) Device: A device refers to the entire IoT product, which
consists of one or many MCUs, sensors and/or actuators. Many IoT
devices sold today contain multiple MCUs and therefore a single
device may need to obtain more than one firmware image and
manifest to succesfully perform an update.</t>
  <t>Status Tracker: The status tracker has a client and a server component
and performs three tasks: 
1) It communicates the availability of a new firmware version. This 
   information will flow from the server to the client. <vspace />
2) It conveys information about software and hardware characteristics of 
   the device. The information flow is from the client to the server. <vspace />
3) It can remotely trigger the firmware update process. The 
   information flow is from the server to the client.  <vspace blankLines='1'/>
For example, a device operator may want to read the installed firmware
version number running on the device and information 
about available flash memory. Once an update has been triggered, the device 
operator may want to obtain information about the state of the firmware 
update. If errors occurred, the device operator may want to 
troubleshoot problems by first obtaining diagnostic information (typically 
using a device management protocol).  <vspace blankLines='1'/>
We make no 
assumptions about where the server-side component is deployed. The 
deployment of status trackers is flexible and may be found at<vspace />
cloud-based servers, on-premise servers, or may be embedded in edge 
computing device. A status tracker server component may even be 
deployed on an IoT device. For example, if the IoT device contains 
multiple MCUs, then the main MCU may act as a status tracker towards the 
other MCUs. Such deployment is useful when updates have to be 
synchronized across MCUs.</t>
  <t>Firmware Consumer: The firmware consumer is the recipient of the
firmware image and the manifest. It is responsible for parsing
and verifying the received manifest and for storing the obtained
firmware image. The firmware consumer plays the role of the
update component on the IoT device typically running in the
application firmware. It interacts with the firmware server and
with the status tracker client (locally).</t>
  <t>Firmware Server: The firmware server stores firmware images and 
manifests and distributes them to IoT devices. Some deployments 
may require a store-and-forward concept, which requires storing 
the firmware images/manifests on more than one entity before<vspace />
they reach the device. There is typically some interaction between the
firmware server and the status tracker and these two entities are often
physically separated on different devices for scalability reasons.</t>
  <t>Bootloader: A bootloader is a piece of software that is
executed once a microcontroller has been reset. It is
responsible for deciding what code to execute.</t>
</list></t>

</section>
</section>
<section anchor="architecture" title="Architecture">

<t>More devices today than ever before are connected to the Internet,
which drives the need for firmware updates to be provided over the
Internet rather than through traditional interfaces, such as USB or
RS-232. Updating updates over the Internet requires the device to fetch
the new firmware image as well as the manifest.</t>

<t>Hence, the following components are necessary on a device for a firmware 
update solution:</t>

<t><list style="symbols">
  <t>the Internet protocol stack for firmware downloads. Because firmware images are often multiple kilobytes, sometimes
exceeding one hundred kilobytes, in size for low end IoT devices and even
several megabytes large for IoT devices running full-fledged operating systems
like Linux, the protocol mechanism for retrieving these images needs
to offer features like congestion control, flow control, fragmentation
and reassembly, and mechanisms to resume interrupted or corrupted transfers.</t>
  <t>the capability to write the received firmware image to
persistent storage (most likely flash memory).</t>
  <t>a manifest parser with code to verify a digital
signature or a message authentication code.</t>
  <t>the ability to unpack, to decompress and/or to decrypt the 
received firmware image.</t>
  <t>(optionally) a status tracker.</t>
</list></t>

<t>The features listed above are most likely offered by code in the application firmware 
image running
on the device rather than by the bootloader itself. Note that 
cryptographic algorithms will likely run in a trusted execution 
environment, on a separate MCU, in a hardware security module, or in a secure element
rather than in the same context with the application code.</t>

<t><xref target="arch-figure"/> shows the architecture where a
firmware image is created by an author, and made available to a firmware
server. For security reasons, the author will not have the permissions to 
upload firmware images to the firmware server and to initiate an update him- or herself. 
Instead, authors will make firmware images available to the device operators. Note that 
there may be a longer supply chain involved to pass software updates from the author all 
the way to the party that can then finally make a decision to deploy it with IoT devices.</t>

<t>As a first step in the firmware update process, the the status tracker client need to be 
made aware of the availability of a new firmware update by the status tracker server. 
This can be accomplished via polling (client-initiated), push notifications (server-initiated),
or more complex mechanisms (such as a hybrid approach):</t>

<t><list style="symbols">
  <t>Client-initiated updates take the form of a status tracker client proactively 
checking (polling) for updates.</t>
  <t>With Server-initiated updates the server-side component of the status tracker 
learns about a new firmware version and determines what devices qualify for a 
firmware update. Once the relevant devices have been selected, the 
status tracker informs these devices and the firmware consumers obtain those 
images and manifests. Server-initiated updates are important because they allow a quick 
response time. Note that the client-side status tracker needs to be reachable by the server-side
component. This may require devices to keep reachability information on the 
server-side up-to-date and state at NATs and stateful packet filtering 
firewalls alive.</t>
  <t>Using a hybrid approach the server-side of the status tracker
pushes notifications of availability of an update to the client side and requests 
the firmware consumer to pull the manifest and the firmware image from the 
firmware server.</t>
</list></t>

<t>Once the device operator triggers update via the status tracker, it will keep 
track of the update process on the device. This allows the device operator to know what 
devices have received an update and which of them are still pending an update.</t>

<t>Firmware images can be conveyed to devices in a variety of ways,
including USB, UART, WiFi, BLE, low-power WAN technologies, mesh networks and many more. 
At the application layer 
a variety of protocols are also available: MQTT, CoAP, and HTTP are the 
most popular application layer protocols used by IoT devices. This architecture 
does not make assumptions about how the firmware images are distributed to the 
devices and therefore aims to support all these technologies.</t>

<t>In some cases it may be desireable to distribute firmware images using a multicast
or broadcast protocol. This architecture does not make recommendations for any 
such protocol. However, given that broadcast may be desirable for some networks,
updates must cause the least disruption possible both in metadata
and firmware transmission. For an update to be broadcast friendly, it cannot rely on link
layer, network layer, or transport layer security. A solution has
to rely on security protection applied to the manifest and firmware image
instead. In addition,
the same manifest must be deliverable to many devices, both those
to which it applies and those to which it does not, without a
chance that the wrong device will accept the update. Considerations
that apply to network broadcasts apply equally to the use of
third-party content distribution networks for payload distribution.</t>

<figure title="Architecture." anchor="arch-figure"><artwork><![CDATA[
                                                      +----------+
                                                      |          |
                                                      |  Author  |
                                                      |          |
                                                      +----------+
                       Firmware + Manifest                 |
              +----------------------------------+         | Firmware +
              |                                  |         | Manifest
              |                               ---+-------  |
              |                           ----   |       --|-
              |                         //+----------+     | \\
             -+--                      // |          |     |   \
        ----/ |  ----                |/   | Firmware |<-+  |    \
      //      |      \\              |    | Server   |  |  |     \
     /        |        \             /    |          |  +  +      \
    /         |         \           /     +----------+   \ /       |
   / +--------+--------+ \         /                      |        |
  /  |        v        |  \       /                       v        |
 |   | +------------+  |   |     |          +----------------+      |
 |   | |  Firmware  |  |                    |     Device     |      |
 |   | |  Consumer  |  |   |     |          |     Management |      |
|    | +------------+  |    |    |          |                |      |
|    | +------------+  |    |    |          |    +--------+  |      |
|    | |  Status    |<-+--------------------+->  |        |  |      |
|    | |  Tracker   |  |    |    |          |    | Status |  |      |
|    | |  Client    |  |    |    |          |    | Tracker|  |     |
 |   | +------------+  |   |     |          |    | Server |  |     |
 |   |    Device       |   |      |         |    +--------+  |     |
 |   +-----------------+   |       \        |                |    /
  \                       /         \       +----------------+   /
   \       Network       /           \                          /
    \     Operator      /             \     Device Operator    /
      \\             //                \ \                   //
        ----     ----                     ----           ----
            -----                             -----------
]]></artwork></figure>

<t>Firmware images and manifests may be conveyed as a bundle or detached. The 
manifest must support both approaches.</t>

<t>For distribution as a bundle, the firmware image is embedded into the manifest.
This is a useful approach for deployments where devices are not connected
to the Internet and cannot contact a dedicated firmware server for the firmware
download. It is also applicable when the firmware update happens via a
USB sticks or short range radio technologies (such as Bluetooth Smart).</t>

<t>Alternatively, the manifest is distributed detached from the firmware image. 
Using this approach, the firmware consumer is presented with the manifest first 
and then needs to obtain one or more firmware images as dictated in the 
manifest.</t>

<t>The pre-authorisation step involves verifying whether the entity
signing the manifest is indeed authorized to perform an update.
The firmware consumer must also determine whether it should fetch and
process a firmware image, which is referenced in a manifest.</t>

<t>A dependency resolution phase is needed when more than one
component can be updated or when a differential update is used.
The necessary dependencies must be available prior to installation.</t>

<t>The download step is the process of acquiring a local copy of the
firmware image.  When the download is client-initiated, this means
that the firmware consumer chooses when a download occurs and initiates
the download process.  When a download is server-initiated,
this means that the status tracker tells
the device when to download or that it initiates the transfer
directly to the firmware consumer. For example, a download from an
HTTP/1.1-based firmware server is client-initiated. Pushing a manifest
and firmware image to the Package resource of the LwM2M
Firmware Update object <xref target="LwM2M"/> is server-initiated update.</t>

<t>If the firmware consumer has downloaded a new firmware image and is ready to
install it, to initiate the installation, it may 
- either need to wait for a trigger from the status tracker, 
- or trigger the update automatically, 
- or go through a more complex decision making process to determine 
the appropriate timing for an update. Sometimes the final decision may 
require confirmation of the user of the device for safety reasons.</t>

<t>Installation is the act of processing the payload into a format that
the IoT device can recognise and the bootloader is responsible for
then booting from the newly installed firmware image.</t>

</section>
<section anchor="bootloader" title="The Bootloader">

<t><xref target="architecture"/> describes the steps for getting the firmware image and the manifest
from the author to the firmware consumer on the IoT device. Once the firmware consumer 
has retrieved and successfully processed the manifest and the firmware image it needs 
to hand control over to the bootloader.</t>

<t>In most cases this requires the MCU to restart. Once the
MCU has initiated a restart, the bootloader determines whether a newly available 
firmware image should be executed.</t>

<t>A power failure at any time during a firmware update must not cause a failure 
of the device. Equally, adverse network conditions during an update must not 
cause the failure of the device.</t>

<t>One way to achieve this functionality is to provide a minimum of two storage 
locations for firmware. An alternative approach is to use a second stage 
bootloader with build-in full featured firmware update functionality such 
that it is possible to return to the update process after power down.</t>

<t>Assuming the first approach, there are (at least) three firmware images available
on the device:</t>

<t><list style="symbols">
  <t>First, the bootloader is also firmware. If a bootloader is updatable then its 
firmware image is treated like any other application firmware image.</t>
  <t>Second, the firmware image that has to be replaced is still available on the 
device as a backup in case the freshly downloaded firmware image does not 
boot correctly.</t>
  <t>Third, there is the newly downloaded firmware image.</t>
</list></t>

<t>Since many low end IoT devices use non-relocatable code, 
the bootloader needs to copy the newly downloaded application firmware image 
into the location of the old application firmware image and vice versa.</t>

<t>The boot process is security sensitive. An attacker will typically try to 
retrieve a firmware image from the device for reverse engineering or will try to get 
the bootloader to excute an attacker-modified firmware image. The
bootloader will therefore have to perform security checks on the
firmware image before it can be booted. These security checks by the
bootloader happen in addition to the security checks that took place
when the firmware image and the manifest were downloaded by the firmware consumer.</t>

<t>Throughout this document we assume that the bootloader itself is
distinct from the role of the firmware consumer and therefore does not
manage the firmware update process. This may give the impression
that the bootloader itself is a completely separate component,
which is mainly responsible for selecting a firmware image to boot.</t>

<t>The overlap between the firmware update process and the bootloader
functionality comes in two forms, namely</t>

<t><list style="symbols">
  <t>A bootloader must verify the firmware image it boots as
part of the secure boot process. Doing so requires meta-data to be
stored alongside the firmware image so that the bootloader can
cryptographically verify the firmware image before booting it to
ensure it has not been tampered with or replaced. This meta-data
used by the bootloader may well be the same manifest obtained with the
firmware image during the update process (with the severable
fields stripped off).</t>
  <t>An IoT device needs a recovery strategy in case the firmware
update / boot process fails. As mentioned earlier, the recovery 
strategy may include storing two or more application firmware images 
on the device or offering the ability to have a second stage bootloader 
perform the firmware update process again using firmware updates over 
serial, USB or even wireless connectivity like Bluetooth Smart.
In the latter case the firmware consumer functionality is contained in the
second stage bootloader and requires the necessary functionality for
executing the firmware update process, including manifest parsing.</t>
</list></t>

<t>In general, it is assumed that the bootloader itself, or a minimal part of it,
will not be updated since a failed update of the bootloader poses a 
reliability risk.</t>

<t>For a bootloader to offer a secure boot functionality it needs to 
implement the following functionality:</t>

<t><list style="symbols">
  <t>The bootloader needs to fetch the manifest (or manifest-alike headers)
stored in flash memory alongside the firmware image and parse their 
content for subsequent cryptographic verification.</t>
  <t>Cryptographic libraries with hash functions, digital signatures
(for asymmetric crypto), keyed message digests (for symmetric 
crypto) need to be accessible.</t>
  <t>The device needs to have a trust anchor store to verify the 
digital signature. (Alternatively, access to a key store for use 
with the keyed message digest.)</t>
  <t>Ability to expose boot process-related data to the application
firmware (such as to the status tracker).  This allows
to share information about the current firmware version, and the 
status of the firmware update process and whether errors have occurred.</t>
  <t>Produce boot measurements as part of an attestation solution. See 
<xref target="I-D.ietf-rats-architecture"/> for more information. (optional)</t>
  <t>Ability to decrypt firmware images, in case confidentiality protection 
was applied). This requires a solution for key management. (optional)</t>
</list></t>

</section>
<section anchor="device" title="Types of IoT Devices">

<t>There are billions of MCUs used in devices today produced by a large 
number of silicon manufacturers. While MCUs can vary significantly 
in their characteristics, there are a number of similiaries allowing 
us to categorize in groups.</t>

<t>The firmware update architecture, and the manifest format in particular, 
needs to offer enough flexibility to cover these common deployment cases.</t>

<section anchor="single-mcu" title="Single MCU">

<t>The simplest, and currently most common, architecture consists of
a single MCU along with its own peripherals.  These SoCs generally
contain some amount of flash memory for code and fixed data, as
well as RAM for working storage.  A notable characteristic of these 
SoCs is that the primary code is generally execute in place (XIP). 
Due to the non-relocatable nature of the code, the firmware image 
needs to be placed in a specific location in flash since the code 
cannot be executed from an arbitrary location in flash. Hence, then 
the firmware image is updated it is necessary to swap the old and 
the new image.</t>

</section>
<section anchor="single-cpu-with-secure-normal-mode-partitioning" title="Single CPU with Secure - Normal Mode Partitioning">

<t>Another configuration consists of a similar architecture to the
previous, with a single CPU.  However, this CPU supports a security
partitioning scheme that allows memory (in addition to other things)
to be divided into secure and normal mode.  There will generally be
two images, one for secure mode, and one for normal mode.  In this
configuration, firmware upgrades will generally be done by the CPU
in secure mode, which is able to write to both areas of the flash
device. In addition, there are requirements to be able to update
either image independently, as well as to update them together
atomically, as specified in the associated manifests.</t>

</section>
<section anchor="symmetric-multiple-cpus" title="Symmetric Multiple CPUs">

<t>In more complex SoCs with symmetric multi-processing support, advanced
operating systems, such as Linux, are often used. These SoCs frequently
use an external storage medium, such as raw NAND flash or eMMC. Due to
the higher quantity of resources, these devices are often capable of
storing multiple copies of their firmware images and selecting the most
appropriate one to boot. Many SoCs also support bootloaders that are
capable of updating the firmware image, however this is typically a last
resort because it requires the device to be held in the bootloader while
the new firmware is downloaded and installed, which results in down-time
for the device. Firmware updates in this class of device are typically
not done in-place.</t>

</section>
<section anchor="dual-cpu-shared-memory" title="Dual CPU, shared memory">

<t>This configuration has two or more heterogeneous CPUs in a single SoC that 
share memory (flash and RAM).  Generally, there will be a mechanism to prevent 
one CPU from unintentionally accessing memory currently allocated to the other.
Upgrades in this case will typically be done by one of the CPUs, and is 
similar to the single CPU with secure mode.</t>

</section>
<section anchor="dual-cpu-other-bus" title="Dual CPU, other bus">

<t>This configuration has two or more heterogeneous CPUs, each having their own memory.
There will be a communication channel between them, but it will be
used as a peripheral, not via shared memory.  In this case, each CPU
will have to be responsible for its own firmware upgrade.  It is
likely that one of the CPUs will be considered the primary CPU, and will
direct the other CPU to do the upgrade.  This configuration is
commonly used to offload specific work to other CPUs.  Firmware
dependencies are similar to the other solutions above, sometimes
allowing only one image to be upgraded, other times requiring several
to be upgraded atomically.  Because the updates are happening on
multiple CPUs, upgrading the two images atomically is challenging.</t>

</section>
</section>
<section anchor="manifests" title="Manifests">

<t>In order for a firmware consumer to apply an update, it has to make several decisions
using manifest-provided information and data available on the device itself. For more 
detailed information and a longer list of information elements in the manifest consult the 
information model specification <xref target="I-D.ietf-suit-information-model"/>, which offers justifications 
for each element, and the manifest, see <xref target="I-D.ietf-suit-manifest"/>}, for details about how this 
information is included in the manifest.</t>

<t><xref target="manifest-info"/> provides examples of decisions to be made.</t>

<texttable title="Firmware Update Decisions." anchor="manifest-info">
      <ttcol align='right'>Decision</ttcol>
      <ttcol align='left'>Information Elements</ttcol>
      <c>Should I trust the author of the firmware?</c>
      <c>Trust anchors and authorization policies on the device</c>
      <c>Has the firmware been corrupted?</c>
      <c>Digital signature and MAC covering the firmware image</c>
      <c>Does the firmware update apply to this device?</c>
      <c>Conditions with Vendor ID, Class ID and Device ID</c>
      <c>Is the update older than the active firmware?</c>
      <c>Sequence number in the manifest (1)</c>
      <c>When should the device apply the update?</c>
      <c>Wait directive</c>
      <c>How should the device apply the update?</c>
      <c>Manifest commands</c>
      <c>What kind of firmware binary is it?</c>
      <c>Unpack algorithms to interpret a format.</c>
      <c>Where should the update be obtained?</c>
      <c>Dependencies on other manifests and firmware image URI in Manifest</c>
      <c>Where should the firmware be stored?</c>
      <c>Storage Location and Component Identifier</c>
</texttable>

<t>(1): A device presented with an old, but valid manifest and firmware
must not be tricked into installing such firmware since a
vulnerability in the old firmware image may allow an attacker to
gain control of the device.</t>

<t>Keeping the code size and complexity of a manifest parsers small is important 
for constrained IoT devices. Since the manifest parsing code may 
also be used by the bootloader it is part of the trusted computing base.</t>

<t>A manifest may not only be used to protect firmware images but also personalization data
related to firmware or software. Trusted Execution Environments (TEEs), for example,
benefit from a protocol for managing the lifecycle of trusted
applications (TAs) running inside a TEE. TEEs may obtain TAs
from different authors and those TAs may require personalization data,
such as payment information, to be securely conveyed to the TEE.</t>

</section>
<section anchor="securing" title="Securing Firmware Updates">

<t>Using firmware updates to fix vulnerabilities in devices is important but securing this 
update mechanism is equally important since security problems are exacerbated. Failure 
to secure the firmware update process will help attackers to take control over devices.</t>

<t>End-to-end security mechanisms are used to protect the firmware
image and the manifest. The following assumptions are made to allow 
the firmware consumer to verify the received firmware image and 
manifest before updating software:</t>

<t><list style="symbols">
  <t>Authentication ensures that the device can cryptographically identify
the author(s) creating firmware images and manifests. Authenticated
identities may be used as input to the authorization process. Not all 
entities creating and signing manifests have the same
permissions. A device needs to determine whether the requested action
is indeed covered by the permission of the party that signed the manifest.
Informing the device about the permissions of the different parties
also happens in an out-of-band fashion and is also a duty of the
Trust Provisioning Authority.</t>
  <t>Integrity protection ensures that no third party can modify the manifest
or the firmware image. To accept an update, a device needs to verify the signature covering
the manifest. There may be one or multiple manifests that need to be
validated, potentially signed by different parties. The device needs
to be in possession of the trust anchors to verify those signatures.
Installing trust anchors to devices via the Trust Provisioning Authority
happens in an out-of-band fashion prior to the firmware update process.</t>
  <t>For confidentiality protection of the firmware image, it must be done in such a
way that the intended firmware consumer(s) can decrypt it. The information
that is encrypted individually for each device must maintain
friendliness to Content Distribution Networks, bulk storage, and
broadcast protocols. For confidentiality protection of firmware images the author needs
to be in possession of the certificate/public key or a pre-shared key
of a device. The use of confidentiality protection of firmware images
is optional.</t>
</list></t>

<t>A manifest specification must support different cryptographic algorithms
and algorithm extensibility. Due of the nature of
unchangeable code in ROM for bootloaders the use of
post-quantum secure signature mechanisms, such as hash-based
signatures <xref target="RFC8778"/>, are attractive. These
algorithms maintain security in presence of quantum computers.</t>

<t>When a device obtains a monolithic firmware image from a single author
without any additional approval steps then the authorization flow is
relatively simple. There are, however, other cases where more complex
policy decisions need to be made before updating a device.</t>

<t>In this architecture the authorization policy is separated from
the underlying communication architecture. This is accomplished
by separating the entities from their permissions. For example,
an author may not have the authority to install a firmware image
on a device in critical infrastructure without the authorization
of a device operator. In this case, the device may be programmed
to reject firmware updates unless they are signed both by the
firmware author and by the device operator.</t>

<t>Alternatively, a device may trust precisely one entity, which
does all permission management and coordination. This entity
allows the device to offload complex permissions
calculations for the device.</t>

</section>
<section anchor="example" title="Example">

<t><xref target="firmware-update"/> illustrates an example message flow
for distributing a firmware image to a device. The firmware
and manifest are stored on the same firmware server and 
distributed in a detached manner.</t>

<figure title="First Example Flow for a Firmware Upate." anchor="firmware-update"><artwork><![CDATA[
+--------+    +-----------------+    +-----------------------------+
|        |    | Firmware Server |    |         IoT Device          |
| Author |    | Status Tracker  |    | +------------+ +----------+ |
+--------+    | Server          |    | |  Firmware  | |Bootloader| |
  |           +-----------------+    | |  Consumer  | |          | |
  |                   |              | +------------+ +----------+ |
  |                   |              |      |                |     |
  |                   |              |  +-----------------------+  |
  | Create Firmware   |              |  | Status Tracker Client |  |
  |--------------+    |              |  +-----------------------+  |
  |              |    |               `''''''''''''''''''''''''''''
  |<-------------+    |                     |        |       |
  |                   |                     |        |       |
  | Upload Firmware   |                     |        |       |
  |------------------>|                     |        |       |
  |                   |                     |        |       |
  | Create Manifest   |                     |        |       |
  |---------------+   |                     |        |       |
  |               |   |                     |        |       |
  |<--------------+   |                     |        |       |
  |                   |                     |        |       |
  | Sign Manifest     |                     |        |       |
  |-------------+     |                     |        |       |
  |             |     |                     |        |       |
  |<------------+     |                     |        |       |
  |                   |                     |        |       |
  | Upload Manifest   |                     |        |       |
  |------------------>|  Notification of    |        |       |
  |                   |  new firmware image |        |       |
  |                   |----------------------------->|       |
  |                   |                     |        |       |
  |                   |                     |Initiate|       |
  |                   |                     | Update |       |
  |                   |                     |<-------|       |
  |                   |                     |        |       |
  |                   |   Query Manifest    |        |       |
  |                   |<--------------------|        .       |
  |                   |                     |        .       |
  |                   |   Send Manifest     |        .       |
  |                   |-------------------->|        .       |
  |                   |                     | Validate       |
  |                   |                     | Manifest       |
  |                   |                     |--------+       |
  |                   |                     |        |       |
  |                   |                     |<-------+       |
  |                   |                     |        .       |
  |                   |  Request Firmware   |        .       |
  |                   |<--------------------|        .       |
  |                   |                     |        .       |
  |                   | Send Firmware       |        .       |
  |                   |-------------------->|        .       |
  |                   |                     | Verify .       |
  |                   |                     | Firmware       |
  |                   |                     |--------+       |
  |                   |                     |        |       |
  |                   |                     |<-------+       |
  |                   |                     |        .       |
  |                   |                     | Store  .       |
  |                   |                     | Firmware       |
  |                   |                     |--------+       |
  |                   |                     |        |       |
  |                   |                     |<-------+       |
  |                   |                     |        .       |
  |                   |                     |        .       |
  |                   |                     |        .       |
  |                   |                     |        |       |
  |                   |                     | Update |       |
  |                   |                     |Complete|       |
  |                   |                     |------->|       |
  |                   |                              |       |
  |                   |  Firmware Update Completed   |       |
  |                   |<-----------------------------|       |
  |                   |                              |       |
  |                   |  Reboot                      |       |
  |                   |----------------------------->|       |
  |                   |                     |        |       |
  |                   |                     |        |       |
                      |                     |        |Reboot |
  |                   |                     |        |------>|
  |                   |                     |        |       |
  |                   |                     |        .       |
  |                   |                 +---+----------------+--+
  |                   |                S|   |                |  |
  |                   |                E|   | Verify         |  |
  |                   |                C|   | Firmware       |  |
  |                   |                U|   | +--------------|  |
  |                   |                R|   | |              |  |
  |                   |                E|   | +------------->|  |
  |                   |                 |   |                |  |
  |                   |                B|   | Activate new   |  |
  |                   |                O|   | Firmware       |  |
  |                   |                O|   | +--------------|  |
  |                   |                T|   | |              |  |
  |                   |                 |   | +------------->|  |
  |                   |                P|   |                |  |
  |                   |                R|   | Boot new       |  |
  |                   |                O|   | Firmware       |  |
  |                   |                C|   | +--------------|  |
  |                   |                E|   | |              |  |
  |                   |                S|   | +------------->|  |
  |                   |                S|   |                |  |
  |                   |                 +---+----------------+--+
  |                   |                     |        .       |
  |                   |                     |        |       |
  |                   |                     .        |       |
  |                   |  Device running new firmware |       |
  |                   |<-----------------------------|       |
  |                   |                     .        |       |
  |                   |                              |       |
]]></artwork></figure>

<t><xref target="firmware-update2"/> shows an exchange that starts with the 
status tracker querying the device for its current firmware version. 
Later, a new firmware version becomes available and since this 
device is running an older version the status tracker server interacts
with the device to initiate an update.</t>

<t>The manifest and the firmware are stored on different servers in this 
example. When the device processes the manifest it learns where to 
download the new firmware version. The firmware consumer downloads 
the firmware image with the newer version X.Y.Z after successful validation
of the manifest. Subsequently, a reboot is initiated and the secure
boot process starts. Finally, the device reports the successful boot 
of the new firmware version.</t>

<figure title="Second Example Flow for a Firmware Upate." anchor="firmware-update2"><artwork><![CDATA[
 +---------+   +-----------------+    +-----------------------------+
 | Status  |   | Firmware Server |    | +------------+ +----------+ |
 | Tracker |   | Status Tracker  |    | |  Firmware  | |Bootloader| |
 | Server  |   | Server          |    | |  Consumer  | |          | |
 +---------+   +-----------------+    | |  +Status   | +----------+ |
      |                |              | |  Tracker   |        |     |
      |                |              | |  Client    |        |     |
      |                |              | +------------+        |     |
      |                |              |      |  IoT Device    |     |
      |                |               `''''''''''''''''''''''''''''
      |                |                     |                |
      |        Query Firmware Version        |                |
      |------------------------------------->|                |
      |        Firmware Version A.B.C        |                |
      |<-------------------------------------|                |
      |                |                     |                |
      |         <<some time later>>          |                |
      |                |                     |                |
    _,...._         _,...._                  |                |
  ,'       `.     ,'       `.                |                |
 |   New     |   |   New     |               |                |
 \ Manifest  /   \ Firmware  /               |                |
  `.._   _,,'     `.._   _,,'                |                |
      `''             `''                    |                |
      |            Push manifest             |                |
      |----------------+-------------------->|                |
      |                |                     |                |
      |                '                     |                '
      |                |                     | Validate       |
      |                |                     | Manifest       |
      |                |                     |---------+      |
      |                |                     |         |      |
      |                |                     |<--------+      |
      |                | Request firmware    |                |
      |                | X.Y.Z               |                |
      |                |<--------------------|                |
      |                |                     |                |
      |                | Firmware X.Y.Z      |                |
      |                |-------------------->|                |
      |                |                     |                |
      |                |                     | Verify         |
      |                |                     | Firmware       |
      |                |                     |--------------+ |
      |                |                     |              | |
      |                |                     |<-------------+ |
      |                |                     |                |
      |                |                     | Store          |
      |                |                     | Firmware       |
      |                |                     |-------------+  |
      |                |                     |             |  |
      |                |                     |<------------+  |
      |                |                     |                |
      |                |                     |                |
      |                |                     | Trigger Reboot |
      |                |                     |--------------->|
      |                |                     |                |
      |                |                     |                |
      |                |                     | __..-------..._'
      |                |                    ,-'               `-.
      |                |                   |      Secure Boot    |
      |                |                   `-.                 _/
      |                |                     |`--..._____,,.,-'
      |                |                     |                |
      | Device running firmware X.Y.Z        |                |
      |<-------------------------------------|                |
      |                |                     |                |
      |                |                     |                |
]]></artwork></figure>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document describes terminology, requirements and an architecture for 
firmware updates of IoT devices. The content of the document is thereby 
focused on improving security of IoT devices via firmware update mechanisms
and informs the standardization of a manifest format.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their feedback:</t>

<t><list style="symbols">
  <t>Geraint Luff</t>
  <t>Amyas Phillips</t>
  <t>Dan Ros</t>
  <t>Thomas Eichinger</t>
  <t>Michael Richardson</t>
  <t>Emmanuel Baccelli</t>
  <t>Ned Smith</t>
  <t>Jim Schaad</t>
  <t>Carsten Bormann</t>
  <t>Cullen Jennings</t>
  <t>Olaf Bergmann</t>
  <t>Suhas Nandakumar</t>
  <t>Phillip Hallam-Baker</t>
  <t>Marti Bolivar</t>
  <t>Andrzej Puzdrowski</t>
  <t>Markus Gueller</t>
  <t>Henk Birkholz</t>
  <t>Jintao Zhu</t>
  <t>Takeshi Takahashi</t>
  <t>Jacob Beningo</t>
  <t>Kathleen Moriarty</t>
  <t>Bob Briscoe</t>
</list></t>

<t>We would also like to thank the WG chairs, Russ Housley, David Waltermire,
Dave Thaler for their support and their reviews.</t>

</section>


  </middle>

  <back>


    <references title='Informative References'>





<reference  anchor="RFC8240" target='https://www.rfc-editor.org/info/rfc8240'>
<front>
<title>Report from the Internet of Things Software Update (IoTSU) Workshop 2016</title>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<date year='2017' month='September' />
<abstract><t>This document provides a summary of the Internet of Things Software Update (IoTSU) Workshop that took place at Trinity College Dublin, Ireland on the 13th and 14th of June, 2016.  The main goal of the workshop was to foster a discussion on requirements, challenges, and solutions for bringing software and firmware updates to IoT devices. This report summarizes the discussions and lists recommendations to the standards community.</t><t>Note that this document is a report on the proceedings of the workshop.  The views and positions documented in this report are those of the workshop participants and do not necessarily reflect IAB views and positions.</t></abstract>
</front>
<seriesInfo name='RFC' value='8240'/>
<seriesInfo name='DOI' value='10.17487/RFC8240'/>
</reference>



<reference  anchor="RFC6024" target='https://www.rfc-editor.org/info/rfc6024'>
<front>
<title>Trust Anchor Management Requirements</title>
<author initials='R.' surname='Reddy' fullname='R. Reddy'><organization /></author>
<author initials='C.' surname='Wallace' fullname='C. Wallace'><organization /></author>
<date year='2010' month='October' />
<abstract><t>A trust anchor represents an authoritative entity via a public key and associated data.  The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative.  A relying party uses trust anchors to determine if a digitally signed object is valid by verifying a digital signature using the trust anchor's public key, and by enforcing the constraints expressed in the associated data for the trust anchor.  This document describes some of the problems associated with the lack of a standard trust anchor management mechanism and defines requirements for data formats and push-based protocols designed to address these problems.  This  document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract>
</front>
<seriesInfo name='RFC' value='6024'/>
<seriesInfo name='DOI' value='10.17487/RFC6024'/>
</reference>



<reference  anchor="RFC7228" target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='M.' surname='Ersue' fullname='M. Ersue'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2014' month='May' />
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference  anchor="RFC8778" target='https://www.rfc-editor.org/info/rfc8778'>
<front>
<title>Use of the HSS/LMS Hash-Based Signature Algorithm with CBOR Object Signing and Encryption (COSE)</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='2020' month='April' />
<abstract><t>This document specifies the conventions for using the Hierarchical Signature System (HSS) / Leighton-Micali Signature (LMS) hash-based signature algorithm with the CBOR Object Signing and Encryption (COSE) syntax. The HSS/LMS algorithm is one form of hash-based digital signature; it is described in RFC 8554.</t></abstract>
</front>
<seriesInfo name='RFC' value='8778'/>
<seriesInfo name='DOI' value='10.17487/RFC8778'/>
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>An Information Model for Firmware Updates in IoT Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='June' day='2' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality.  One component of such a firmware update is a concise and machine- processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-07' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-07.txt' />
</reference>



<reference anchor="I-D.ietf-teep-architecture">
<front>
<title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>

<author initials='M' surname='Pei' fullname='Mingliang Pei'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<author initials='D' surname='Wheeler' fullname='David Wheeler'>
    <organization />
</author>

<date month='July' day='13' year='2020' />

<abstract><t>A Trusted Execution Environment (TEE) is an environment that enforces that any code within that environment cannot be tampered with, and that any data used by such code cannot be read or tampered with by any code outside that environment.  This architecture document motivates the design and standardization of a protocol for managing the lifecycle of trusted applications running inside such a TEE.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-12' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-teep-architecture-12.txt' />
</reference>



<reference anchor="I-D.ietf-suit-manifest">
<front>
<title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<author initials='K' surname='Zandberg' fullname='Koen Zandberg'>
    <organization />
</author>

<date month='July' day='13' year='2020' />

<abstract><t>This specification describes the format of a manifest.  A manifest is a bundle of metadata about the firmware for an IoT device, where to find the firmware, the devices to which it applies, and cryptographic information protecting the manifest.  Firmware updates and secure boot both tend to use sequences of common operations, so the manifest encodes those sequences of operations, rather than declaring the metadata.  The manifest also serves as a building block for secure boot.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-09' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-manifest-09.txt' />
</reference>



<reference anchor="I-D.ietf-rats-architecture">
<front>
<title>Remote Attestation Procedures Architecture</title>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<author initials='M' surname='Richardson' fullname='Michael Richardson'>
    <organization />
</author>

<author initials='N' surname='Smith' fullname='Ned Smith'>
    <organization />
</author>

<author initials='W' surname='Pan' fullname='Wei Pan'>
    <organization />
</author>

<date month='September' day='1' year='2020' />

<abstract><t>In network protocol exchanges, it is often the case that one entity (a Relying Party) requires evidence about a remote peer to assess the peer's trustworthiness, and a way to appraise such evidence.  The evidence is typically a set of claims about its software and hardware platform.  This document describes an architecture for such remote attestation procedures (RATS).</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-rats-architecture-06' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-rats-architecture-06.txt' />
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC8392" target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='E.' surname='Wahlstroem' fullname='E. Wahlstroem'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2018' month='May' />
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>


<reference anchor="LwM2M" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf">
  <front>
    <title>Lightweight Machine to Machine Technical Specification, Version 1.0.2</title>
    <author initials="." surname="OMA" fullname="Open Mobile Alliance">
      <organization></organization>
    </author>
    <date year="2018" month="February" day="09"/>
  </front>
  <format type="PDF" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf"/>
</reference>


    </references>




  </back>

<!-- ##markdown-source:
H4sIAKfVdl8AA+1963Lc2JHmf0bwHRDWD5OjqmK3PDO2tb2eoSi1W57WZUTK
PTvREW1UAcWCiQLKAIrssqSNfY19vX2SzS8v5wKgKFJqu3cjhmG3yCogzzl5
8uQ980yn08ODrujK/HFymnxdNOubtMmTt5ss7fLktFmsii5fdFv6bFk3yfOq
y5sq75J6mVysiuqyPTxI5/Mmv77b6/XF4UFWL6p0TeNlTbrspkXeLafttuim
afD49MtfHR4sCMhl3eweJ0W1rA8PDg+KTfM46Zpt2z364ovffvGIRm/y9HFy
ni+2TdHtDg9u6ubqsqm3G/rw7XMa7irf0WfZYzf36VOMC2htl1bZD2lZVzSb
XU5r2RSPDw+SpFku8qztdqV9niRdvQh/L6osrzr3SVs3XZMvW//Bbh3/3TXF
wj+/qNdret9/X1RlUQWj5T9207JouykBmtclPTit/+EhviL0rdPNhnCvT6fb
blU3mPcU3/NPUdEbT2bJi7pJK/epoP1Jk1dZWvW+q5vLtCr+mnZFXdFeNuvk
22JNu5G5J/J1WpTu9Rm//q9ps57RYoDN/vDfzJKLdrGql3lVXPbm8E1aVXk7
9v2d57FiELPOgbhtLk9nNO/6po+Kp+l1kfW+iSfwbVGlTd0fO8N7szne+9eS
n5jRa2MDv6A9yJsiXfRGflGUNc28/2U8+FldtduSiLTrT2Atr//rml+3VeOU
NGt6+TpnMn7z9dlvHv3jF/b7P3/x6B/t918/evQb98yvfy2/P58+nfnj6KDV
1XRdZ3kZP9Pl+SY6siMg1rSYZd528VdN2rXDN8OJYIL/9OVv3ee/+u0j/v3b
mxePXjwWZHRpc5nTiVp13ebxycnNzc2s3uTVup4XZZ6WZZFWixzbctLk9EGb
n3xbXK66mxz/JTAnf/zyhy9+eDR99MWXv/ni0Re/nZ6evHpxOr04n8bPTQfP
zTbZUucgjPMXwRvJi5QWVuXEJNyvF/liVRWLtEzON/miWNKvwOok+WPetPRL
8uXsi9mjXwhMf5w9FdHE7G8hn1e0UjrAWGpyqmuVJ8B4HyeY7PSLR9Mvfiuf
yk46oK+ffv3zIe7wYDqdJumcWGK6YD78x21Z5U1K4xddQWzhpuhWI6ImOSL5
cZxk+XWxoKdW6XWeNGnRgjd0qzyp8jxjMZMmNPMinRNyiMEnLYQDCSCTTluR
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
JZ2zUdMCIFb1cW71Xx8F6i8P4zplXDW6m8QtG7lqLi5a4vUE1TWu7/0y7kBx
scpd63CrNbah5aKcJp/vuI/Fgsu20f5nze18uA+VriIGy5Wpg4uvXFGd1JlI
6abdiUafpE1mVVtxfw3rvyKoO11cVfVNmWdSs8Mo+y5PbrhDCjdY50rWtLoS
f6irzpfeDK4MB90P8zzDhUNaNJ/8PkeTji75drtc8gen613aJq9X6K68afmj
p4ToN7X8frGq1/T9s2KBxqNoc0kfvqC/0rxM3uDfJmvhiqSPn6ExzZY+f4J6
Z4LHn74kjJ6vi27Ff/2hWCfn9Faa8Z9nadOio+MTrL8SMGdb9N1K/pDzwZZp
vCrTZfIkby7dU+db9NF6CaRebdepTEyXkXyDG/jW0yfplc0Yxcw0Sllc66On
Vdb8Nf8zWYp/zZr6pr0q7MGrbZv8npZR6rvf5ITnJ0VztarLv+oiqi6tk/9c
bQVHNEy7KvBvihpKgfSHdFHPac5YRM2f/FvarUq0T3pRNwVKyfnTJ3iqKdpF
nUf7zOXsw83+7vfoTFY07SR5s23b5Jt625Y5HZen6XWRJd/xJWRrOjeTw4On
qLW7WKWlvz64aFyxqvqBC76zqMhvpA6TeB7fUHV48H8BO3GEIhLWAAA=

-->

</rfc>

