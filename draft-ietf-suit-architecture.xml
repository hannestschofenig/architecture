<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-architecture-13" category="info">

  <front>
    <title abbrev="A Firmware Update Architecture for IoT">A Firmware Update Architecture for Internet of Things</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="D." surname="Brown" fullname="David Brown">
      <organization>Linaro</organization>
      <address>
        <email>david.brown@linaro.org</email>
      </address>
    </author>
    <author initials="M." surname="Meriac" fullname="Milosch Meriac">
      <organization>Consultant</organization>
      <address>
        <email>milosch@meriac.com</email>
      </address>
    </author>

    <date year="2020" month="October" day="01"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Vulnerabilities with Internet of Things (IoT) devices have raised
the need for a solid and secure firmware update mechanism that is
also suitable for constrained devices. Incorporating such update
mechanism to fix vulnerabilities, to update configuration settings
as well as adding new functionality is recommended by security
experts.</t>

<t>In addition to the definition of terminology and an architecture
this document motivates the standardization of a manifest format
as transport-agnostic means for describing and protecting firmware 
updates.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Firmware updates can help to fix security vulnerabilities and are 
considered to be an important building block in securing IoT devices. 
Due to rising concerns about insecurre IoT devices the Internet
Architecture Board (IAB) organized a ‘Workshop on Internet of Things
(IoT) Software Update (IOTSU)’, which took place at Trinity College
Dublin, Ireland on the 13th and 14th of June, 2016 to take a look at
the bigger picture. A report about this workshop can be found at
<xref target="RFC8240"/>. The workshop revealed a number of challenges for developers
and the need to initiate standardization activites. The workshop
subsequently led to the formation of the IETF SUIT working group.</t>

<t>Developing secure Internet of Things (IoT) devices is not an easy 
task and supporting a firmware update solution requires skillful 
engineers. Once the device is deployed, firmware updates play a 
critical part in its lifecycle management, particularly when devices have a 
long lifetime, are deployed in remote or inaccessible areas where manual
intervention is cost prohibitive or otherwise difficult. Solutions 
for IoT devices are expected to work automatic, i.e. without user 
involvement. Automatic updates that do not require human intervention 
are key to a scalable solution for fixing software vulnerabilities.</t>

<t>Updates to the firmware of an IoT device are not only done to fix 
bugs, but they can also add new functionality, and to re-configure
the device to work in new environments or to behave differently in 
an already deployed context.</t>

<t>The firmware update process has to ensure that</t>

<t><list style="symbols">
  <t>The firmware image is authenticated and integrity protected.
Attempts to flash a maliciously modified firmware image or an image from
an unknown, untrusted source are prevented.</t>
  <t>The firmware image can be confidentiality protected so that
attempts by an adversary to recover the plaintext binary can
be prevented or at least made more difficult. Obtaining the firmware is often one of
the first steps to mount an attack since it gives the adversary
valuable insights into used software libraries, configuration
settings and generic functionality (even though reverse
engineering the binary can be a tedious process).</t>
</list></t>

<t>In examples this document uses asymmetric cryptography 
because it is the preferred approach by many IoT deployments. The 
use of symmetric credentials is also supported and can be used by<vspace />
very constrained IoT devices.</t>

<t>While the standardization work has been informed by and optimised for firmware
update use cases of Class 1 devices (according to the device class
definitions in RFC 7228 <xref target="RFC7228"/>) devices, there is nothing in
the architecture that restricts its use to only these constrained IoT devices.
Moreover, this architecture is not limited to managing software updates,
but can also be applied to managing the delivery of arbitrary data, such
as configuration information and keys. Unlike higher end devices, like 
laptops and desktop PCs, many IoT devices do not have user interfaces 
and support for unattended updates are therefore essential for the design
of a practical solution. Constrained IoT devices often use a 
software engineering model where a developer is responsible for creating
and compiling all software running on the device into a single, monolithic 
firmware image. On higher end devices application software is, on the other 
hand, often downloaded separately and even obtained from developers different 
to the developers of the lower level software. The details for how to obtain 
those application layer software binaries then depends heavily on the platform, 
programming language uses and the sandbox the software is executed in.</t>

<t>While the IETF standardization work has been focused on the 
manifest format, a fully interoperable solution needs more than a standardized 
manifest. For example, protocols for transferring firmware images 
and manifests to the device need to be available as well as the status tracker 
functionality. These building blocks have been developed by various organizations 
under the umbrella of an IoT device management solution. The LwM2M protocol is one 
IoT device management protocol.</t>

<t>There are, however, several areas that fall outside the scope of the IETF
and other standards organizations but need to be considered by firmware authors, 
as well as device and network operators. Here are some of them, as highlighted during 
the IOTSU workshop:</t>

<t><list style="symbols">
  <t>Installing firmware updates in a robust fashion so that the
update does not break the device functionality of the environment
this device operates in. This requires proper testing and offering 
recovery strategies when a firmware update is unsuccessful.</t>
  <t>Making firmware updates available in a timely fashion considering the
complexity of the decision making process for updating devices,
potential re-certification requirements, the length of a supply chain 
an update needs to go through before it reaches the end customer, 
and the need for user consent to install updates.</t>
  <t>Ensuring an energy efficient design of a battery-powered IoT devices because a 
firmware update (particularly writing the firmware image to flash).</t>
  <t>Creating incentives for device operators to use a firmware update mechanism and to 
demand the integration of a firmware update mechanism from IoT device vendors.</t>
</list></t>

<t>This document is structured as follows. <xref target="terminology"/> offers terminology for 
talking about firmware updates supporting the standardization of a manfest format.</t>

</section>
<section anchor="terminology" title="Conventions and Terminology">

<t>This document uses the following terms:</t>

<t><list style="symbols">
  <t>Manifest: The manifest contains meta-data about the firmware
image. The manifest is protected against modification and
provides information about the author.</t>
  <t>Firmware Image: The firmware image, or image, is a binary
that may contain the complete software of a device or a subset of
it. The firmware image may consist of multiple images, if
the device contains more than one microcontroller. Often
it is also a compressed archive that contains code,
configuration data, and even the entire file system. The
image may consist of a differential update for performance
reasons. Firmware is the more universal term. The terms,
firmware image, firmware, and image, are used in this
document and are interchangeable. The term application firmware
image is used to differentiate it from a firmware image that 
contains the bootloader. An application firmware image, as the 
name indicates, contains the application program often including 
all the necessary code to run it (such as protocol stacks, and 
embedded operating system).</t>
  <t>Software: The terms “software” and “firmware” are used
interchangeably.</t>
  <t>Microcontroller (MCU for microcontroller unit): An MCU is a
compact integrated circuit designed for use in embedded systems.
A typical microcontroller includes a processor, memory (RAM and
flash), input/output (I/O) ports and other features connected via
some bus on a single chip. The term ’system on chip (SoC)’ is 
often used interchangeably with MCU, but MCU tends to imply more 
limited peripheral functions.</t>
  <t>System on Chip (SoC): An SoC is an integrated circuit that
integrates all components of a computer, such as CPU, memory,
input/output ports, secondary storage, etc.</t>
  <t>Homogeneous Storage Architecture (HoSA): A device that stores
all firmware components in the same way, for example in a file
system or in flash memory.</t>
  <t>Heterogeneous Storage Architecture (HeSA): A device that
stores at least one firmware component differently from the rest,
for example a device with an external, updatable radio, or a
device with internal and external flash memory.</t>
  <t>Trusted Execution Environments (TEEs): An execution environment
that runs alongside of, but is isolated from, an REE. For more 
information about TEEs see <xref target="I-D.ietf-teep-architecture"/>.</t>
  <t>Rich Execution Environment (REE): An environment that is provided
and governed by a typical OS (e.g., Linux, Windows, Android, iOS),
potentially in conjunction with other supporting operating systems
and hypervisors; it is outside of the TEE.  This environment and
applications running on it are considered un-trusted.</t>
  <t>Trusted applications (TAs): An application component that runs in
a TEE.</t>
  <t>Trust Anchor: A trust anchor, as defined in <xref target="RFC6024"/>, represents 
an authoritative entity via a public key and associated data.  The 
public key is used to verify digital signatures, and the associated 
data is used to constrain the types of information for which the 
trust anchor is authoritative.”</t>
  <t>Trust Anchor Store: A trust anchor store, as defined in <xref target="RFC6024"/>, 
is a set of one or more trust anchors stored in a device.  A device 
may have more than one trust anchor store, each of which may be used 
by one or more applications. A trust anchor store must resist 
modification against unauthorized insertion, deletion, and modification.</t>
</list></t>

<section anchor="stakeholders" title="Stakeholders">

<t>The following stakeholders are used in this document:</t>

<t><list style="symbols">
  <t>Author: The author is the entity that creates the firmware image.
There may be multiple authors involved in producing firmware running 
on an IoT device. <xref target="devices"/> talks about those IoT device deployment cases.</t>
  <t>Device Operator: The device operator is responsible for the day-to-day operation
of a fleet of IoT devices. Customers of IoT devices, as the owners of 
IoT devices - such as enterprise customers or end users, interact 
with their IoT devices indirectly through the device operator via 
web or smart phone apps.</t>
  <t>Network Operator: The network operator is responsible for the operation of a
network to which IoT devices connect.</t>
  <t>Trust Provisioning Authority (TPA): The TPA distributes
trust anchors and authorization policies to various stakeholders. 
The TPA may also delegate rights to stakeholders. For example,
in some cases, the Original Design Manufacturer (ODM), which is a
company that designs and manufactures a product, may act as a
TPA and may decide to remain in full control over the firmware
update process of their products.</t>
</list></t>

<section anchor="functions" title="Functions">

<t><list style="symbols">
  <t>(IoT) Device: A device refers to the entire IoT product, which
consists of one or many MCUs, sensors and/or actuators. Many IoT
devices sold today contain multiple MCUs and therefore a single
device may need to obtain more than one firmware image and
manifest to succesfully perform an update.</t>
  <t>Status Tracker: The status tracker has a client and a server component
and performs three tasks: 
1) It communicates the availability of a new firmware version. This 
   information will flow from the server to the server. <vspace />
2) It conveys information about software and hardware characteristics of 
   the device. The information flow is from the client to the server. <vspace />
3) It can trigger the firmware update process on the device. The 
   information flow is from the server to the client.  <vspace blankLines='1'/>
For example, a device operator may want to read the installed firmware
version number running on the device and information 
about available flash memory. Once an update has been triggered, the device 
operator may want to obtain the state information about the firmware 
update process. If errors occurred, the device operator may want to 
troubleshoot problems by first obtaining diagnostic information (typically 
using a device management software).  <vspace blankLines='1'/>
We make no 
assumptions about where the server-side component is deployed. The 
deployment of status trackers is flexible and may be found at<vspace />
cloud-based servers, on-premise servers, or may be embedded in edge 
computing device. A status tracker server component may even be 
deployed on an IoT device. For example, if the IoT device contains 
multiple MCUs, then the main MCU may act as a status tracker towards the 
other MCUs. Such deployment is useful when updates have to be 
synchronized across MCUs.</t>
  <t>Firmware Consumer: The firmware consumer is the recipient of the
firmware image and the manifest. It is responsible for parsing
and verifying the received manifest and for storing the obtained
firmware image. The firmware consumer plays the role of the
update component on the IoT device typically running in the
application firmware. It interacts with the firmware server and
with the status tracker, if present.</t>
  <t>Firmware Server: The firmware server stores firmware images and 
manifests and distributes them to IoT devices. Some deployments 
may require a store-and-forward concept, which requires storing 
the firmware images/manifests on more than one entity before<vspace />
they reach the device. There is typically some interaction between the
firmware server and the status tracker and these two entities are often
physically separated on different devices for scalability reasons.</t>
  <t>Bootloader: A bootloader is a piece of software that is
executed once a microcontroller has been reset. It is
responsible for deciding what code to execute.</t>
</list></t>

</section>
</section>
</section>
<section anchor="architecture" title="Architecture">

<t>More devices today than ever before are being connected to the Internet,
which drives the need for firmware updates to be provided over the
Internet rather than through traditional interfaces, such as USB or
RS232. Updating a device over the Internet requires the device to fetch
the new firmware image and the manifest.</t>

<t>Hence, the following components are necessary on a device for a firmware 
update solution:</t>

<t><list style="symbols">
  <t>the Internet protocol stack for firmware downloads (*),</t>
  <t>the capability to write the received firmware image to
persistent storage (most likely flash memory) prior to performing
the update,</t>
  <t>a manifest parser with code to verify a digital
signature or a message authentication code,</t>
  <t>the ability to unpack, to decompress and/or to decrypt the 
received firmware image,</t>
  <t>(optionally) a status tracker.</t>
</list></t>

<t>(*) Because firmware images are often multiple kilobytes, sometimes
exceeding one hundred kilobytes, in size for low end IoT devices and even
several megabytes large for IoT devices running full-fledged operating systems
like Linux, the protocol mechanism for retrieving these images needs
to offer features like congestion control, flow control, fragmentation
and reassembly, and mechanisms to resume interrupted or corrupted transfers.</t>

<t>These features are most likely offered by code in the application firmware 
image, or more precisely by the firmware consumer, running
on the device rather than by the bootloader itself. Note that 
cryptographic algorithms will likely run in a trusted execution 
environment, on a separate MCU, in a hardware security module, or in a secure element
rather than in the same context with the application code.</t>

<t><xref target="arch-figure"/> shows the architecture where a
firmware image is created by an author, and made available to a firmware
server. For security reasons, the author will not have the permissions to 
upload firmware images to the firmware server and to initiate an update him- or herself. 
Instead, authors will make firmware images available to the device operators. Note that 
there may be a longer supply chain involved to pass software updates from the author all 
the way to the party that can then finally make a decision to deploy it with IoT devices.</t>

<t>As a first step in the firmware update process, the firmware consumer needs to be 
made aware of the availability of a new firmware update by the status tracker. This can 
be accomplished via polling (client-initiated), push notifications (server-initiated),
or more complex mechanisms (such as a hybrid approach):</t>

<t><list style="symbols">
  <t>Client-initiated updates take the form of a firmware consumer on
a device proactively checking (polling) for updates.</t>
  <t>With Server-initiated updates the server-side component of the status tracker 
learns about a new firmware version and determines what devices qualify for a 
firmware update. Once the relevant devices have been selected the updates 
are distributed to the firmware consumers on those devices. Server-initiated 
updates are important because they allow timely update of firmware images.
Note that the client-side status tracker needs to be reachable by the server-side
component. This may require devices to keep reachability information on the 
server-side up-to-date and to keep state at NATs and stateful packet filtering 
firewalls alive.</t>
  <t>Using a hybrid approach the server-side of the status tracker
pushes notifications of availability of an update to the client side and requests 
the firmware consumer to pull the manifest and the firmware image from the 
firmware server.</t>
</list></t>

<t>Once the device operator triggers update via the status tracker, it will keep 
track of the update process on the device. This allows the device operator to know what 
devices have received an update and which of them are still pending an update.</t>

<figure title="Architecture." anchor="arch-figure"><artwork><![CDATA[
                                                      +----------+
                                                      |          |
                                                      |  Author  |
                                                      |          |
                                                      +----------+
                       Firmware + Manifest                 |
              +----------------------------------+         | Firmware +
              |                                  |         | Manifest
              |                               ---+-------  |
              |                           ----   |       --|-
              |                         //+----------+     | \\
             -+--                      // |          |     |   \
        ----/ |  ----                |/   | Firmware |<-+  |    \
      //      |      \\              |    | Server   |  |  |     \
     /        |        \             /    |          |  +  +      \
    /         |         \           /     +----------+   \ /       |
   / +--------+--------+ \         /                      |        |
  /  |        v        |  \       /                       v        |
 |   | +------------+  |   |     |          +----------------+      |
 |   | |  Firmware  |  |                    |     Device     |      |
 |   | |  Consumer  |  |   |     |          |     Management |      |
|    | +------------+  |    |    |          |                |      |
|    | +------------+  |    |    |          |    +--------+  |      |
|    | |  Status    |<-+--------------------+->  |        |  |      |
|    | |  Tracker   |  |    |    |          |    | Status |  |      |
|    | |  Client    |  |    |    |          |    | Tracker|  |     |
 |   | +------------+  |   |     |          |    | Server |  |     |
 |   |    Device       |   |      |         |    +--------+  |     |
 |   +-----------------+   |       \        |                |    /
  \                       /         \       +----------------+   /
   \       Network       /           \                          /
    \     Operator      /             \     Device Operator    /
      \\             //                \ \                   //
        ----     ----                     ----           ----
            -----                             -----------
]]></artwork></figure>

<t>Firmware images and manifests may be conveyed as a bundle or detached. The 
manifest must support both approaches.</t>

<t>For distribution as a bundle, the firmware image is embedded into a manifest.
This is a useful approach for deployments where devices are not connected
to the Internet and cannot contact a dedicated firmware server for the firmware
download. It is also applicable when the firmware update happens via a
USB sticks or short range radio technologies (such as Bluetooth Smart).</t>

<t>Alternatively, the manifest is distributed detached from the firmware image. 
Using this approach, the firmware consumer is presented with the manifest first 
and then needs to obtain one or more firmware images as dictated in the 
manifest.</t>

<t>The pre-authorisation step involves verifying whether the entity
signing the manifest is indeed authorized to perform an update.
The firmware consumer must also determine whether it should fetch and
process a firmware image, which is referenced in a manifest.</t>

<t>A dependency resolution phase is needed when more than one
component can be updated or when a differential update is used.
The necessary dependencies must be available prior to installation.</t>

<t>The download step is the process of acquiring a local copy of the
firmware image.  When the download is client-initiated, this means
that the firmware consumer chooses when a download occurs and initiates
the download process.  When a download is server-initiated,
this means that the status tracker tells
the device when to download or that it initiates the transfer
directly to the firmware consumer. For example, a download from an
HTTP-based firmware server is client-initiated. Pushing a manifest
and firmware image to the Package resource of the LwM2M
Firmware Update object <xref target="LwM2M"/> is server-initiated update.</t>

<t>If the firmware consumer has downloaded a new firmware image and is ready to
install it, to initiate the installation, it may 
- either need to wait for a trigger from the status tracker, 
- or trigger the update automatically, 
- or go through a more complex decision making process to determine 
the appropriate timing for an update.</t>

<t>Installation is the act of processing the payload into a format that
the IoT device can recognise and the bootloader is responsible for
then booting from the newly installed firmware image.</t>

</section>
<section anchor="bootloader" title="The Bootloader">

<t><xref target="architecture"/> describes the steps for getting the firmware image and the manifest
from the author to the firmware consumer on the IoT device. Once the firmware consumer 
has retrieved and successfully processed the manifest and the firmware image it needs 
to hand control over to the bootloader.</t>

<t>In most cases this requires the MCU to restart. Once the
MCU has initiated a restart, the bootloader takes over control and
determines whether the newly downloaded firmware image should be executed.</t>

<t>At this stage the device has at least three firmware images available. 
First, the bootloader itself is a firmware image. Second, the firmware image 
that has to be replaced is still available on the device as a backup in case 
the freshly downloaded firmware image does not boot correctly. Third, there 
is the newly downloaded firmware image. To differentiate the firmware image 
of the bootloader from the other firmware images that contain application code 
we refer to the latter as application firmware images. Since many low end IoT 
devices use non-relocatable code, the bootloader needs to copy the newly 
downloaded application firmware image into the location of the old application 
firmware image and vice versa.</t>

<t>The boot process is security sensitive. An attacker will typically try to 
retrieve a firmware image from the device for reverse engineering or will try to get 
the bootloader to excute an attacker-modified firmware image. The
bootloader will therefore have to perform security checks on the
firmware image before it can be booted. These security checks by the
bootloader happen in addition to the security checks that happened
when the firmware image and the manifest were downloaded by the firmware consumer.</t>

<t>The manifest will likely be stored alongside the firmware image on flash to
allow re-verification of the firmware image with every boot
attempt. The firmware consumer may strip information from the manifest instead of 
storing the complete manifest.  Whether to re-use the standardized
manifest format also for the boot process or to use a different format for the
secure boot-specific meta-data depends on the system design.  The
manifest format does, however, have the capability to serve also as a
building block for secure boot with its severable elements that allow
shrinking the size of the manifest by stripping elements that are no
longer needed.</t>

<t>In order to satisfy the reliability requirements defined in
<xref target="reliability"/>, devices must always be able to return to a working
firmware image. This has implications for the design of the bootloader.
If the firmware image contains the firmware consumer
functionality, as described above, then the bootloader must be able to
roll back to a working firmware image. Alternatively, the bootloader
may have enough functionality to
fetch a firmware image plus manifest from a firmware server over the
Internet.  A multi-stage bootloader may soften this requirement at
the expense of a more sophisticated boot process.</t>

<t>For a bootloader to offer a secure boot it needs to provide
the following features:</t>

<t><list style="symbols">
  <t>Availability of cryptographic libraries, such as SHA-256 to compute
a fingerprint over the firmware image and a digital signature
algorithm. (Alternatively, a symmetric key variant using a keyed 
message digest may be used instead.)</t>
  <t>The device needs to have a trust anchor store to verify the 
digital signature. (Alternatively, access to a key store for use 
with the keyed message digest.)</t>
  <t>Ability to expose boot process-related data to the application
firmware (such as to the status tracker).  This allows
to share information about the firmware version running, and the 
status of the firmware update process and whether errors have occurred.</t>
  <t>Offer attestation information, such as
boot measurements. (optional)</t>
  <t>Ability to decrypt firmware images, in case confidentiality protection 
was applied). This requires a solution for key management. (optional)</t>
</list></t>

<t>While the software architecture of the bootloader and its
security mechanisms are implementation-specific, the manifest can
be used to control the firmware download from the Internet in
addition to augmenting secure boot process. These building blocks
are relevant for the design of the manifest.</t>

</section>
<section anchor="device" title="Types of IoT Devices">

<t>There are billions of MCUs used in devices today produced by a large 
number of silicon manufacturers. While MCUs can vary significantly 
in their characteristics, there are a number of similiaries allowing 
us to categorize in groups.</t>

<t>The firmware update architecture, and the manifest format in particular, 
needs to offer enough flexibility to cover the most common deployment cases.</t>

<section anchor="single-mcu" title="Single MCU">

<t>The simplest, and currently most common, architecture consists of
a single MCU along with its own peripherals.  These SoCs generally
contain some amount of flash memory for code and fixed data, as
well as RAM for working storage.  A notable characteristic of these 
SoCs is that the primary code is generally execute in place (XIP). 
Due to the non-relocatable nature of the code, the firmware image 
needs to be placed in a specific location in flash since the code 
cannot be executed from an arbitrary location in flash. Hence, then 
the firmware image is updated it is necessary to swap the old and 
the new image.</t>

</section>
<section anchor="single-cpu-with-secure-normal-mode-partitioning" title="Single CPU with Secure - Normal Mode Partitioning">

<t>Another configuration consists of a similar architecture to the
previous, with a single CPU.  However, this CPU supports a security
partitioning scheme that allows memory (in addition to other things)
to be divided into secure and normal mode.  There will generally be
two images, one for secure mode, and one for normal mode.  In this
configuration, firmware upgrades will generally be done by the CPU
in secure mode, which is able to write to both areas of the flash
device. In addition, there are requirements to be able to update
either image independently, as well as to update them together
atomically, as specified in the associated manifests.</t>

</section>
<section anchor="symmetric-multiple-cpus" title="Symmetric Multiple CPUs">

<t>In more complex SoCs with symmetric multi-processing support, advanced
operating systems, such as Linux, are often used. These SoCs frequently
use an external storage medium, such as raw NAND flash or eMMC. Due to
the higher quantity of resources, these devices are often capable of
storing multiple copies of their firmware images and selecting the most
appropriate one to boot. Many SoCs also support bootloaders that are
capable of updating the firmware image, however this is typically a last
resort because it requires the device to be held in the bootloader while
the new firmware is downloaded and installed, which results in down-time
for the device. Firmware updates in this class of device are typically
not done in-place.</t>

</section>
<section anchor="dual-cpu-shared-memory" title="Dual CPU, shared memory">

<t>This configuration has two or more heterogeneous CPUs in a single SoC that 
share memory (flash and RAM).  Generally, there will be a mechanism to prevent 
one CPU from unintentionally accessing memory currently allocated to the other.
Upgrades in this case will typically be done by one of the CPUs, and is 
similar to the single CPU with secure mode.</t>

</section>
<section anchor="dual-cpu-other-bus" title="Dual CPU, other bus">

<t>This configuration has two or more heterogeneous CPUs, each having their own memory.
There will be a communication channel between them, but it will be
used as a peripheral, not via shared memory.  In this case, each CPU
will have to be responsible for its own firmware upgrade.  It is
likely that one of the CPUs will be considered the primary CPU, and will
direct the other CPU to do the upgrade.  This configuration is
commonly used to offload specific work to other CPUs.  Firmware
dependencies are similar to the other solutions above, sometimes
allowing only one image to be upgraded, other times requiring several
to be upgraded atomically.  Because the updates are happening on
multiple CPUs, upgrading the two images atomically is challenging.</t>

</section>
</section>
<section anchor="manifests" title="Manifests">

<section anchor="overview" title="Overview">
<t>In order for a firmware consumer to apply an update, it has to make several decisions
using manifest-provided information and data available on the device itself. For more 
detailed information and a longer list of information elements in the manifest consult the 
information model specification <xref target="I-D.ietf-suit-information-model"/>, which offers justifications 
for each element, and the manifest, see <xref target="I-D.ietf-suit-manifest"/>}, for details about how this 
information is included in the manifest.</t>

<texttable title="Firmware Update Decisions." anchor="manifest-info">
      <ttcol align='right'>Decision</ttcol>
      <ttcol align='left'>Information Elements</ttcol>
      <c>Should I trust the author of the firmware?</c>
      <c>Trust anchors and authorization policies on the device</c>
      <c>Has the firmware been corrupted?</c>
      <c>Digital signature and MAC covering the firmware image</c>
      <c>Does the firmware update apply to this device?</c>
      <c>Conditions with Vendor ID, Class ID and Device ID</c>
      <c>Is the update older than the active firmware?</c>
      <c>Sequence number in the manifest</c>
      <c>When should the device apply the update?</c>
      <c>Wait directive</c>
      <c>How should the device apply the update?</c>
      <c>Manifest commands</c>
      <c>What kind of firmware binary is it?</c>
      <c>Unpack algorithms to interpret a format.</c>
      <c>Where should the update be obtained?</c>
      <c>Dependencies on other manifests and firmware image URI in Manifest</c>
      <c>Where should the firmware be stored?</c>
      <c>Storage Location and Component Identifier</c>
</texttable>

</section>
<section anchor="requirements" title="Requirements">

<t>The manifest standardization is influenced by the requirements discussed
in the sub-sections below.</t>

<section anchor="agnostic-to-how-firmware-images-are-distributed" title="Agnostic to how firmware images are distributed">

<t>Firmware images can be conveyed to devices in a variety of ways,
including USB, UART, WiFi, BLE, low-power WAN technologies, etc.
and use different protocols (e.g., CoAP, HTTP). The specified
mechanism needs to be agnostic to the distribution of the
firmware images and manifests.</t>

</section>
<section anchor="friendly-to-broadcast-delivery" title="Friendly to broadcast delivery">

<t>This architecture does not specify any specific broadcast protocol.
However, given that broadcast may be desirable for some networks,
updates must cause the least disruption possible both in metadata
and firmware transmission.</t>

<t>For an update to be broadcast friendly, it cannot rely on link
layer, network layer, or transport layer security. A solution has
to rely on security protection applied to the manifest and firmware image
instead. In addition,
the same manifest must be deliverable to many devices, both those
to which it applies and those to which it does not, without a
chance that the wrong device will accept the update. Considerations
that apply to network broadcasts apply equally to the use of
third-party content distribution networks for payload distribution.</t>

</section>
<section anchor="use-state-of-the-art-security-mechanisms" title="Use state-of-the-art security mechanisms">

<t>End-to-end security between the author and the device is shown in
<xref target="architecture"/>.</t>

<t>Authentication ensures that the device can cryptographically identify
the author(s) creating firmware images and manifests. Authenticated
identities may be used as input to the authorization process.</t>

<t>Integrity protection ensures that no third party can modify the manifest
or the firmware image.</t>

<t>For confidentiality protection of the firmware image, it must be done in such a
way that every intended recipient can decrypt it. The information
that is encrypted individually for each device must maintain
friendliness to Content Distribution Networks, bulk storage, and
broadcast protocols.</t>

<t>A manifest specification must support different cryptographic algorithms
and algorithm extensibility. Due of the nature of
unchangeable code in ROM for use with bootloaders the use of
post-quantum secure signature mechanisms, such as hash-based
signatures <xref target="RFC8778"/>, are attractive. These
algorithms maintain security in presence of quantum computers.</t>

<t>A mandatory-to-implement set of algorithms will be specified in the
manifest specification <xref target="I-D.ietf-suit-manifest"/>}.</t>

</section>
<section anchor="rollback-attacks-must-be-prevented" title="Rollback attacks must be prevented">

<t>A device presented with an old, but valid manifest and firmware
must not be tricked into installing such firmware since a
vulnerability in the old firmware image may allow an attacker to
gain control of the device.</t>

</section>
<section anchor="reliability" title="Robust against becoming unbootable">

<t>A power failure at any time must not cause a failure of the device.
Equally, adverse network conditions during an update must not cause the
failure of the device.</t>

<t>A failure to validate any part of an update must not cause a
failure of the device. One way to achieve this functionality is
to provide a minimum of two storage locations for firmware and one
bootable location for firmware. An alternative approach is to use a
second stage bootloader with build-in full featured firmware update
functionality such that it is possible to return to the update
process after power down.</t>

<t>Note: This is an implementation requirement rather than a requirement
on the manifest format.</t>

</section>
<section anchor="operate-with-a-small-bootloader" title="Operate with a small bootloader">

<t>Throughout this document we assume that the bootloader itself is
distinct from the role of the firmware consumer and therefore does not
manage the firmware update process. This may give the impression
that the bootloader itself is a completely separate component,
which is mainly responsible for selecting a firmware image to boot.</t>

<t>The overlap between the firmware update process and the bootloader
functionality comes in two forms, namely</t>

<t><list style="symbols">
  <t>First, a bootloader must verify the firmware image it boots as
part of the secure boot process. Doing so requires meta-data to be
stored alongside the firmware image so that the bootloader can
cryptographically verify the firmware image before booting it to
ensure it has not been tampered with or replaced. This meta-data
used by the bootloader may well be the same manifest obtained with the
firmware image during the update process (with the severable
fields stripped off).</t>
  <t>Second, an IoT device needs a recovery strategy in case the firmware
update / boot process fails. The recovery strategy may include
storing two or more firmware images on the device or offering the
ability to have a second stage bootloader perform the firmware update
process again using firmware updates over serial, USB or even
wireless connectivity like Bluetooth Smart.
In the latter case the firmware consumer functionality is contained in the
second stage bootloader and requires the necessary functionality for
executing the firmware update process, including manifest parsing.</t>
</list></t>

<t>In general, it is assumed that the bootloader itself, or a minimal part of it,
will not be updated since a failed update of the bootloader poses a 
reliability risk.</t>

<t>All information necessary for a device to make a decision about the
installation of a firmware update must fit into the available memory of
a constrained IoT device. This prevents flash write exhaustion.
This is typically not a difficult requirement to accomplish because
there are not other task/processes running while the bootloader is
active (unlike that which may be the case when running the application firmware).</t>

<t>Note: This last paragraph is an implementation requirement.</t>

</section>
<section anchor="small-parsers" title="Small Parsers">

<t>Keeping the code size and complexity of parsers small is important 
for constrained IoT devices. Since the firmware image parsing code may 
also be used by the bootloader it is part of the trusted computing base.</t>

<t>Additionally, it must be easy to parse only those fields that are
required to validate at least one signature or MAC with minimal
exposure.</t>

</section>
<section anchor="no-impact-on-existing-firmware-formats" title="No impact on existing firmware formats">

<t>The design of the firmware update mechanism must not require
changes to existing firmware formats.</t>

</section>
<section anchor="robust-permissions" title="Robust permissions">

<t>When a device obtains a monolithic firmware image from a single author
without any additional approval steps then the authorization flow is
relatively simple. There are, however, other cases where more complex
policy decisions need to be made before updating a device.</t>

<t>In this architecture the authorization policy is separated from
the underlying communication architecture. This is accomplished
by separating the entities from their permissions. For example,
an author may not have the authority to install a firmware image
on a device in critical infrastructure without the authorization
of a device operator. In this case, the device may be programmed
to reject firmware updates unless they are signed both by the
firmware author and by the device operator.</t>

<t>Alternatively, a device may trust precisely one entity, which
does all permission management and coordination. This entity
allows the device to offload complex permissions
calculations for the device.</t>

</section>
<section anchor="suitability-for-software-and-personalization-data" title="Suitability for software and personalization data">

<t>The work on a standardized manifest format initially focused on the
most constrained IoT devices and those devices contain code put together
by a single author (although that author may obtain code from other
developers, some of it only in binary form).</t>

<t>Later it turns out that other use cases may benefit from a standardized
manifest format also for conveying software and even personalization data
alongside software. Trusted Execution Environments (TEEs), for example,
greatly benefit from a protocol for managing the lifecycle of trusted
applications (TAs) running inside a TEE. TEEs may obtain TAs
from different authors and those TAs may require personalization data,
such as payment information, to be securely conveyed to the TEE.</t>

<t>To support this wider range of use cases the manifest format should
therefore be extensible to convey other forms of payloads as well.</t>

</section>
</section>
</section>
<section anchor="securing" title="Securing Firmware Updates">

<t>Securing the firmware update process itself is important. Failure 
to do so can help attackers to take control over the devices.</t>

<t>End-to-end security mechanisms are used to protect the firmware
image and the manifest. The following assumptions are made to allow 
the firmware consumer to verify the received firmware image and 
manifest before updating software:</t>

<t><list style="symbols">
  <t>To accept an update, a device needs to verify the signature covering
the manifest. There may be one or multiple manifests that need to be
validated, potentially signed by different parties. The device needs
to be in possession of the trust anchors to verify those signatures.
Installing trust anchors to devices via the Trust Provisioning Authority
happens in an out-of-band fashion prior to the firmware update process.</t>
  <t>Not all entities creating and signing manifests have the same
permissions. A device needs to determine whether the requested action
is indeed covered by the permission of the party that signed the manifest.
Informing the device about the permissions of the different parties
also happens in an out-of-band fashion and is also a duty of the
Trust Provisioning Authority.</t>
  <t>For confidentiality protection of firmware images the author needs
to be in possession of the certificate/public key or a pre-shared key
of a device. The use of confidentiality protection of firmware images
is optional.</t>
</list></t>

</section>
<section anchor="example" title="Example">

<t><xref target="firmware-update"/> illustrates an example message flow
for distributing a firmware image to a device
starting with an author uploading the new firmware to
the firmware server and creating a manifest. The firmware
and manifest are stored on the same firmware server.</t>

<t>This
setup does not use a status tracker and the firmware consumer
component is therefore responsible for periodically checking
whether a new firmware image is available for download.</t>

<figure title="First Example Flow for a Firmware Upate." anchor="firmware-update"><artwork><![CDATA[
+--------+    +-----------------+    +-----------------------------+
|        |    |                 |    | +------------+ +----------+ |
| Author |    | Firmware Server |    | |  Firmware  | |Bootloader| |
+--------+    +-----------------+    | |  Consumer  | |          | |
  |                   |              | +------------+ +----------+ |
  |                   |              |      |  IoT Device    |     |
  |                   |               `''''''''''''''''''''''''''''
  |                   |                     |                |
  | Create Firmware   |                     |                |
  |--------------+    |                     |                |
  |              |    |                     |                |
  |<-------------+    |                     |                |
  |                   |                     |                |
  | Upload Firmware   |                     |                |
  |------------------>|                     |                |
  |                   |                     |                |
  | Create Manifest   |                     |                |
  |---------------+   |                     |                |
  |               |   |                     |                |
  |<--------------+   |                     |                |
  |                   |                     |                |
  | Sign Manifest     |                     |                |
  |-------------+     |                     |                |
  |             |     |                     |                |
  |<------------+     |                     |                |
  |                   |                     |                |
  | Upload Manifest   |                     |                |
  |------------------>|                     |                |
  |                   |                     |                |
  |                   |   Query Manifest    |                |
  |                   |<--------------------|                |
  |                   |                     |                |
  |                   |   Send Manifest     |                |
  |                   |-------------------->|                |
  |                   |                     | Validate       |
  |                   |                     | Manifest       |
  |                   |                     |---------+      |
  |                   |                     |         |      |
  |                   |                     |<--------+      |
  |                   |                     |                |
  |                   |  Request Firmware   |                |
  |                   |<--------------------|                |
  |                   |                     |                |
  |                   | Send Firmware       |                |
  |                   |-------------------->|                |
  |                   |                     | Verify         |
  |                   |                     | Firmware       |
  |                   |                     |--------------+ |
  |                   |                     |              | |
  |                   |                     |<-------------+ |
  |                   |                     |                |
  |                   |                     | Store          |
  |                   |                     | Firmware       |
  |                   |                     |-------------+  |
  |                   |                     |             |  |
  |                   |                     |<------------+  |
  |                   |                     |                |
  |                   |                     |                |
  |                   |                     | Trigger Reboot |
  |                   |                     |--------------->|
  |                   |                     |                |
  |                   |                     |                |
  |                   |                 +---+----------------+--+
  |                   |                S|   |                |  |
  |                   |                E|   | Verify         |  |
  |                   |                C|   | Firmware       |  |
  |                   |                U|   | +--------------|  |
  |                   |                R|   | |              |  |
  |                   |                E|   | +------------->|  |
  |                   |                 |   |                |  |
  |                   |                B|   | Activate new   |  |
  |                   |                O|   | Firmware       |  |
  |                   |                O|   | +--------------|  |
  |                   |                T|   | |              |  |
  |                   |                 |   | +------------->|  |
  |                   |                P|   |                |  |
  |                   |                R|   | Boot new       |  |
  |                   |                O|   | Firmware       |  |
  |                   |                C|   | +--------------|  |
  |                   |                E|   | |              |  |
  |                   |                S|   | +------------->|  |
  |                   |                S|   |                |  |
  |                   |                 +---+----------------+--+
  |                   |                     |                |
]]></artwork></figure>

<t><xref target="firmware-update2"/> shows an example with the device using
a status tracker. Depiction of the author publishing the manifest at
the status tracker and the firmware image at the firmware server would
be the same as in <xref target="firmware-update"/>. So for brevity they are not shown.
Also omitted is the secure boot process following the successful 
firmware update process.</t>

<t>The exchange starts with the device interacting with the status
tracker; the details of such exchange will vary with the different
device management systems being used. In any case, the status
tracker learns about the firmware version of the devices it
manages. In our example, the device under management is using
firmware version A.B.C. At a later point in time the author uploads
a new firmware along with the manifest to the firmware server and the
status tracker, respectively. While there is no need to store the
manifest and the firmware on different servers this example shows
a common pattern used in the industry. The status tracker may then
automatically, based on human intervention or based on a more
complex policy decide to inform the device about the newly available
firmware image. In our example, it does so by pushing the manifest
to the firmware consumer. The firmware consumer downloads the firmware
image with the newer version X.Y.Z after successful validation
of the manifest. Subsequently, a reboot is initiated and the secure
boot process starts.</t>

<figure title="Second Example Flow for a Firmware Upate." anchor="firmware-update2"><artwork><![CDATA[
 +---------+   +-----------------+    +-----------------------------+
 | Status  |   |                 |    | +------------+ +----------+ |
 | Tracker |   | Firmware Server |    | |  Firmware  | |Bootloader| |
 |         |   |                 |    | |  Consumer  | |          | |
 +---------+   +-----------------+    | +------------+ +----------+ |
      |                |              |      |  IoT Device    |     |
      |                |               `''''''''''''''''''''''''''''
      |                |                     |                |
      |        Query Firmware Version        |                |
      |------------------------------------->|                |
      |        Firmware Version A.B.C        |                |
      |<-------------------------------------|                |
      |                |                     |                |
      |         <<some time later>>          |                |
      |                |                     |                |
    _,...._         _,...._                  |                |
  ,'       `.     ,'       `.                |                |
 |   New     |   |   New     |               |                |
 \ Manifest  /   \ Firmware  /               |                |
  `.._   _,,'     `.._   _,,'                |                |
      `''             `''                    |                |
      |            Push manifest             |                |
      |----------------+-------------------->|                |
      |                |                     |                |
      |                '                     |                '
      |                |                     | Validate       |
      |                |                     | Manifest       |
      |                |                     |---------+      |
      |                |                     |         |      |
      |                |                     |<--------+      |
      |                | Request firmware    |                |
      |                | X.Y.Z               |                |
      |                |<--------------------|                |
      |                |                     |                |
      |                | Firmware X.Y.Z      |                |
      |                |-------------------->|                |
      |                |                     |                |
      |                |                     | Verify         |
      |                |                     | Firmware       |
      |                |                     |--------------+ |
      |                |                     |              | |
      |                |                     |<-------------+ |
      |                |                     |                |
      |                |                     | Store          |
      |                |                     | Firmware       |
      |                |                     |-------------+  |
      |                |                     |             |  |
      |                |                     |<------------+  |
      |                |                     |                |
      |                |                     |                |
      |                |                     | Trigger Reboot |
      |                |                     |--------------->|
      |                |                     |                |
      |                |                     |                |
      |                |                     | __..-------..._'
      |                |                    ,-'               `-.
      |                |                   |      Secure Boot    |
      |                |                   `-.                 _/
      |                |                     |`--..._____,,.,-'
      |                |                     |                |
]]></artwork></figure>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document describes terminology, requirements and an architecture for 
firmware updates of IoT devices. The content of the document is thereby 
focused on improving security of IoT devices via firmware update mechanisms
and informs the standardization of a manifest format.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their feedback:</t>

<t><list style="symbols">
  <t>Geraint Luff</t>
  <t>Amyas Phillips</t>
  <t>Dan Ros</t>
  <t>Thomas Eichinger</t>
  <t>Michael Richardson</t>
  <t>Emmanuel Baccelli</t>
  <t>Ned Smith</t>
  <t>Jim Schaad</t>
  <t>Carsten Bormann</t>
  <t>Cullen Jennings</t>
  <t>Olaf Bergmann</t>
  <t>Suhas Nandakumar</t>
  <t>Phillip Hallam-Baker</t>
  <t>Marti Bolivar</t>
  <t>Andrzej Puzdrowski</t>
  <t>Markus Gueller</t>
  <t>Henk Birkholz</t>
  <t>Jintao Zhu</t>
  <t>Takeshi Takahashi</t>
  <t>Jacob Beningo</t>
  <t>Kathleen Moriarty</t>
  <t>Bob Briscoe</t>
</list></t>

<t>We would also like to thank the WG chairs, Russ Housley, David Waltermire,
Dave Thaler for their support and their reviews.</t>

</section>


  </middle>

  <back>


    <references title='Informative References'>





<reference  anchor="RFC8240" target='https://www.rfc-editor.org/info/rfc8240'>
<front>
<title>Report from the Internet of Things Software Update (IoTSU) Workshop 2016</title>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<date year='2017' month='September' />
<abstract><t>This document provides a summary of the Internet of Things Software Update (IoTSU) Workshop that took place at Trinity College Dublin, Ireland on the 13th and 14th of June, 2016.  The main goal of the workshop was to foster a discussion on requirements, challenges, and solutions for bringing software and firmware updates to IoT devices. This report summarizes the discussions and lists recommendations to the standards community.</t><t>Note that this document is a report on the proceedings of the workshop.  The views and positions documented in this report are those of the workshop participants and do not necessarily reflect IAB views and positions.</t></abstract>
</front>
<seriesInfo name='RFC' value='8240'/>
<seriesInfo name='DOI' value='10.17487/RFC8240'/>
</reference>



<reference  anchor="RFC6024" target='https://www.rfc-editor.org/info/rfc6024'>
<front>
<title>Trust Anchor Management Requirements</title>
<author initials='R.' surname='Reddy' fullname='R. Reddy'><organization /></author>
<author initials='C.' surname='Wallace' fullname='C. Wallace'><organization /></author>
<date year='2010' month='October' />
<abstract><t>A trust anchor represents an authoritative entity via a public key and associated data.  The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative.  A relying party uses trust anchors to determine if a digitally signed object is valid by verifying a digital signature using the trust anchor's public key, and by enforcing the constraints expressed in the associated data for the trust anchor.  This document describes some of the problems associated with the lack of a standard trust anchor management mechanism and defines requirements for data formats and push-based protocols designed to address these problems.  This  document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract>
</front>
<seriesInfo name='RFC' value='6024'/>
<seriesInfo name='DOI' value='10.17487/RFC6024'/>
</reference>



<reference  anchor="RFC7228" target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='M.' surname='Ersue' fullname='M. Ersue'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2014' month='May' />
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference  anchor="RFC8778" target='https://www.rfc-editor.org/info/rfc8778'>
<front>
<title>Use of the HSS/LMS Hash-Based Signature Algorithm with CBOR Object Signing and Encryption (COSE)</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='2020' month='April' />
<abstract><t>This document specifies the conventions for using the Hierarchical Signature System (HSS) / Leighton-Micali Signature (LMS) hash-based signature algorithm with the CBOR Object Signing and Encryption (COSE) syntax. The HSS/LMS algorithm is one form of hash-based digital signature; it is described in RFC 8554.</t></abstract>
</front>
<seriesInfo name='RFC' value='8778'/>
<seriesInfo name='DOI' value='10.17487/RFC8778'/>
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>An Information Model for Firmware Updates in IoT Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='June' day='2' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality.  One component of such a firmware update is a concise and machine- processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-07' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-07.txt' />
</reference>



<reference anchor="I-D.ietf-teep-architecture">
<front>
<title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>

<author initials='M' surname='Pei' fullname='Mingliang Pei'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<author initials='D' surname='Wheeler' fullname='David Wheeler'>
    <organization />
</author>

<date month='July' day='13' year='2020' />

<abstract><t>A Trusted Execution Environment (TEE) is an environment that enforces that any code within that environment cannot be tampered with, and that any data used by such code cannot be read or tampered with by any code outside that environment.  This architecture document motivates the design and standardization of a protocol for managing the lifecycle of trusted applications running inside such a TEE.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-12' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-teep-architecture-12.txt' />
</reference>



<reference anchor="I-D.ietf-suit-manifest">
<front>
<title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<author initials='K' surname='Zandberg' fullname='Koen Zandberg'>
    <organization />
</author>

<date month='July' day='13' year='2020' />

<abstract><t>This specification describes the format of a manifest.  A manifest is a bundle of metadata about the firmware for an IoT device, where to find the firmware, the devices to which it applies, and cryptographic information protecting the manifest.  Firmware updates and secure boot both tend to use sequences of common operations, so the manifest encodes those sequences of operations, rather than declaring the metadata.  The manifest also serves as a building block for secure boot.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-09' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-manifest-09.txt' />
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC8392" target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='E.' surname='Wahlstroem' fullname='E. Wahlstroem'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2018' month='May' />
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>


<reference anchor="LwM2M" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf">
  <front>
    <title>Lightweight Machine to Machine Technical Specification, Version 1.0.2</title>
    <author initials="." surname="OMA" fullname="Open Mobile Alliance">
      <organization></organization>
    </author>
    <date year="2018" month="February" day="09"/>
  </front>
  <format type="PDF" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf"/>
</reference>


    </references>




  </back>

<!-- ##markdown-source:
H4sIAFjcdV8AA9V96XLc2JXmf0bwHRClH5aszGSV7G7b6hp3U0u55C6VNCLl
6umoiDIygWTCRAJpLGSlJXXMa8zrzZPM+c5yFwBJiZK6Pc2wS2QmcNdzz/qd
c+fz+fFRV3Rl/jA5Tb4pmu112uTJ612Wdnly2qw2RZevup4+W9dN8qzq8qbK
u6ReJ+eborpoj4/S5bLJrz7s9fr8+CirV1W6pf6yJl138yLv1vO2L7p5Gjw+
/+pXx0crauSibvYPk6Ja18dHx0fFrnmYdE3fdg++/PJ3Xz6g3ps8fZic5au+
Kbr98dF13VxeNHW/ow9fP6PuLvM9fZY9dGOfP0G/aK3t0ir7KS3rikazz2ku
u+Lh8VGSNOtVnrXdvrTPk6SrV+HvRZXlVec+aeuma/J16z/Yb+O/u6ZY+edX
9XZL7/vvi6osqqC3/OduXhZtN6eGlnVJD87rX97HV7R823S3o7XXp9O+29QN
xj3H9/xTVPTGo0XyvG7Syn0qy/6oyassrQbf1c1FWhV/S7uirmgvm23yXbGl
3cjcE/k2LUr3+oJf/5e02S5oMljNYfffLpLzdrWp13lVXAzG8G1aVXk79f0H
j2PDTSw618RNY3myoHHX18OleJJeFdngm3gA3xVV2tTDvjO8t1jivX8p+YkF
vTbV8XPag7wp0tWg5+dFWdPIh1/GnT+uq7YviUi74QC28vq/bPl1mzVOSbOl
l69yJuNX3zz+7YNff2m//+OXD35tv//mwYPfumd+8xv5/dn8ycIfR9daXc23
dZaX8TNdnu+iIzvRxJYms87bbtQTRvAPX/3Off6r3z3g37+7fv7g+UOZbZc2
FzkdmU3X7R6enFxfXy/qXV5t62VR5mlZFmm1yrHuJ01OH7T5yXfFxaa7zvFf
aubkT1/99OVPD+YPvvzqt18++PJ389OTF89P5+dn8/i5+ei5xS5b6xiEM34R
vJE8T2nOVU5cwP16nq82VbFKy+Rsl6+KNf2KZZslf8qbln5Jvlp8uXjwhbTp
z6snExqY/S308YJmSicUU01Oda7yBDjrwwSDnX/5YP7l7+RT2SrX6Msn3/z9
Fu74aD6fJ+mSeF66Ykb7p76s8ial/ouuoHN/XXSbCVmS3CUBcS/J8qtiRU9t
0qs8adKixeHvNnlS5XnGciQlhlvSySX2nbRg/SReTPb0Inu2tCVEfe026TZp
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
AAA=

-->

</rfc>

