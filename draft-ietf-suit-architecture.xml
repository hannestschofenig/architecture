<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-architecture-12" category="info">

  <front>
    <title abbrev="A Firmware Update Architecture for IoT">A Firmware Update Architecture for Internet of Things</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="D." surname="Brown" fullname="David Brown">
      <organization>Linaro</organization>
      <address>
        <email>david.brown@linaro.org</email>
      </address>
    </author>
    <author initials="M." surname="Meriac" fullname="Milosch Meriac">
      <organization>Consultant</organization>
      <address>
        <email>milosch@meriac.com</email>
      </address>
    </author>

    <date year="2020" month="September" day="11"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Vulnerabilities with Internet of Things (IoT) devices have raised
the need for a solid and secure firmware update mechanism that is
also suitable for constrained devices. Incorporating such update
mechanism to fix vulnerabilities, to update configuration settings
as well as adding new functionality is recommended by security
experts.</t>

<t>This document lists requirements and describes an architecture for
a firmware update mechanism suitable for IoT devices. The
architecture is agnostic to the transport of the firmware images
and associated meta-data.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>When developing Internet of Things (IoT) devices, one of the most difficult problems
to solve is how to update firmware on the device. Once the
device is deployed, firmware updates play a critical part in its
lifetime, particularly when devices have a long lifetime, are
deployed in remote or inaccessible areas where manual
intervention is cost prohibitive or otherwise difficult. Updates
to the firmware of an IoT device are done to fix bugs in software,
to add new functionality, and to re-configure the device to work
in new environments or to behave differently in an already
deployed context.</t>

<t>The firmware update process, among other goals, has to ensure that</t>

<t><list style="symbols">
  <t>The firmware image is authenticated and integrity protected.
Attempts to flash a modified firmware image or an image from
an unknown source are prevented.</t>
  <t>The firmware image can be confidentiality protected so that
attempts by an adversary to recover the plaintext binary can
be prevented. Obtaining the firmware is often one of
the first steps to mount an attack since it gives the adversary
valuable insights into used software libraries, configuration
settings and generic functionality (even though reverse
engineering the binary can be a tedious process).</t>
</list></t>

<t>This version of the document assumes asymmetric cryptography and
a public key infrastructure. Future versions may also describe
a symmetric key approach for very constrained devices.</t>

<t>While the standardization work has been informed by and optimised for firmware
update use cases of Class 1 devices (according to the device class
definitions in RFC 7228 <xref target="RFC7228"/>) devices, there is nothing in
the architecture that restricts its use to only these constrained IoT devices.
Moreover, this architecture is not limited to managing software updates,
but can also be applied to managing the delivery of arbitrary data, such
as configuration information and keys.</t>

<t>More details about the security goals are discussed in
<xref target="architecture"/> and requirements are described in <xref target="requirements"/>.</t>

</section>
<section anchor="terminology" title="Conventions and Terminology">

<t>This document uses the following terms:</t>

<t><list style="symbols">
  <t>Manifest: The manifest contains meta-data about the firmware
image. The manifest is protected against modification and
provides information about the author.</t>
  <t>Firmware Image: The firmware image, or image, is a binary
that may contain the complete software of a device or a subset of
it. The firmware image may consist of multiple images, if
the device contains more than one microcontroller. Often
it is also a compressed archive that contains code,
configuration data, and even the entire file system. The
image may consist of a differential update for performance
reasons. Firmware is the more universal term. The terms,
firmware image, firmware, and image, are used in this
document and are interchangeable.</t>
  <t>Software: The terms “software” and “firmware” are used
interchangeably.</t>
  <t>Bootloader: A bootloader is a piece of software that is
executed once a microcontroller has been reset. It is
responsible for deciding whether to boot a firmware image
that is present or whether to obtain and verify a new
firmware image. Since the bootloader is a security critical
component its functionality may be split into separate stages.
Such a multi-stage bootloader may offer very basic functionality
in the first stage and resides in ROM whereas the second stage
may implement more complex functionality and resides in flash
memory so that it can be updated in the future (in case bugs
have been found). The exact split of components into the
different stages, the number of firmware images stored by an
IoT device, and the detailed functionality varies throughout
different implementations. A more detailed discussion is
provided in <xref target="bootloader"/>.</t>
  <t>Microcontroller (MCU for microcontroller unit): An MCU is a
compact integrated circuit designed for use in embedded systems.
A typical microcontroller includes a processor, memory (RAM and
flash), input/output (I/O) ports and other features connected via
some bus on a single chip. The term ‘system on chip (SoC)’ is
often used for these types of devices.</t>
  <t>System on Chip (SoC): An SoC is an integrated circuit that
integrates all components of a computer, such as CPU, memory,
input/output ports, secondary storage, etc.</t>
  <t>Homogeneous Storage Architecture (HoSA): A device that stores
all firmware components in the same way, for example in a file
system or in flash memory.</t>
  <t>Heterogeneous Storage Architecture (HeSA): A device that
stores at least one firmware component differently from the rest,
for example a device with an external, updatable radio, or a
device with internal and external flash memory.</t>
  <t>Trusted Execution Environments (TEEs): An execution environment
that runs alongside of, but is isolated from, an REE.</t>
  <t>Rich Execution Environment (REE): An environment that is provided
and governed by a typical OS (e.g., Linux, Windows, Android, iOS),
potentially in conjunction with other supporting operating systems
and hypervisors; it is outside of the TEE.  This environment and
applications running on it are considered un-trusted.</t>
  <t>Trusted applications (TAs): An application component that runs in
a TEE.</t>
</list></t>

<t>For more information about TEEs see <xref target="I-D.ietf-teep-architecture"/>. TEEP
requires the use of SUIT for delivering TAs.</t>

<t>The following entities are used:</t>

<t><list style="symbols">
  <t>Author: The author is the entity that creates the firmware image.
There may be multiple authors in a system either when a device
consists of multiple micro-controllers or when the the final
firmware image consists of software components from multiple
companies.</t>
  <t>Firmware Consumer: The firmware consumer is the recipient of the
firmware image and the manifest. It is responsible for parsing
and verifying the received manifest and for storing the obtained
firmware image. The firmware consumer plays the role of the
update component on the IoT device typically running in the
application firmware. It interacts with the firmware server and
with the status tracker, if present.</t>
  <t>(IoT) Device: A device refers to the entire IoT product, which
consists of one or many MCUs, sensors and/or actuators. Many IoT
devices sold today contain multiple MCUs and therefore a single
device may need to obtain more than one firmware image and
manifest to succesfully perform an update. The terms device and
firmware consumer are used interchangably since the firmware
consumer is one software component running on an MCU on the device.</t>
  <t>Status Tracker: The status tracker offers device management
functionality to retrieve information about the installed firmware
on a device and other device characteristics (including free memory
and hardware components), to obtain the state of the firmware update
cycle the device is currently in, and to trigger the update process.
The deployment of status trackers is flexible and they may be used
as cloud-based servers, on-premise servers, embedded in edge computing device
(such as Internet access gateways or protocol translation gateways),
or even in smart phones and tablets. IoT devices that self-initiate
updates may run a status tracker. Similarly, IoT devices that act as a
proxy for other IoT devices in a protocol translation or edge
computing device node may also run a status tracker.
However, if the device contains multiple MCUs, the main MCU may act
as a limited status tracker towards the other MCUs if updates are to be
synchronized across MCUs.
How much functionality a status tracker includes depends on the selected
configuration of the device management functionality and the communication
environment it is used in. In a generic networking environment the protocol
used between the client and the server-side of the status tracker need to
deal with Internet communication challenges involving firewall and NAT traversal.
In other cases, the communication interaction may be rather simple. This
architecture document does not impose requirements on the status tracker.</t>
  <t>Firmware Server: The firmware server stores firmware images and manifests and
distributes them to IoT devices.
Some deployments may require a store-and-forward concept, which requires
storing the firmware images/manifests on more than one entity before<vspace />
they reach the device. There is typically some interaction between the
firmware server and the status tracker but those entities are often
physically separated on different devices for scalability reasons.</t>
  <t>Device Operator: The actor responsible for the day-to-day operation
of a fleet of IoT devices.</t>
  <t>Network Operator: The actor responsible for the operation of a
network to which IoT devices connect.</t>
  <t>Claim: A piece of information asserted about a recipient or payload.</t>
</list></t>

<t>In addition to the entities in the list above there is an orthogonal
infrastructure with a Trust Provisioning Authority (TPA) distributing
trust anchors and authorization permissions to various entities in
the system. The TPA may also delegate rights to install, update,
enhance, or delete trust anchors and authorization permissions to
other parties in the system. This infrastructure overlaps the
communication architecture and different deployments may empower
certain entities while other deployments may not. For example,
in some cases, the Original Design Manufacturer (ODM), which is a
company that designs and manufactures a product, may act as a
TPA and may decide to remain in full control over the firmware
update process of their products.</t>

<t>The terms ‘trust anchor’ and ‘trust anchor store’ are defined in
<xref target="RFC6024"/>:</t>

<t><list style="symbols">
  <t>“A trust anchor represents an authoritative entity via a public
key and associated data.  The public key is used to verify digital
signatures, and the associated data is used to constrain the types
of information for which the trust anchor is authoritative.”</t>
  <t>“A trust anchor store is a set of one or more trust anchors stored
in a device.  A device may have more than one trust anchor store,
each of which may be used by one or more applications.”
A trust anchor store must resist modification against unauthorized
insertion, deletion, and modification.</t>
</list></t>

</section>
<section anchor="requirements" title="Requirements">

<t>The firmware update mechanism described in this specification
was designed with the following requirements in mind:</t>

<t><list style="symbols">
  <t>Agnostic to how firmware images are distributed</t>
  <t>Friendly to broadcast delivery</t>
  <t>Use state-of-the-art security mechanisms</t>
  <t>Rollback attacks must be prevented</t>
  <t>High reliability</t>
  <t>Operate with a small bootloader</t>
  <t>Small Parsers</t>
  <t>Minimal impact on existing firmware formats</t>
  <t>Robust permissions</t>
  <t>Diverse modes of operation</t>
  <t>Suitability to software and personalization data</t>
</list></t>

<section anchor="agnostic-to-how-firmware-images-are-distributed" title="Agnostic to how firmware images are distributed">

<t>Firmware images can be conveyed to devices in a variety of ways,
including USB, UART, WiFi, BLE, low-power WAN technologies, etc.
and use different protocols (e.g., CoAP, HTTP). The specified
mechanism needs to be agnostic to the distribution of the
firmware images and manifests.</t>

</section>
<section anchor="friendly-to-broadcast-delivery" title="Friendly to broadcast delivery">

<t>This architecture does not specify any specific broadcast protocol.
However, given that broadcast may be desirable for some networks,
updates must cause the least disruption possible both in metadata
and firmware transmission.</t>

<t>For an update to be broadcast friendly, it cannot rely on link
layer, network layer, or transport layer security. A solution has
to rely on security protection applied to the manifest and firmware image
instead. In addition,
the same manifest must be deliverable to many devices, both those
to which it applies and those to which it does not, without a
chance that the wrong device will accept the update. Considerations
that apply to network broadcasts apply equally to the use of
third-party content distribution networks for payload distribution.</t>

</section>
<section anchor="use-state-of-the-art-security-mechanisms" title="Use state-of-the-art security mechanisms">

<t>End-to-end security between the author and the device is shown in
<xref target="architecture"/>.</t>

<t>Authentication ensures that the device can cryptographically identify
the author(s) creating firmware images and manifests. Authenticated
identities may be used as input to the authorization process.</t>

<t>Integrity protection ensures that no third party can modify the manifest
or the firmware image.</t>

<t>For confidentiality protection of the firmware image, it must be done in such a
way that every intended recipient can decrypt it. The information
that is encrypted individually for each device must maintain
friendliness to Content Distribution Networks, bulk storage, and
broadcast protocols.</t>

<t>A manifest specification must support different cryptographic algorithms
and algorithm extensibility. Due of the nature of
unchangeable code in ROM for use with bootloaders the use of
post-quantum secure signature mechanisms, such as hash-based
signatures <xref target="RFC8778"/>, are attractive. These
algorithms maintain security in presence of quantum computers.</t>

<t>A mandatory-to-implement set of algorithms will be specified in the
manifest specification <xref target="I-D.ietf-suit-manifest"/>}.</t>

</section>
<section anchor="rollback-attacks-must-be-prevented" title="Rollback attacks must be prevented">

<t>A device presented with an old, but valid manifest and firmware
must not be tricked into installing such firmware since a
vulnerability in the old firmware image may allow an attacker to
gain control of the device.</t>

</section>
<section anchor="reliability" title="High reliability">

<t>A power failure at any time must not cause a failure of the device.
Equally, adverse network conditions during an update must not cause the
failure of the device.
A failure to validate any part of an update must not cause a
failure of the device. One way to achieve this functionality is
to provide a minimum of two storage locations for firmware and one
bootable location for firmware. An alternative approach is to use a
2nd stage bootloader with build-in full featured firmware update
functionality such that it is possible to return to the update
process after power down.</t>

<t>Note: This is an implementation requirement rather than a requirement
on the manifest format.</t>

</section>
<section anchor="operate-with-a-small-bootloader" title="Operate with a small bootloader">

<t>Throughout this document we assume that the bootloader itself is
distinct from the role of the firmware consumer and therefore does not
manage the firmware update process. This may give the impression
that the bootloader itself is a completely separate component,
which is mainly responsible for selecting a firmware image to boot.</t>

<t>The overlap between the firmware update process and the bootloader
functionality comes in two forms, namely</t>

<t><list style="symbols">
  <t>First, a bootloader must verify the firmware image it boots as
part of the secure boot process. Doing so requires meta-data to be
stored alongside the firmware image so that the bootloader can
cryptographically verify the firmware image before booting it to
ensure it has not been tampered with or replaced. This meta-data
used by the bootloader may well be the same manifest obtained with the
firmware image during the update process (with the severable
fields stripped off).</t>
  <t>Second, an IoT device needs a recovery strategy in case the firmware
update / boot process fails. The recovery strategy may include
storing two or more firmware images on the device or offering the
ability to have a second stage bootloader perform the firmware update
process again using firmware updates over serial, USB or even
wireless connectivity like a limited version of Bluetooth Smart.
In the latter case the firmware consumer functionality is contained in the
second stage bootloader and requires the necessary functionality for
executing the firmware update process, including manifest parsing.</t>
</list></t>

<t>In general, it is assumed that the bootloader itself, or a minimal part of it,
will not be updated since a failed update of the bootloader poses a risk
in reliability.</t>

<t>All information necessary for a device to make a decision about the
installation of a firmware update must fit into the available RAM of
a constrained IoT device. This prevents flash write exhaustion.
This is typically not a difficult requirement to accomplish because
there are not other task/processing running while the bootloader is
active (unlike it may be the case when running the application firmware).</t>

<t>Note: This is an implementation requirement.</t>

</section>
<section anchor="small-parsers" title="Small Parsers">

<t>Since parsers are known sources of bugs, any parsers used to process the
manifest must be minimal.
Additionally, it must be easy to parse only those fields that are
required to validate at least one signature or MAC with minimal
exposure.</t>

</section>
<section anchor="minimal-impact-on-existing-firmware-formats" title="Minimal impact on existing firmware formats">

<t>The design of the firmware update mechanism must not require
changes to existing firmware formats.</t>

</section>
<section anchor="robust-permissions" title="Robust permissions">

<t>When a device obtains a monolithic firmware image from a single author
without any additional approval steps then the authorization flow is
relatively simple. There are, however, other cases where more complex
policy decisions need to be made before updating a device.</t>

<t>In this architecture the authorization policy is separated from
the underlying communication architecture. This is accomplished
by separating the entities from their permissions. For example,
an author may not have the authority to install a firmware image
on a device in critical infrastructure without the authorization
of a device operator. In this case, the device may be programmed
to reject firmware updates unless they are signed both by the
firmware author and by the device operator.</t>

<t>Alternatively, a device may trust precisely one entity, which
does all permission management and coordination. This entity
allows the device to offload complex permissions
calculations for the device.</t>

</section>
<section anchor="operating-modes" title="Operating modes">

<t>There are three broad classifications of update operating modes.</t>

<t><list style="symbols">
  <t>Client-initiated Update</t>
  <t>Server-initiated Update</t>
  <t>Hybrid Update</t>
</list></t>

<t>Client-initiated updates take the form of a firmware consumer on
a device proactively checking (polling) for new firmware images.</t>

<t>Server-initiated updates are important to consider because
timing of updates may need to be tightly controlled in some high-
reliability environments. In this case the status tracker determines
what devices qualify for a firmware update. Once those devices have been
selected the firmware server distributes updates to the firmware consumers.</t>

<t>Note: This assumes that the status tracker is able to reach the
device, which may require devices to keep reachability information at
the status tracker up-to-date. This may also require keeping state at
NATs and stateful packet filtering firewalls alive.</t>

<t>Hybrid updates are those that require an interaction between the
firmware consumer and the status tracker. The status tracker
pushes notifications of availability of an update to the firmware consumer,
and it then downloads the image from a firmware server
as soon as possible.</t>

<t>While these broad classifications encompass the majority of operating
modes, some may not be covered in these classifications. By
reinterpreting these modes as a set of operations performed by the
system as a whole, all operating modes can be represented.</t>

<t>The steps performed in the course of an update by the system containing an updatable device are:</t>

<t><list style="symbols">
  <t>Notification</t>
  <t>Pre-authorisation</t>
  <t>Dependency resolution</t>
  <t>Download</t>
  <t>Installation</t>
</list></t>

<t>This is a coarse-grained high level view of steps required to install a
new firmware. By considering where in the system each of these steps is
performed, each operating mode can be represented. Each of these steps
is broken down into smaller constituent parts. <xref target="architecture"/> defines
the steps taken from the perspective of the communication between
actors in the system. <xref target="bootloader"/> describes some additional steps
that a bootloader takes in addition to those described here. <xref target="example"/>
shows an example of the steps undertaken by each party in the course
of an update.</t>

<t>The notification step consists of the status tracker informing the
firmware consumer that an update is available. This can be accomplished via
polling (client-initiated), push notifications (server-initiated),
or more complex mechanisms.</t>

<t>The pre-authorisation step involves verifying whether the entity
signing the manifest is indeed authorized to perform an update.
The firmware consumer must also determine whether it should fetch and
process a firmware image, which is referenced in a manifest.</t>

<t>A dependency resolution phase is needed when more than one
component can be updated or when a differential update is used.
The necessary dependencies must be available prior to installation.</t>

<t>The download step is the process of acquiring a local copy of the
firmware image.  When the download is client-initiated, this means
that the firmware consumer chooses when a download occurs and initiates
the download process.  When a download is server-initiated,
this means that the status tracker tells
the device when to download or that it initiates the transfer
directly to the firmware consumer. For example, a download from an
HTTP-based firmware server is client-initiated. Pushing a manifest
and firmware image to the transfer to the Package resource of the LwM2M
Firmware Update object <xref target="LwM2M"/> is server-initiated.</t>

<t>If the firmware consumer has downloaded a new firmware image and is ready to
install it, it may need to wait for a trigger from the status tracker to
initiate the installation, may trigger the update automatically, or
may go through a more complex decision making process to determine
the appropriate timing for an update (such as delaying the update
process to a later time when end users are less impacted by the
update process).</t>

<t>Installation is the act of processing the payload into a format that
the IoT device can recognise and the bootloader is responsible for
then booting from the newly installed firmware image.</t>

<t>Each of these steps may require different permissions.</t>

</section>
<section anchor="suitability-to-software-and-personalization-data" title="Suitability to software and personalization data">

<t>The work on a standardized manifest format initially focused on the
most constrained IoT devices and those devices contain code put together
by a single author (although that author may obtain code from other
developers, some of it only in binary form).</t>

<t>Later it turns out that other use cases may benefit from a standardized
manifest format also for conveying software and even personalization data
alongside software. Trusted Execution Environments (TEEs), for example,
greatly benefit from a protocol for managing the lifecycle of trusted
applications (TAs) running inside a TEE. TEEs may obtain TAs
from different authors and those TAs may require personalization data,
such as payment information, to be securely conveyed to the TEE.</t>

<t>To support this wider range of use cases the manifest format should
therefore be extensible to convey other forms of payloads as well.</t>

</section>
</section>
<section anchor="claims" title="Claims">

<t>The information conveyed from an Author to a Firmware Consumer can be
considered to be Claims as described in <xref target="RFC7519"/> and <xref target="RFC8392"/>.
The same security considerations apply to the Claims expressed in the
manifest. The chief difference between manifest Claims and CWT or JWT
claims is that a manifest has multiple subjects. The manifest contains:</t>

<t><list style="numbers">
  <t>Claims about the Firmware, including its dependencies</t>
  <t>Claims about the Firmware Consumer’s physical or software properties</t>
  <t>Claims about the Author, or the Author’s delegate</t>
</list></t>

<t>The credential used to authenticate these Claims must be directly
or indirectly related to the trust anchor installed at the device
by the Trust Provisioning Authority.</t>

<t>The baseline claims for all manifests are described in <xref target="I-D.ietf-suit-information-model"/>.</t>

</section>
<section anchor="architecture" title="Communication Architecture">

<t><xref target="arch-figure"/> shows the communication architecture where a
firmware image is created by an author, and uploaded to a firmware
server. The firmware image/manifest is distributed to the device
either in a push or pull manner using the firmware consumer residing on
the device. The device operator keeps track of the process using
the status tracker. This allows the device operator to know and
control what devices have received an update and which of them are
still pending an update.</t>

<figure title="Architecture." anchor="arch-figure"><artwork><![CDATA[
              Firmware +  +----------+       Firmware + +-----------+
              Manifest    |          |-+     Manifest   |           |-+
               +--------->| Firmware | |<---------------|           | |
               |          | Server   | |                |  Author   | |
               |          |          | |                |           | |
               |          +----------+ |                +-----------+ |
               |            +----------+                  +-----------+
               |
               |
               |
              -+--                                  ------
         ----  |  ----                          ----      ----
       //      |      \\                      //              \\
      /        |        \                    /                  \
     /         |         \                  /                    \
    /          |          \                /                      \
   /           |           \              /                        \
  |            v            |            |                          |
  |     +------------+                                              |
  |     |  Firmware  |      |            |                          |
 |      |  Consumer  |       | Device    |       +--------+          |
 |      +------------+       | Management|       |        |          |
 |      |            |<------------------------->| Status |          |
 |      |   Device   |       |          |        | Tracker|          |
 |      +------------+       |          ||       |        |         |
  |                         |           ||       +--------+         |
  |                         |            |                          |
  |                         |             \                        /
   \                       /               \                      /
    \                     /                 \      Device        /
     \     Network       /                   \     Operator     /
      \   Operator      /                     \\              //
       \\             //                        ----      ----
         ----     ----                              ------
             -----

]]></artwork></figure>

<t>End-to-end security mechanisms are used to protect the firmware
image and the manifest although <xref target="e2e-figure"/> does not show the
manifest itself since it may be distributed independently.</t>

<figure title="End-to-End Security." anchor="e2e-figure"><artwork><![CDATA[
                            +-----------+
+--------+                  |           |                   +--------+
|        |  Firmware Image  | Firmware  |   Firmware Image  |        |
| Device |<-----------------| Server    |<------------------| Author |
|        |                  |           |                   |        |
+--------+                  +-----------+                   +--------+
     ^                                                          *
     *                                                          *
     ************************************************************
                        End-to-End Security
]]></artwork></figure>

<t>Whether the firmware image and the manifest is pushed to the device or
fetched by the device is a deployment specific decision.</t>

<t>The following assumptions are made to allow the firmware consumer to verify the
received firmware image and manifest before updating software:</t>

<t><list style="symbols">
  <t>To accept an update, a device needs to verify the signature covering
the manifest. There may be one or multiple manifests that need to be
validated, potentially signed by different parties. The device needs
to be in possession of the trust anchors to verify those signatures.
Installing trust anchors to devices via the Trust Provisioning Authority
happens in an out-of-band fashion prior to the firmware update process.</t>
  <t>Not all entities creating and signing manifests have the same
permissions. A device needs to determine whether the requested action
is indeed covered by the permission of the party that signed the manifest.
Informing the device about the permissions of the different parties
also happens in an out-of-band fashion and is also a duty of the
Trust Provisioning Authority.</t>
  <t>For confidentiality protection of firmware images the author needs
to be in possession of the certificate/public key or a pre-shared key
of a device. The use of confidentiality protection of firmware images
is deployment specific.</t>
</list></t>

<t>There are different types of delivery modes, which are illustrated
based on examples below.</t>

<t>There is an option for embedding a firmware image into a manifest.
This is a useful approach for deployments where devices are not connected
to the Internet and cannot contact a dedicated firmware server for the firmware
download. It is also applicable when the firmware update happens via a
USB stick or via Bluetooth Smart. <xref target="attached-firmware-figure"/> shows this
delivery mode graphically.</t>

<figure title="Manifest with attached firmware." anchor="attached-firmware-figure"><artwork><![CDATA[
              /------------\                 /------------\
             /Manifest with \               /Manifest with \
             |attached      |               |attached      |
             \firmware image/               \firmware image/
              \------------/  +-----------+  \------------/
  +--------+                  |           |                 +--------+
  |        |<.................| Firmware  |<................|        |
  | Device |                  | Server    |                 | Author |
  |        |                  |           |                 |        |
  +--------+                  +-----------+                 +--------+
]]></artwork></figure>

<t><xref target="online-firmware-figure"/> shows an option for remotely updating a device
where the device fetches the firmware image from some file server. The
manifest itself is delivered independently and provides information about
the firmware image(s) to download.</t>

<figure title="Independent retrieval of the firmware image." anchor="online-firmware-figure"><artwork><![CDATA[
             /--------\                     /--------\
            /          \                   /          \
            | Manifest |                   | Manifest |
            \          /                   \          /
             \--------/                     \--------/
                            +-----------+
+--------+                  |           |                 +--------+
|        |<.................| Status    |................>|        |
| Device |                  | Tracker   |              -- | Author |
|        |<-                |           |            ---  |        |
+--------+  --              +-----------+          ---    +--------+
              --                                 ---
                ---                            ---
                   --       +-----------+    --
                     --     |           |  --
      /------------\   --   | Firmware  |<-    /------------\
     /              \    -- | Server    |     /              \
     |   Firmware   |       |           |     |   Firmware   |
     \              /       +-----------+     \              /
      \------------/                           \------------/
]]></artwork></figure>

<t>This architecture does not mandate a specific delivery mode but a solution
must support both types.</t>

</section>
<section anchor="manifest" title="Manifest">

<t>In order for a device to apply an update, it has to make several decisions
about the update:</t>

<t><list style="symbols">
  <t>Does it trust the author of the update?</t>
  <t>Has the firmware been corrupted?</t>
  <t>Does the firmware update apply to this device?</t>
  <t>Is the update older than the active firmware?</t>
  <t>When should the device apply the update?</t>
  <t>How should the device apply the update?</t>
  <t>What kind of firmware binary is it?</t>
  <t>Where should the update be obtained?</t>
  <t>Where should the firmware be stored?</t>
</list></t>

<t>The manifest encodes the information that devices need in order to
make these decisions. It is a data structure that contains the
following information:</t>

<t><list style="symbols">
  <t>information about the device(s) the firmware image is intended to
be applied to,</t>
  <t>information about when the firmware update has to be applied,</t>
  <t>information about when the manifest was created,</t>
  <t>dependencies on other manifests,</t>
  <t>pointers to the firmware image and information about the format,</t>
  <t>information about where to store the firmware image,</t>
  <t>cryptographic information, such as digital signatures or message
authentication codes (MACs).</t>
</list></t>

<t>The manifest information model is described in <xref target="I-D.ietf-suit-information-model"/>.</t>

</section>
<section anchor="device-firmware-update-examples" title="Device Firmware Update Examples">

<t>Although these documents attempt to define a firmware update
architecture that is applicable to both existing systems, as well
as yet-to-be-conceived systems; it is still helpful to consider
existing architectures.</t>

<section anchor="single-cpu-soc" title="Single CPU SoC">

<t>The simplest, and currently most common, architecture consists of
a single MCU along with its own peripherals.  These SoCs generally
contain some amount of flash memory for code and fixed data, as
well as RAM for working storage.  These systems either have a single
firmware image, or an immutable bootloader that runs a single image.
A notable characteristic of these SoCs is that the primary code is
generally execute in place (XIP).  Combined with the non-relocatable
nature of the code, firmware updates need to be done in place.</t>

</section>
<section anchor="single-cpu-with-secure-normal-mode-partitioning" title="Single CPU with Secure - Normal Mode Partitioning">

<t>Another configuration consists of a similar architecture to the
previous, with a single CPU.  However, this CPU supports a security
partitioning scheme that allows memory (in addition to other things)
to be divided into secure and normal mode.  There will generally be
two images, one for secure mode, and one for normal mode.  In this
configuration, firmware upgrades will generally be done by the CPU
in secure mode, which is able to write to both areas of the flash
device. In addition, there are requirements to be able to update
either image independently, as well as to update them together
atomically, as specified in the associated manifests.</t>

</section>
<section anchor="symmetric-multiple-cpus" title="Symmetric Multiple CPUs">

<t>In more complex SoCs with symmetric multi-processing support, advanced
operating systems, such as Linux, are often used. These SoCs frequently
use an external storage medium such as raw NAND flash or eMMC. Due to
the higher quantity of resources, these devices are often capable of
storing multiple copies of their firmware images and selecting the most
appropriate one to boot. Many SoCs also support bootloaders that are
capable of updating the firmware image, however this is typically a last
resort because it requires the device to be held in the bootloader while
the new firmware is downloaded and installed, which results in down-time
for the device. Firmware updates in this class of device are typically
not done in-place.</t>

</section>
<section anchor="dual-cpu-shared-memory" title="Dual CPU, shared memory">

<t>This configuration has two or more heterogeneous CPUs in a single SoC that share
memory (flash and RAM).  Generally, they will be a protection mechanism
to prevent one CPU from accessing the other’s memory. Upgrades in this
case will typically be done by one of the CPUs, and is similar to the
single CPU with secure mode.</t>

</section>
<section anchor="dual-cpu-other-bus" title="Dual CPU, other bus">

<t>This configuration has two or more heterogeneous CPUs, each having their own memory.
There will be a communication channel between them, but it will be
used as a peripheral, not via shared memory.  In this case, each CPU
will have to be responsible for its own firmware upgrade.  It is
likely that one of the CPUs will be considered the primary CPU, and will
direct the other CPU to do the upgrade.  This configuration is
commonly used to offload specific work to other CPUs.  Firmware
dependencies are similar to the other solutions above, sometimes
allowing only one image to be upgraded, other times requiring several
to be upgraded atomically.  Because the updates are happening on
multiple CPUs, upgrading the two images atomically is challenging.</t>

</section>
</section>
<section anchor="bootloader" title="Bootloader">

<t>More devices today than ever before are being connected to the Internet,
which drives the need for firmware updates to be provided over the
Internet rather than through traditional interfaces, such as USB or
RS232. Updating a device over the Internet requires the device to fetch
not only the firmware image but also the manifest. Hence, the following
building blocks are necessary for a firmware update solution:</t>

<t><list style="symbols">
  <t>the Internet protocol stack for firmware downloads (*),</t>
  <t>the capability to write the received firmware image to
persistent storage (most likely flash memory) prior to performing
the update,</t>
  <t>the ability to unpack, decompress or otherwise process the received
firmware image,</t>
  <t>the features to verify an image and a manifest, including digital
signature verification or checking a message authentication code,</t>
  <t>a manifest parsing library, and</t>
  <t>integration of the device into a device management server to
perform automatic firmware updates and to track their progress.</t>
</list></t>

<t>(*) Because firmware images are often multiple kilobytes, sometimes
exceeding one hundred kilobytes, in size for low end IoT devices and even
several megabytes large for IoT devices running full-fledged operating systems
like Linux, the protocol mechanism for retrieving these images needs
to offer features like congestion control, flow control, fragmentation
and reassembly, and mechanisms to resume interrupted or corrupted transfers.</t>

<t>All these features are most likely offered by the application, i.e.
firmware consumer, running
on the device (except for basic security algorithms that may run
either on a trusted execution environment or on a separate hardware
security MCU/module) rather than by the bootloader itself.</t>

<t>Once manifests have been processed and firmware images successfully
downloaded and verified the device needs to hand control over to the
bootloader.  In most cases this requires the MCU to restart. Once the
MCU has initiated a restart, the bootloader takes over control and
determines whether the newly downloaded firmware
image should be executed.</t>

<t>The boot process is security sensitive
because the firmware images may, for example, be stored in off-chip
flash memory giving attackers easy access to the image for reverse
engineering and potentially also for modifying the binary.  The
bootloader will therefore have to perform security checks on the
firmware image before it can be booted. These security checks by the
bootloader happen in addition to the security checks that happened
when the firmware image and the manifest were downloaded.</t>

<t>The manifest may have been stored alongside the firmware image to
allow re-verification of the firmware image during every boot
attempt.  Alternatively, secure boot-specific meta-data may have been
created by the application after a successful firmware download
and verification process.  Whether to re-use the standardized
manifest format that was used during the initial firmware retrieval
process or whether it is better to use a different format for the
secure boot-specific meta-data depends on the system design.  The
manifest format does, however, have the capability to serve also as a
building block for secure boot with its severable elements that allow
shrinking the size of the manifest by stripping elements that are no
longer needed.</t>

<t>In order to satisfy the reliability requirements defined in
<xref target="reliability"/>, devices must always be able to return to a working
firmware image. This has implications for the design of the bootloader:
If the firmware image contains the firmware consumer
functionality, as described above, then the bootloader must be able to
roll back to a working firmware image. Alternatively, the bootloader
may have enough functionality to
fetch a firmware image plus manifest from a firmware server over the
Internet.  A multi-stage bootloader may soften this requirement at
the expense of a more sophisticated boot process.</t>

<t>For a bootloader to offer a secure boot mechanism it needs to provide
the following features:</t>

<t><list style="symbols">
  <t>ability to access security algorithms, such as SHA-256 to compute
a fingerprint over the firmware image and a digital signature
algorithm.</t>
  <t>access keying material directly or indirectly to utilize the
digital signature.  The device needs to have a trust anchor store.</t>
  <t>ability to expose boot process-related data to the application
firmware (such as to the device management software).  This allows
a device management server to determine whether the firmware
update has been successful and, if not, what errors occurred.</t>
  <t>to (optionally) offer attestation information (such as
measurements).</t>
</list></t>

<t>While the software architecture of the bootloader and its
security mechanisms are implementation-specific, the manifest can
be used to control the firmware download from the Internet in
addition to augmenting secure boot process. These building blocks
are highly relevant for the design of the manifest.</t>

</section>
<section anchor="example" title="Example">

<t><xref target="firmware-update"/> illustrates an example message flow
for distributing a firmware image to a device
starting with an author uploading the new firmware to
firmware server and creating a manifest. The firmware
and manifest are stored on the same firmware server. This
setup does not use a status tracker and the firmware consumer
component is therefore responsible for periodically checking
whether a new firmware image is available for download.</t>

<figure title="First Example Flow for a Firmware Upate." anchor="firmware-update"><artwork><![CDATA[
+--------+    +-----------------+      +------------+ +----------+
|        |    |                 |      |  Firmware  | |          |
| Author |    | Firmware Server |      |  Consumer  | |Bootloader|
+--------+    +-----------------+      +------------+ +----------+
  |                   |                     |                +
  | Create Firmware   |                     |                |
  |--------------+    |                     |                |
  |              |    |                     |                |
  |<-------------+    |                     |                |
  |                   |                     |                |
  | Upload Firmware   |                     |                |
  |------------------>|                     |                |
  |                   |                     |                |
  | Create Manifest   |                     |                |
  |---------------+   |                     |                |
  |               |   |                     |                |
  |<--------------+   |                     |                |
  |                   |                     |                |
  | Sign Manifest     |                     |                |
  |-------------+     |                     |                |
  |             |     |                     |                |
  |<------------+     |                     |                |
  |                   |                     |                |
  | Upload Manifest   |                     |                |
  |------------------>|                     |                |
  |                   |                     |                |
  |                   |   Query Manifest    |                |
  |                   |<--------------------|                |
  |                   |                     |                |
  |                   |   Send Manifest     |                |
  |                   |-------------------->|                |
  |                   |                     | Validate       |
  |                   |                     | Manifest       |
  |                   |                     |---------+      |
  |                   |                     |         |      |
  |                   |                     |<--------+      |
  |                   |                     |                |
  |                   |  Request Firmware   |                |
  |                   |<--------------------|                |
  |                   |                     |                |
  |                   | Send Firmware       |                |
  |                   |-------------------->|                |
  |                   |                     | Verify         |
  |                   |                     | Firmware       |
  |                   |                     |--------------+ |
  |                   |                     |              | |
  |                   |                     |<-------------+ |
  |                   |                     |                |
  |                   |                     | Store          |
  |                   |                     | Firmware       |
  |                   |                     |-------------+  |
  |                   |                     |             |  |
  |                   |                     |<------------+  |
  |                   |                     |                |
  |                   |                     |                |
  |                   |                     | Trigger Reboot |
  |                   |                     |--------------->|
  |                   |                     |                |
  |                   |                     |                |
  |                   |                 +---+----------------+--+
  |                   |                S|   |                |  |
  |                   |                E|   | Verify         |  |
  |                   |                C|   | Firmware       |  |
  |                   |                U|   | +--------------|  |
  |                   |                R|   | |              |  |
  |                   |                E|   | +------------->|  |
  |                   |                 |   |                |  |
  |                   |                B|   | Activate new   |  |
  |                   |                O|   | Firmware       |  |
  |                   |                O|   | +--------------|  |
  |                   |                T|   | |              |  |
  |                   |                 |   | +------------->|  |
  |                   |                P|   |                |  |
  |                   |                R|   | Boot new       |  |
  |                   |                O|   | Firmware       |  |
  |                   |                C|   | +--------------|  |
  |                   |                E|   | |              |  |
  |                   |                S|   | +------------->|  |
  |                   |                S|   |                |  |
  |                   |                 +---+----------------+--+
  |                   |                     |                |
]]></artwork></figure>

<t><xref target="firmware-update2"/> shows an example follow with the device using
a status tracker. For editorial reasons the author publishing the
manifest at the status tracker and the firmware image at the firmware
server is not shown. Also omitted is the secure boot process
following the successful firmware update process.</t>

<t>The exchange starts with the device interacting with the status
tracker; the details of such exchange will vary with the different
device management systems being used. In any case, the status
tracker learns about the firmware version of the devices it
manages. In our example, the device under management is using
firmware version A.B.C. At a later point in time the author uploads
a new firmware along with the manifest to the firmware server and the
status tracker, respectively. While there is no need to store the
manifest and the firmware on different servers this example shows
a common pattern used in the industry. The status tracker may then
automatically, based on human intervention or based on a more
complex policy decide to inform the device about the newly available
firmware image. In our example, it does so by pushing the manifest
to the firmware consumer. The firmware consumer downloads the firmware
image with the newer version X.Y.Z after successful validation
of the manifest. Subsequently, a reboot is initiated and the secure
boot process starts.</t>

<figure title="Second Example Flow for a Firmware Upate." anchor="firmware-update2"><artwork><![CDATA[
 +---------+   +-----------------+    +-----------------------------+
 | Status  |   |                 |    | +------------+ +----------+ |
 | Tracker |   | Firmware Server |    | |  Firmware  | |Bootloader| |
 |         |   |                 |    | |  Consumer  | |          | |
 +---------+   +-----------------+    | +------------+ +----------+ |
      |                |              |      |  IoT Device    |     |
      |                |               `''''''''''''''''''''''''''''
      |                |                     |                |
      |        Query Firmware Version        |                |
      |------------------------------------->|                |
      |        Firmware Version A.B.C        |                |
      |<-------------------------------------|                |
      |                |                     |                |
      |         <<some time later>>          |                |
      |                |                     |                |
    _,...._         _,...._                  |                |
  ,'       `.     ,'       `.                |                |
 |   New     |   |   New     |               |                |
 \ Manifest  /   \ Firmware  /               |                |
  `.._   _,,'     `.._   _,,'                |                |
      `''             `''                    |                |
      |            Push manifest             |                |
      |----------------+-------------------->|                |
      |                |                     |                |
      |                '                     |                '
      |                |                     | Validate       |
      |                |                     | Manifest       |
      |                |                     |---------+      |
      |                |                     |         |      |
      |                |                     |<--------+      |
      |                | Request firmware    |                |
      |                | X.Y.Z               |                |
      |                |<--------------------|                |
      |                |                     |                |
      |                | Firmware X.Y.Z      |                |
      |                |-------------------->|                |
      |                |                     |                |
      |                |                     | Verify         |
      |                |                     | Firmware       |
      |                |                     |--------------+ |
      |                |                     |              | |
      |                |                     |<-------------+ |
      |                |                     |                |
      |                |                     | Store          |
      |                |                     | Firmware       |
      |                |                     |-------------+  |
      |                |                     |             |  |
      |                |                     |<------------+  |
      |                |                     |                |
      |                |                     |                |
      |                |                     | Trigger Reboot |
      |                |                     |--------------->|
      |                |                     |                |
      |                |                     |                |
      |                |                     | __..-------..._'
      |                |                    ,-'               `-.
      |                |                   |      Secure Boot    |
      |                |                   `-.                 _/
      |                |                     |`--..._____,,.,-'
      |                |                     |                |
]]></artwork></figure>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Firmware updates fix security vulnerabilities and are considered to be
an important building block in securing IoT devices. Due to the
importance of firmware updates for IoT devices the Internet
Architecture Board (IAB) organized a ‘Workshop on Internet of Things
(IoT) Software Update (IOTSU)’, which took place at Trinity College
Dublin, Ireland on the 13th and 14th of June, 2016 to take a look at
the big picture. A report about this workshop can be found at
<xref target="RFC8240"/>. A standardized firmware manifest format providing
end-to-end security from the author to the device will be specified
in a separate document.</t>

<t>There are, however, many other considerations raised during the
workshop. Many of them are outside the scope of standardization
organizations since they fall into the realm of product engineering,
regulatory frameworks, and business models. The following
considerations are outside the scope of this document, namely</t>

<t><list style="symbols">
  <t>installing firmware updates in a robust fashion so that the
update does not break the device functionality of the environment
this device operates in.</t>
  <t>installing firmware updates in a timely fashion considering the
complexity of the decision making process of updating devices,
potential re-certification requirements, and the need for user
consent to install updates.</t>
  <t>the distribution of the actual firmware update, potentially in
an efficient manner to a large number of devices without human
involvement.</t>
  <t>energy efficiency and battery lifetime considerations.</t>
  <t>key management required for verifying the digital signature
protecting the manifest.</t>
  <t>incentives for manufacturers to offer a firmware update mechanism
as part of their IoT products.</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their feedback:</t>

<t><list style="symbols">
  <t>Geraint Luff</t>
  <t>Amyas Phillips</t>
  <t>Dan Ros</t>
  <t>Thomas Eichinger</t>
  <t>Michael Richardson</t>
  <t>Emmanuel Baccelli</t>
  <t>Ned Smith</t>
  <t>Jim Schaad</t>
  <t>Carsten Bormann</t>
  <t>Cullen Jennings</t>
  <t>Olaf Bergmann</t>
  <t>Suhas Nandakumar</t>
  <t>Phillip Hallam-Baker</t>
  <t>Marti Bolivar</t>
  <t>Andrzej Puzdrowski</t>
  <t>Markus Gueller</t>
  <t>Henk Birkholz</t>
  <t>Jintao Zhu</t>
  <t>Takeshi Takahashi</t>
  <t>Jacob Beningo</t>
  <t>Kathleen Moriarty</t>
</list></t>

<t>We would also like to thank the WG chairs, Russ Housley, David Waltermire,
Dave Thaler for their support and their reviews.</t>

</section>


  </middle>

  <back>


    <references title='Informative References'>





<reference  anchor="RFC8240" target='https://www.rfc-editor.org/info/rfc8240'>
<front>
<title>Report from the Internet of Things Software Update (IoTSU) Workshop 2016</title>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<date year='2017' month='September' />
<abstract><t>This document provides a summary of the Internet of Things Software Update (IoTSU) Workshop that took place at Trinity College Dublin, Ireland on the 13th and 14th of June, 2016.  The main goal of the workshop was to foster a discussion on requirements, challenges, and solutions for bringing software and firmware updates to IoT devices. This report summarizes the discussions and lists recommendations to the standards community.</t><t>Note that this document is a report on the proceedings of the workshop.  The views and positions documented in this report are those of the workshop participants and do not necessarily reflect IAB views and positions.</t></abstract>
</front>
<seriesInfo name='RFC' value='8240'/>
<seriesInfo name='DOI' value='10.17487/RFC8240'/>
</reference>



<reference  anchor="RFC6024" target='https://www.rfc-editor.org/info/rfc6024'>
<front>
<title>Trust Anchor Management Requirements</title>
<author initials='R.' surname='Reddy' fullname='R. Reddy'><organization /></author>
<author initials='C.' surname='Wallace' fullname='C. Wallace'><organization /></author>
<date year='2010' month='October' />
<abstract><t>A trust anchor represents an authoritative entity via a public key and associated data.  The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative.  A relying party uses trust anchors to determine if a digitally signed object is valid by verifying a digital signature using the trust anchor's public key, and by enforcing the constraints expressed in the associated data for the trust anchor.  This document describes some of the problems associated with the lack of a standard trust anchor management mechanism and defines requirements for data formats and push-based protocols designed to address these problems.  This  document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract>
</front>
<seriesInfo name='RFC' value='6024'/>
<seriesInfo name='DOI' value='10.17487/RFC6024'/>
</reference>



<reference  anchor="RFC7228" target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='M.' surname='Ersue' fullname='M. Ersue'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2014' month='May' />
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference  anchor="RFC8778" target='https://www.rfc-editor.org/info/rfc8778'>
<front>
<title>Use of the HSS/LMS Hash-Based Signature Algorithm with CBOR Object Signing and Encryption (COSE)</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='2020' month='April' />
<abstract><t>This document specifies the conventions for using the Hierarchical Signature System (HSS) / Leighton-Micali Signature (LMS) hash-based signature algorithm with the CBOR Object Signing and Encryption (COSE) syntax. The HSS/LMS algorithm is one form of hash-based digital signature; it is described in RFC 8554.</t></abstract>
</front>
<seriesInfo name='RFC' value='8778'/>
<seriesInfo name='DOI' value='10.17487/RFC8778'/>
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>An Information Model for Firmware Updates in IoT Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='June' day='2' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality.  One component of such a firmware update is a concise and machine- processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-07' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-07.txt' />
</reference>



<reference anchor="I-D.ietf-teep-architecture">
<front>
<title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>

<author initials='M' surname='Pei' fullname='Mingliang Pei'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<author initials='D' surname='Wheeler' fullname='David Wheeler'>
    <organization />
</author>

<date month='July' day='13' year='2020' />

<abstract><t>A Trusted Execution Environment (TEE) is an environment that enforces that any code within that environment cannot be tampered with, and that any data used by such code cannot be read or tampered with by any code outside that environment.  This architecture document motivates the design and standardization of a protocol for managing the lifecycle of trusted applications running inside such a TEE.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-12' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-teep-architecture-12.txt' />
</reference>



<reference anchor="I-D.ietf-suit-manifest">
<front>
<title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<author initials='K' surname='Zandberg' fullname='Koen Zandberg'>
    <organization />
</author>

<date month='July' day='13' year='2020' />

<abstract><t>This specification describes the format of a manifest.  A manifest is a bundle of metadata about the firmware for an IoT device, where to find the firmware, the devices to which it applies, and cryptographic information protecting the manifest.  Firmware updates and secure boot both tend to use sequences of common operations, so the manifest encodes those sequences of operations, rather than declaring the metadata.  The manifest also serves as a building block for secure boot.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-09' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-manifest-09.txt' />
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC8392" target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='E.' surname='Wahlstroem' fullname='E. Wahlstroem'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2018' month='May' />
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>


<reference anchor="LwM2M" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf">
  <front>
    <title>Lightweight Machine to Machine Technical Specification, Version 1.0.2</title>
    <author initials="." surname="OMA" fullname="Open Mobile Alliance">
      <organization></organization>
    </author>
    <date year="2018" month="February" day="09"/>
  </front>
  <format type="PDF" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf"/>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIABVvW18AA9V9W5fbRpLme/4KHPvBVTZJyeqeS2u8PVO6uK1e67Kqcmt2
js+6QSJZRAsEuABYJVrS/vaNLyLyBoAqleTt2eGDVASRt8jIuEfkfD43fdlX
9n52ln1fttvrvLXZT7si72121q42ZW9X/Z6erZs2e1L3tq1tnzXr7GJT1ped
yZfL1l59XOvmwhTNqs63NFrR5ut+Xtp+Pe/2ZT/Po7fn394zK+rismkP97Oy
XjfGlLv2fta3+66/d/fuH+7eMzRSfj87t6t9W/YHc920ry/bZr+jZz89uTCv
7YEeFff9nOePMKIxXZ/XxS951dQ0i4PtzK68b7KsXa9s0fWHSp9mWd+soj/L
urB17x50Tdu3dt3574dt8rVvy5V/edVst9TW/1rWVVmHYeybfl6VXT+nTpZN
Ra/Nm6+/oV8IVtt8tyMwy7v5vt80LU12Tj/yp6zp7QeL7GnT5rV7KPB90Nq6
yOv0p6a9zOvy17wvm5q2rN1mP5ZbgnrhXrDbvKx84wU3/re83S5oDWY48A+L
7KJbbZq1rcvLdPQf8rq23cTPHzuDDXew6H0HR2fxaEHTba4Hy3+UX5VF+kM6
9I9lnbfNYNQCrRZLtPq3il9YUKvRkE8J4rYt81U65tOyami+g9/SYR82dbev
CAX7wdBbafxvW24sKwXmt1tqeWWBoi+/f/jP935/V//8x7v3fq9//tO9e//s
Xvinf+I/n8wfLcLh8h019XzbFLZKXumt3SXnb9zBlpawtl0/GAVj/8O3f3BP
f/eHe/jzx+un957e5/X1eXtp6SBs+n53/86d6+vrRbOz9bZZlpXNq6rM65UF
jO+0lh509s6P5eWmv7b4l3q585dvf7n7y735vbvf/vPde3f/MD+78/zp2fzi
fJ6+Nx+9t9gVa5mCULcvogbZ05wWW1s61/7PC7va1OUqr7LznV2Va/oT4Jpl
f7FtR39k3y7uLu59wV36gxhQgmZlYlx4Tquks4dlZme6Tn4BpPF+hnnO796b
3/0DP5TdcR2+ePT9fxrEzHw+z/IlEbB8RcTyL/uqtm1OY5d9SQf6uuw3E1wg
OyHafpoV9qpc0Vub/MpmbV52dKz7jc1qawvmADkRzorOJVHgrAPlJsbguMZe
uMaW9oGQrdtm/Sbvs5LIXtU1GbAwX1bCSFZ0iGiCtG2FG3NBs1o17Y4IVk8z
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
AhFkLSy93QAA

-->

</rfc>

