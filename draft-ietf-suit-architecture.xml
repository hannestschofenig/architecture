<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-architecture-13" category="info">

  <front>
    <title abbrev="A Firmware Update Architecture for IoT">A Firmware Update Architecture for Internet of Things</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="D." surname="Brown" fullname="David Brown">
      <organization>Linaro</organization>
      <address>
        <email>david.brown@linaro.org</email>
      </address>
    </author>
    <author initials="M." surname="Meriac" fullname="Milosch Meriac">
      <organization>Consultant</organization>
      <address>
        <email>milosch@meriac.com</email>
      </address>
    </author>

    <date year="2020" month="October" day="01"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Vulnerabilities with Internet of Things (IoT) devices have raised
the need for a solid and secure firmware update mechanism that is
also suitable for constrained devices. Incorporating such update
mechanism to fix vulnerabilities, to update configuration settings
as well as adding new functionality is recommended by security
experts.</t>

<t>In addition to the definition of terminology and an architecture
this document motivates the standardization of a manifest format
as transport-agnostic means for describing and protecting firmware 
updates.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Firmware updates can help to fix security vulnerabilities and are 
considered to be an important building block in securing IoT devices. 
Due to rising concerns about insecurre IoT devices the Internet
Architecture Board (IAB) organized a ‘Workshop on Internet of Things
(IoT) Software Update (IOTSU)’, which took place at Trinity College
Dublin, Ireland on the 13th and 14th of June, 2016 to take a look at
the bigger picture. A report about this workshop can be found at
<xref target="RFC8240"/>. The workshop revealed a number of challenges for developers
and the need to initiate standardization activites. The workshop
subsequently led to the formation of the IETF SUIT working group.</t>

<t>Developing secure Internet of Things (IoT) devices is not an easy 
task and supporting a firmware update solution requires skillful 
engineers. Once the device is deployed, firmware updates play a 
critical part in its lifecycle management, particularly when devices have a 
long lifetime, are deployed in remote or inaccessible areas where manual
intervention is cost prohibitive or otherwise difficult. Solutions 
for IoT devices are expected to work automatic, i.e. without user 
involvement. Automatic updates that do not require human intervention 
are key to a scalable solution for fixing software vulnerabilities.</t>

<t>Updates to the firmware of an IoT device are not only done to fix 
bugs, but they can also add new functionality, and to re-configure
the device to work in new environments or to behave differently in 
an already deployed context.</t>

<t>The firmware update process has to ensure that</t>

<t><list style="symbols">
  <t>The firmware image is authenticated and integrity protected.
Attempts to flash a maliciously modified firmware image or an image from
an unknown, untrusted source are prevented.</t>
  <t>The firmware image can be confidentiality protected so that
attempts by an adversary to recover the plaintext binary can
be prevented or at least made more difficult. Obtaining the firmware is often one of
the first steps to mount an attack since it gives the adversary
valuable insights into used software libraries, configuration
settings and generic functionality (even though reverse
engineering the binary can be a tedious process).</t>
</list></t>

<t>In examples this document uses asymmetric cryptography 
because it is the preferred approach by many IoT deployments. The 
use of symmetric credentials is also supported and can be used by<vspace />
very constrained IoT devices.</t>

<t>While the standardization work has been informed by and optimised for firmware
update use cases of Class 1 devices (according to the device class
definitions in RFC 7228 <xref target="RFC7228"/>) devices, there is nothing in
the architecture that restricts its use to only these constrained IoT devices.
Moreover, this architecture is not limited to managing software updates,
but can also be applied to managing the delivery of arbitrary data, such
as configuration information and keys. Unlike higher end devices, like 
laptops and desktop PCs, many IoT devices do not have user interfaces 
and support for unattended updates are therefore essential for the design
of a practical solution. Constrained IoT devices often use a 
software engineering model where a developer is responsible for creating
and compiling all software running on the device into a single, monolithic 
firmware image. On higher end devices application software is, on the other 
hand, often downloaded separately and even obtained from developers different 
to the developers of the lower level software. The details for how to obtain 
those application layer software binaries then depends heavily on the platform, 
programming language uses and the sandbox the software is executed in.</t>

<t>While the IETF standardization work has been focused on the 
manifest format, a fully interoperable solution needs more than a standardized 
manifest. For example, protocols for transferring firmware images 
and manifests to the device need to be available as well as the status tracker 
functionality. These building blocks have been developed by various organizations 
under the umbrella of an IoT device management solution. The LwM2M protocol is one 
IoT device management protocol.</t>

<t>There are, however, several areas that fall outside the scope of the IETF
and other standards organizations but need to be considered by firmware authors, 
as well as device and network operators. Here are some of them, as highlighted during 
the IOTSU workshop:</t>

<t><list style="symbols">
  <t>Installing firmware updates in a robust fashion so that the
update does not break the device functionality of the environment
this device operates in. This requires proper testing and offering 
recovery strategies when a firmware update is unsuccessful.</t>
  <t>Making firmware updates available in a timely fashion considering the
complexity of the decision making process for updating devices,
potential re-certification requirements, the length of a supply chain 
an update needs to go through before it reaches the end customer, 
and the need for user consent to install updates.</t>
  <t>Ensuring an energy efficient design of a battery-powered IoT devices because a 
firmware update (particularly writing the firmware image to flash).</t>
  <t>Creating incentives for device operators to use a firmware update mechanism and to 
demand the integration of a firmware update mechanism from IoT device vendors.</t>
</list></t>

<t>This document is structured as follows. <xref target="terminology"/> offers terminology for 
talking about firmware updates supporting the standardization of a manfest format.</t>

</section>
<section anchor="terminology" title="Conventions and Terminology">

<t>This document uses the following terms:</t>

<t><list style="symbols">
  <t>Manifest: The manifest contains meta-data about the firmware
image. The manifest is protected against modification and
provides information about the author.</t>
  <t>Firmware Image: The firmware image, or image, is a binary
that may contain the complete software of a device or a subset of
it. The firmware image may consist of multiple images, if
the device contains more than one microcontroller. Often
it is also a compressed archive that contains code,
configuration data, and even the entire file system. The
image may consist of a differential update for performance
reasons. Firmware is the more universal term. The terms,
firmware image, firmware, and image, are used in this
document and are interchangeable. The term application firmware
image is used to differentiate it from a firmware image that 
contains the bootloader. An application firmware image, as the 
name indicates, contains the application program often including 
all the necessary code to run it (such as protocol stacks, and 
embedded operating system).</t>
  <t>Software: The terms “software” and “firmware” are used
interchangeably.</t>
  <t>Microcontroller (MCU for microcontroller unit): An MCU is a
compact integrated circuit designed for use in embedded systems.
A typical microcontroller includes a processor, memory (RAM and
flash), input/output (I/O) ports and other features connected via
some bus on a single chip. The term ’system on chip (SoC)’ is 
often used interchangeably with MCU, but MCU tends to imply more 
limited peripheral functions.</t>
  <t>System on Chip (SoC): An SoC is an integrated circuit that
integrates all components of a computer, such as CPU, memory,
input/output ports, secondary storage, etc.</t>
  <t>Homogeneous Storage Architecture (HoSA): A device that stores
all firmware components in the same way, for example in a file
system or in flash memory.</t>
  <t>Heterogeneous Storage Architecture (HeSA): A device that
stores at least one firmware component differently from the rest,
for example a device with an external, updatable radio, or a
device with internal and external flash memory.</t>
  <t>Trusted Execution Environments (TEEs): An execution environment
that runs alongside of, but is isolated from, an REE. For more 
information about TEEs see <xref target="I-D.ietf-teep-architecture"/>.</t>
  <t>Rich Execution Environment (REE): An environment that is provided
and governed by a typical OS (e.g., Linux, Windows, Android, iOS),
potentially in conjunction with other supporting operating systems
and hypervisors; it is outside of the TEE.  This environment and
applications running on it are considered un-trusted.</t>
  <t>Trusted applications (TAs): An application component that runs in
a TEE.</t>
  <t>Trust Anchor: A trust anchor, as defined in <xref target="RFC6024"/>, represents 
an authoritative entity via a public key and associated data.  The 
public key is used to verify digital signatures, and the associated 
data is used to constrain the types of information for which the 
trust anchor is authoritative.”</t>
  <t>Trust Anchor Store: A trust anchor store, as defined in <xref target="RFC6024"/>, 
is a set of one or more trust anchors stored in a device.  A device 
may have more than one trust anchor store, each of which may be used 
by one or more applications. A trust anchor store must resist 
modification against unauthorized insertion, deletion, and modification.</t>
</list></t>

<section anchor="stakeholders" title="Stakeholders">

<t>The following stakeholders are used in this document:</t>

<t><list style="symbols">
  <t>Author: The author is the entity that creates the firmware image.
There may be multiple authors involved in producing firmware running 
on an IoT device. <xref target="device"/> talks about those IoT device deployment cases.</t>
  <t>Device Operator: The device operator is responsible for the day-to-day operation
of a fleet of IoT devices. Customers of IoT devices, as the owners of 
IoT devices - such as enterprise customers or end users, interact 
with their IoT devices indirectly through the device operator via 
web or smart phone apps.</t>
  <t>Network Operator: The network operator is responsible for the operation of a
network to which IoT devices connect.</t>
  <t>Trust Provisioning Authority (TPA): The TPA distributes
trust anchors and authorization policies to various stakeholders. 
The TPA may also delegate rights to stakeholders. For example,
in some cases, the Original Design Manufacturer (ODM), which is a
company that designs and manufactures a product, may act as a
TPA and may decide to remain in full control over the firmware
update process of their products.</t>
</list></t>

<section anchor="functions" title="Functions">

<t><list style="symbols">
  <t>(IoT) Device: A device refers to the entire IoT product, which
consists of one or many MCUs, sensors and/or actuators. Many IoT
devices sold today contain multiple MCUs and therefore a single
device may need to obtain more than one firmware image and
manifest to succesfully perform an update.</t>
  <t>Status Tracker: The status tracker has a client and a server component
and performs three tasks: 
1) It communicates the availability of a new firmware version. This 
   information will flow from the server to the server. <vspace />
2) It conveys information about software and hardware characteristics of 
   the device. The information flow is from the client to the server. <vspace />
3) It can trigger the firmware update process on the device. The 
   information flow is from the server to the client.  <vspace blankLines='1'/>
For example, a device operator may want to read the installed firmware
version number running on the device and information 
about available flash memory. Once an update has been triggered, the device 
operator may want to obtain the state information about the firmware 
update process. If errors occurred, the device operator may want to 
troubleshoot problems by first obtaining diagnostic information (typically 
using a device management software).  <vspace blankLines='1'/>
We make no 
assumptions about where the server-side component is deployed. The 
deployment of status trackers is flexible and may be found at<vspace />
cloud-based servers, on-premise servers, or may be embedded in edge 
computing device. A status tracker server component may even be 
deployed on an IoT device. For example, if the IoT device contains 
multiple MCUs, then the main MCU may act as a status tracker towards the 
other MCUs. Such deployment is useful when updates have to be 
synchronized across MCUs.</t>
  <t>Firmware Consumer: The firmware consumer is the recipient of the
firmware image and the manifest. It is responsible for parsing
and verifying the received manifest and for storing the obtained
firmware image. The firmware consumer plays the role of the
update component on the IoT device typically running in the
application firmware. It interacts with the firmware server and
with the status tracker, if present.</t>
  <t>Firmware Server: The firmware server stores firmware images and 
manifests and distributes them to IoT devices. Some deployments 
may require a store-and-forward concept, which requires storing 
the firmware images/manifests on more than one entity before<vspace />
they reach the device. There is typically some interaction between the
firmware server and the status tracker and these two entities are often
physically separated on different devices for scalability reasons.</t>
  <t>Bootloader: A bootloader is a piece of software that is
executed once a microcontroller has been reset. It is
responsible for deciding what code to execute.</t>
</list></t>

</section>
</section>
</section>
<section anchor="architecture" title="Architecture">

<t>More devices today than ever before are being connected to the Internet,
which drives the need for firmware updates to be provided over the
Internet rather than through traditional interfaces, such as USB or
RS232. Updating a device over the Internet requires the device to fetch
the new firmware image and the manifest.</t>

<t>Hence, the following components are necessary on a device for a firmware 
update solution:</t>

<t><list style="symbols">
  <t>the Internet protocol stack for firmware downloads (*),</t>
  <t>the capability to write the received firmware image to
persistent storage (most likely flash memory) prior to performing
the update,</t>
  <t>a manifest parser with code to verify a digital
signature or a message authentication code,</t>
  <t>the ability to unpack, to decompress and/or to decrypt the 
received firmware image,</t>
  <t>(optionally) a status tracker.</t>
</list></t>

<t>(*) Because firmware images are often multiple kilobytes, sometimes
exceeding one hundred kilobytes, in size for low end IoT devices and even
several megabytes large for IoT devices running full-fledged operating systems
like Linux, the protocol mechanism for retrieving these images needs
to offer features like congestion control, flow control, fragmentation
and reassembly, and mechanisms to resume interrupted or corrupted transfers.</t>

<t>The features listed above are most likely offered by code in the application firmware 
image, or more precisely by the firmware consumer, running
on the device rather than by the bootloader itself. Note that 
cryptographic algorithms will likely run in a trusted execution 
environment, on a separate MCU, in a hardware security module, or in a secure element
rather than in the same context with the application code.</t>

<t><xref target="arch-figure"/> shows the architecture where a
firmware image is created by an author, and made available to a firmware
server. For security reasons, the author will not have the permissions to 
upload firmware images to the firmware server and to initiate an update him- or herself. 
Instead, authors will make firmware images available to the device operators. Note that 
there may be a longer supply chain involved to pass software updates from the author all 
the way to the party that can then finally make a decision to deploy it with IoT devices.</t>

<t>As a first step in the firmware update process, the firmware consumer needs to be 
made aware of the availability of a new firmware update by the status tracker. This can 
be accomplished via polling (client-initiated), push notifications (server-initiated),
or more complex mechanisms (such as a hybrid approach):</t>

<t><list style="symbols">
  <t>Client-initiated updates take the form of a firmware consumer on
a device proactively checking (polling) for updates.</t>
  <t>With Server-initiated updates the server-side component of the status tracker 
learns about a new firmware version and determines what devices qualify for a 
firmware update. Once the relevant devices have been selected the updates 
are distributed to the firmware consumers on those devices. Server-initiated 
updates are important because they allow timely update of firmware images.
Note that the client-side status tracker needs to be reachable by the server-side
component. This may require devices to keep reachability information on the 
server-side up-to-date and to keep state at NATs and stateful packet filtering 
firewalls alive.</t>
  <t>Using a hybrid approach the server-side of the status tracker
pushes notifications of availability of an update to the client side and requests 
the firmware consumer to pull the manifest and the firmware image from the 
firmware server.</t>
</list></t>

<t>Once the device operator triggers update via the status tracker, it will keep 
track of the update process on the device. This allows the device operator to know what 
devices have received an update and which of them are still pending an update.</t>

<t>Firmware images can be conveyed to devices in a variety of ways,
including USB, UART, WiFi, BLE, low-power WAN technologies. At the application layer 
a variety of different protocols may be used as well. MQTT, CoAP, and HTT are the 
most popular application layer protocols used by IoT devices. This architecture 
does not make assumptions about how the firmware images are distributed to the 
devices.</t>

<t>In some cases it may be desireable to distribute firmware images using a multicast
or broadcast protocol. This architecture does not make any assumptions about such 
a protocol. However, given that broadcast may be desirable for some networks,
updates must cause the least disruption possible both in metadata
and firmware transmission.</t>

<t>For an update to be broadcast friendly, it cannot rely on link
layer, network layer, or transport layer security. A solution has
to rely on security protection applied to the manifest and firmware image
instead. In addition,
the same manifest must be deliverable to many devices, both those
to which it applies and those to which it does not, without a
chance that the wrong device will accept the update. Considerations
that apply to network broadcasts apply equally to the use of
third-party content distribution networks for payload distribution.</t>

<figure title="Architecture." anchor="arch-figure"><artwork><![CDATA[
                                                      +----------+
                                                      |          |
                                                      |  Author  |
                                                      |          |
                                                      +----------+
                       Firmware + Manifest                 |
              +----------------------------------+         | Firmware +
              |                                  |         | Manifest
              |                               ---+-------  |
              |                           ----   |       --|-
              |                         //+----------+     | \\
             -+--                      // |          |     |   \
        ----/ |  ----                |/   | Firmware |<-+  |    \
      //      |      \\              |    | Server   |  |  |     \
     /        |        \             /    |          |  +  +      \
    /         |         \           /     +----------+   \ /       |
   / +--------+--------+ \         /                      |        |
  /  |        v        |  \       /                       v        |
 |   | +------------+  |   |     |          +----------------+      |
 |   | |  Firmware  |  |                    |     Device     |      |
 |   | |  Consumer  |  |   |     |          |     Management |      |
|    | +------------+  |    |    |          |                |      |
|    | +------------+  |    |    |          |    +--------+  |      |
|    | |  Status    |<-+--------------------+->  |        |  |      |
|    | |  Tracker   |  |    |    |          |    | Status |  |      |
|    | |  Client    |  |    |    |          |    | Tracker|  |     |
 |   | +------------+  |   |     |          |    | Server |  |     |
 |   |    Device       |   |      |         |    +--------+  |     |
 |   +-----------------+   |       \        |                |    /
  \                       /         \       +----------------+   /
   \       Network       /           \                          /
    \     Operator      /             \     Device Operator    /
      \\             //                \ \                   //
        ----     ----                     ----           ----
            -----                             -----------
]]></artwork></figure>

<t>Firmware images and manifests may be conveyed as a bundle or detached. The 
manifest must support both approaches.</t>

<t>For distribution as a bundle, the firmware image is embedded into a manifest.
This is a useful approach for deployments where devices are not connected
to the Internet and cannot contact a dedicated firmware server for the firmware
download. It is also applicable when the firmware update happens via a
USB sticks or short range radio technologies (such as Bluetooth Smart).</t>

<t>Alternatively, the manifest is distributed detached from the firmware image. 
Using this approach, the firmware consumer is presented with the manifest first 
and then needs to obtain one or more firmware images as dictated in the 
manifest.</t>

<t>The pre-authorisation step involves verifying whether the entity
signing the manifest is indeed authorized to perform an update.
The firmware consumer must also determine whether it should fetch and
process a firmware image, which is referenced in a manifest.</t>

<t>A dependency resolution phase is needed when more than one
component can be updated or when a differential update is used.
The necessary dependencies must be available prior to installation.</t>

<t>The download step is the process of acquiring a local copy of the
firmware image.  When the download is client-initiated, this means
that the firmware consumer chooses when a download occurs and initiates
the download process.  When a download is server-initiated,
this means that the status tracker tells
the device when to download or that it initiates the transfer
directly to the firmware consumer. For example, a download from an
HTTP-based firmware server is client-initiated. Pushing a manifest
and firmware image to the Package resource of the LwM2M
Firmware Update object <xref target="LwM2M"/> is server-initiated update.</t>

<t>If the firmware consumer has downloaded a new firmware image and is ready to
install it, to initiate the installation, it may 
- either need to wait for a trigger from the status tracker, 
- or trigger the update automatically, 
- or go through a more complex decision making process to determine 
the appropriate timing for an update.</t>

<t>Installation is the act of processing the payload into a format that
the IoT device can recognise and the bootloader is responsible for
then booting from the newly installed firmware image.</t>

</section>
<section anchor="bootloader" title="The Bootloader">

<t><xref target="architecture"/> describes the steps for getting the firmware image and the manifest
from the author to the firmware consumer on the IoT device. Once the firmware consumer 
has retrieved and successfully processed the manifest and the firmware image it needs 
to hand control over to the bootloader.</t>

<t>In most cases this requires the MCU to restart. Once the
MCU has initiated a restart, the bootloader determines whether a newly available 
firmware image should be executed.</t>

<t>A power failure at any time during a firmware update must not cause a failure 
of the device. Equally, adverse network conditions during an update must not 
cause the failure of the device.</t>

<t>One way to achieve this functionality is to provide a minimum of two storage 
locations for firmware. An alternative approach is to use a second stage 
bootloader with build-in full featured firmware update functionality such 
that it is possible to return to the update process after power down.</t>

<t>Assuming the first approach, there are (at least) three firmware images available
on the device:</t>

<t><list style="symbols">
  <t>First, the bootloader itself is a firmware image.</t>
  <t>Second, the firmware image that has to be replaced is still available on the 
device as a backup in case the freshly downloaded firmware image does not 
boot correctly.</t>
  <t>Third, there is the newly downloaded firmware image.</t>
</list></t>

<t>To differentiate the firmware image of the bootloader from the other firmware 
images that contain application code we refer to the latter as application 
firmware images.</t>

<t>Since many low end IoT devices use non-relocatable code, 
the bootloader needs to copy the newly downloaded application firmware image 
into the location of the old application firmware image and vice versa.</t>

<t>The boot process is security sensitive. An attacker will typically try to 
retrieve a firmware image from the device for reverse engineering or will try to get 
the bootloader to excute an attacker-modified firmware image. The
bootloader will therefore have to perform security checks on the
firmware image before it can be booted. These security checks by the
bootloader happen in addition to the security checks that happened
when the firmware image and the manifest were downloaded by the firmware consumer.</t>

<t>The manifest will likely be stored alongside the firmware image on flash to
allow re-verification of the firmware image with every boot
attempt. The firmware consumer may strip information from the manifest instead of 
storing the complete manifest.  Whether to re-use the standardized
manifest format also for the boot process or to use a different format for the
secure boot-specific meta-data depends on the system design.  The
manifest format does, however, have the capability to serve also as a
building block for secure boot with its severable elements that allow
shrinking the size of the manifest by stripping elements that are no
longer needed.</t>

<t>The design of a reliable firmware update solution requires devices 
to return to a working firmware image. This has implications for the 
design of the bootloader.
If the firmware image contains the firmware consumer
functionality, as described above, then the bootloader must be able to
roll back to a working firmware image. Alternatively, the bootloader
may have enough functionality to
fetch a firmware image plus manifest from a firmware server over the
Internet.  A multi-stage bootloader may soften this requirement at
the expense of a more sophisticated boot process.</t>

<t>For a bootloader to offer a secure boot functionality it needs to 
implement the following functionality:</t>

<t><list style="symbols">
  <t>Cryptographic libraries with hash functions, digital signatures
(for asymmetric crypto), keyed message digests (for symmetric 
crypto).</t>
  <t>The device needs to have a trust anchor store to verify the 
digital signature. (Alternatively, access to a key store for use 
with the keyed message digest.)</t>
  <t>Ability to expose boot process-related data to the application
firmware (such as to the status tracker).  This allows
to share information about the current firmware version, and the 
status of the firmware update process and whether errors have occurred.</t>
  <t>Offer attestation information, such as boot measurements. (optional)</t>
  <t>Ability to decrypt firmware images, in case confidentiality protection 
was applied). This requires a solution for key management. (optional)</t>
</list></t>

<t>Throughout this document we assume that the bootloader itself is
distinct from the role of the firmware consumer and therefore does not
manage the firmware update process. This may give the impression
that the bootloader itself is a completely separate component,
which is mainly responsible for selecting a firmware image to boot.</t>

<t>The overlap between the firmware update process and the bootloader
functionality comes in two forms, namely</t>

<t><list style="symbols">
  <t>First, a bootloader must verify the firmware image it boots as
part of the secure boot process. Doing so requires meta-data to be
stored alongside the firmware image so that the bootloader can
cryptographically verify the firmware image before booting it to
ensure it has not been tampered with or replaced. This meta-data
used by the bootloader may well be the same manifest obtained with the
firmware image during the update process (with the severable
fields stripped off).</t>
  <t>Second, an IoT device needs a recovery strategy in case the firmware
update / boot process fails. As mentioned earlier, the recovery 
strategy may includestoring two or more application firmware images 
on the device or offering the ability to have a second stage bootloader 
perform the firmware update process again using firmware updates over 
serial, USB or even wireless connectivity like Bluetooth Smart.
In the latter case the firmware consumer functionality is contained in the
second stage bootloader and requires the necessary functionality for
executing the firmware update process, including manifest parsing.</t>
</list></t>

<t>In general, it is assumed that the bootloader itself, or a minimal part of it,
will not be updated since a failed update of the bootloader poses a 
reliability risk.</t>

</section>
<section anchor="device" title="Types of IoT Devices">

<t>There are billions of MCUs used in devices today produced by a large 
number of silicon manufacturers. While MCUs can vary significantly 
in their characteristics, there are a number of similiaries allowing 
us to categorize in groups.</t>

<t>The firmware update architecture, and the manifest format in particular, 
needs to offer enough flexibility to cover the most common deployment cases.</t>

<section anchor="single-mcu" title="Single MCU">

<t>The simplest, and currently most common, architecture consists of
a single MCU along with its own peripherals.  These SoCs generally
contain some amount of flash memory for code and fixed data, as
well as RAM for working storage.  A notable characteristic of these 
SoCs is that the primary code is generally execute in place (XIP). 
Due to the non-relocatable nature of the code, the firmware image 
needs to be placed in a specific location in flash since the code 
cannot be executed from an arbitrary location in flash. Hence, then 
the firmware image is updated it is necessary to swap the old and 
the new image.</t>

</section>
<section anchor="single-cpu-with-secure-normal-mode-partitioning" title="Single CPU with Secure - Normal Mode Partitioning">

<t>Another configuration consists of a similar architecture to the
previous, with a single CPU.  However, this CPU supports a security
partitioning scheme that allows memory (in addition to other things)
to be divided into secure and normal mode.  There will generally be
two images, one for secure mode, and one for normal mode.  In this
configuration, firmware upgrades will generally be done by the CPU
in secure mode, which is able to write to both areas of the flash
device. In addition, there are requirements to be able to update
either image independently, as well as to update them together
atomically, as specified in the associated manifests.</t>

</section>
<section anchor="symmetric-multiple-cpus" title="Symmetric Multiple CPUs">

<t>In more complex SoCs with symmetric multi-processing support, advanced
operating systems, such as Linux, are often used. These SoCs frequently
use an external storage medium, such as raw NAND flash or eMMC. Due to
the higher quantity of resources, these devices are often capable of
storing multiple copies of their firmware images and selecting the most
appropriate one to boot. Many SoCs also support bootloaders that are
capable of updating the firmware image, however this is typically a last
resort because it requires the device to be held in the bootloader while
the new firmware is downloaded and installed, which results in down-time
for the device. Firmware updates in this class of device are typically
not done in-place.</t>

</section>
<section anchor="dual-cpu-shared-memory" title="Dual CPU, shared memory">

<t>This configuration has two or more heterogeneous CPUs in a single SoC that 
share memory (flash and RAM).  Generally, there will be a mechanism to prevent 
one CPU from unintentionally accessing memory currently allocated to the other.
Upgrades in this case will typically be done by one of the CPUs, and is 
similar to the single CPU with secure mode.</t>

</section>
<section anchor="dual-cpu-other-bus" title="Dual CPU, other bus">

<t>This configuration has two or more heterogeneous CPUs, each having their own memory.
There will be a communication channel between them, but it will be
used as a peripheral, not via shared memory.  In this case, each CPU
will have to be responsible for its own firmware upgrade.  It is
likely that one of the CPUs will be considered the primary CPU, and will
direct the other CPU to do the upgrade.  This configuration is
commonly used to offload specific work to other CPUs.  Firmware
dependencies are similar to the other solutions above, sometimes
allowing only one image to be upgraded, other times requiring several
to be upgraded atomically.  Because the updates are happening on
multiple CPUs, upgrading the two images atomically is challenging.</t>

</section>
</section>
<section anchor="manifests" title="Manifests">

<section anchor="overview" title="Overview">

<t>In order for a firmware consumer to apply an update, it has to make several decisions
using manifest-provided information and data available on the device itself. For more 
detailed information and a longer list of information elements in the manifest consult the 
information model specification <xref target="I-D.ietf-suit-information-model"/>, which offers justifications 
for each element, and the manifest, see <xref target="I-D.ietf-suit-manifest"/>}, for details about how this 
information is included in the manifest.</t>

<texttable title="Firmware Update Decisions." anchor="manifest-info">
      <ttcol align='right'>Decision</ttcol>
      <ttcol align='left'>Information Elements</ttcol>
      <c>Should I trust the author of the firmware?</c>
      <c>Trust anchors and authorization policies on the device</c>
      <c>Has the firmware been corrupted?</c>
      <c>Digital signature and MAC covering the firmware image</c>
      <c>Does the firmware update apply to this device?</c>
      <c>Conditions with Vendor ID, Class ID and Device ID</c>
      <c>Is the update older than the active firmware?</c>
      <c>Sequence number in the manifest (1)</c>
      <c>When should the device apply the update?</c>
      <c>Wait directive</c>
      <c>How should the device apply the update?</c>
      <c>Manifest commands</c>
      <c>What kind of firmware binary is it?</c>
      <c>Unpack algorithms to interpret a format.</c>
      <c>Where should the update be obtained?</c>
      <c>Dependencies on other manifests and firmware image URI in Manifest</c>
      <c>Where should the firmware be stored?</c>
      <c>Storage Location and Component Identifier</c>
</texttable>

<t>(1): A device presented with an old, but valid manifest and firmware
must not be tricked into installing such firmware since a
vulnerability in the old firmware image may allow an attacker to
gain control of the device.</t>

<t>Keeping the code size and complexity of a manifest parsers small is important 
for constrained IoT devices. Since the manifest parsing code may 
also be used by the bootloader it is part of the trusted computing base.</t>

<t>A manifest may not only be used to protect firmware images but also personalization data
related to firmware or software. Trusted Execution Environments (TEEs), for example,
benefit from a protocol for managing the lifecycle of trusted
applications (TAs) running inside a TEE. TEEs may obtain TAs
from different authors and those TAs may require personalization data,
such as payment information, to be securely conveyed to the TEE.</t>

</section>
</section>
<section anchor="securing" title="Securing Firmware Updates">

<t>Securing the firmware update process itself is important. Failure 
to do so can help attackers to take control over the devices.</t>

<t>End-to-end security mechanisms are used to protect the firmware
image and the manifest. The following assumptions are made to allow 
the firmware consumer to verify the received firmware image and 
manifest before updating software:</t>

<t><list style="symbols">
  <t>Authentication ensures that the device can cryptographically identify
the author(s) creating firmware images and manifests. Authenticated
identities may be used as input to the authorization process. Not all 
entities creating and signing manifests have the same
permissions. A device needs to determine whether the requested action
is indeed covered by the permission of the party that signed the manifest.
Informing the device about the permissions of the different parties
also happens in an out-of-band fashion and is also a duty of the
Trust Provisioning Authority.</t>
  <t>Integrity protection ensures that no third party can modify the manifest
or the firmware image. To accept an update, a device needs to verify the signature covering
the manifest. There may be one or multiple manifests that need to be
validated, potentially signed by different parties. The device needs
to be in possession of the trust anchors to verify those signatures.
Installing trust anchors to devices via the Trust Provisioning Authority
happens in an out-of-band fashion prior to the firmware update process.</t>
  <t>For confidentiality protection of the firmware image, it must be done in such a
way that the intended firmware consumer(s) can decrypt it. The information
that is encrypted individually for each device must maintain
friendliness to Content Distribution Networks, bulk storage, and
broadcast protocols. For confidentiality protection of firmware images the author needs
to be in possession of the certificate/public key or a pre-shared key
of a device. The use of confidentiality protection of firmware images
is optional.</t>
</list></t>

<t>A manifest specification must support different cryptographic algorithms
and algorithm extensibility. Due of the nature of
unchangeable code in ROM for use with bootloaders the use of
post-quantum secure signature mechanisms, such as hash-based
signatures <xref target="RFC8778"/>, are attractive. These
algorithms maintain security in presence of quantum computers.</t>

<t>When a device obtains a monolithic firmware image from a single author
without any additional approval steps then the authorization flow is
relatively simple. There are, however, other cases where more complex
policy decisions need to be made before updating a device.</t>

<t>In this architecture the authorization policy is separated from
the underlying communication architecture. This is accomplished
by separating the entities from their permissions. For example,
an author may not have the authority to install a firmware image
on a device in critical infrastructure without the authorization
of a device operator. In this case, the device may be programmed
to reject firmware updates unless they are signed both by the
firmware author and by the device operator.</t>

<t>Alternatively, a device may trust precisely one entity, which
does all permission management and coordination. This entity
allows the device to offload complex permissions
calculations for the device.</t>

</section>
<section anchor="example" title="Example">

<t><xref target="firmware-update"/> illustrates an example message flow
for distributing a firmware image to a device. The firmware
and manifest are stored on the same firmware server and 
distributed in a detached manner.</t>

<figure title="First Example Flow for a Firmware Upate." anchor="firmware-update"><artwork><![CDATA[
+--------+    +-----------------+    +-----------------------------+
|        |    | Firmware Server |    |         IoT Device          |
| Author |    | Status Tracker  |    | +------------+ +----------+ |
+--------+    | Server          |    | |  Firmware  | |Bootloader| |
  |           +-----------------+    | |  Consumer  | |          | |
  |                   |              | +------------+ +----------+ |
  |                   |              |      |                |     |
  |                   |              |  +-----------------------+  |
  | Create Firmware   |              |  | Status Tracker Client |  |
  |--------------+    |              |  +-----------------------+  |
  |              |    |               `''''''''''''''''''''''''''''
  |<-------------+    |                     |        |       |
  |                   |                     |        |       |
  | Upload Firmware   |                     |        |       |
  |------------------>|                     |        |       |
  |                   |                     |        |       |
  | Create Manifest   |                     |        |       |
  |---------------+   |                     |        |       |
  |               |   |                     |        |       |
  |<--------------+   |                     |        |       |
  |                   |                     |        |       |
  | Sign Manifest     |                     |        |       |
  |-------------+     |                     |        |       |
  |             |     |                     |        |       |
  |<------------+     |                     |        |       |
  |                   |                     |        |       |
  | Upload Manifest   |                     |        |       |
  |------------------>|  Notification of    |        |       |
  |                   |  new firmware image |        |       |
  |                   |----------------------------->|       |
  |                   |                     |        |       |
  |                   |                     |Initiate|       |
  |                   |                     | Update |       |
  |                   |                     |<-------|       |
  |                   |                     |        |       |
  |                   |   Query Manifest    |        |       |
  |                   |<--------------------|        .       |
  |                   |                     |        .       |
  |                   |   Send Manifest     |        .       |
  |                   |-------------------->|        .       |
  |                   |                     | Validate       |
  |                   |                     | Manifest       |
  |                   |                     |--------+       |
  |                   |                     |        |       |
  |                   |                     |<-------+       |
  |                   |                     |        .       |
  |                   |  Request Firmware   |        .       |
  |                   |<--------------------|        .       |
  |                   |                     |        .       |
  |                   | Send Firmware       |        .       |
  |                   |-------------------->|        .       |
  |                   |                     | Verify .       |
  |                   |                     | Firmware       |
  |                   |                     |--------+       |
  |                   |                     |        |       |
  |                   |                     |<-------+       |
  |                   |                     |        .       |
  |                   |                     | Store  .       |
  |                   |                     | Firmware       |
  |                   |                     |--------+       |
  |                   |                     |        |       |
  |                   |                     |<-------+       |
  |                   |                     |        .       |
  |                   |                     |        .       |
  |                   |                     |        .       |
  |                   |                     |        |       |
  |                   |                     | Update |       |
  |                   |                     |Complete|       |
  |                   |                     |------->|       |
  |                   |                              |       |
  |                   |  Firmware Update Completed   |       |
  |                   |<-----------------------------|       |
  |                   |                              |       |
  |                   |  Reboot                      |       |
  |                   |----------------------------->|       |
  |                   |                     |        |       |
  |                   |                     |        |       |
                      |                     |        |Reboot |
  |                   |                     |        |------>|
  |                   |                     |        |       |
  |                   |                     |        .       |
  |                   |                 +---+----------------+--+
  |                   |                S|   |                |  |
  |                   |                E|   | Verify         |  |
  |                   |                C|   | Firmware       |  |
  |                   |                U|   | +--------------|  |
  |                   |                R|   | |              |  |
  |                   |                E|   | +------------->|  |
  |                   |                 |   |                |  |
  |                   |                B|   | Activate new   |  |
  |                   |                O|   | Firmware       |  |
  |                   |                O|   | +--------------|  |
  |                   |                T|   | |              |  |
  |                   |                 |   | +------------->|  |
  |                   |                P|   |                |  |
  |                   |                R|   | Boot new       |  |
  |                   |                O|   | Firmware       |  |
  |                   |                C|   | +--------------|  |
  |                   |                E|   | |              |  |
  |                   |                S|   | +------------->|  |
  |                   |                S|   |                |  |
  |                   |                 +---+----------------+--+
  |                   |                     |        .       |
  |                   |                     |        |       |
  |                   |                     .        |       |
  |                   |  Device running new firmware |       |
  |                   |<-----------------------------|       |
  |                   |                     .        |       |
  |                   |                              |       |
]]></artwork></figure>

<t><xref target="firmware-update2"/> shows an exchange that starts with the 
status tracker querying the device for its current firmware version. 
Later, a new firmware version becomes available and since this 
device is running an older version the status tracker server interacts
with the device to initiate an update.</t>

<t>The manifest and the firmware are stored on different servers in this 
example. When the device processes the manifest it learns where to 
download the new firmware version. The firmware consumer downloads 
the firmware image with the newer version X.Y.Z after successful validation
of the manifest. Subsequently, a reboot is initiated and the secure
boot process starts. Finally, the device reports the successful boot 
of the new firmware version.</t>

<figure title="Second Example Flow for a Firmware Upate." anchor="firmware-update2"><artwork><![CDATA[
 +---------+   +-----------------+    +-----------------------------+
 | Status  |   | Firmware Server |    | +------------+ +----------+ |
 | Tracker |   | Status Tracker  |    | |  Firmware  | |Bootloader| |
 | Server  |   | Server          |    | |  Consumer  | |          | |
 +---------+   +-----------------+    | |  +Status   | +----------+ |
      |                |              | |  Tracker   |        |     |
      |                |              | |  Client    |        |     |
      |                |              | +------------+        |     |
      |                |              |      |  IoT Device    |     |
      |                |               `''''''''''''''''''''''''''''
      |                |                     |                |
      |        Query Firmware Version        |                |
      |------------------------------------->|                |
      |        Firmware Version A.B.C        |                |
      |<-------------------------------------|                |
      |                |                     |                |
      |         <<some time later>>          |                |
      |                |                     |                |
    _,...._         _,...._                  |                |
  ,'       `.     ,'       `.                |                |
 |   New     |   |   New     |               |                |
 \ Manifest  /   \ Firmware  /               |                |
  `.._   _,,'     `.._   _,,'                |                |
      `''             `''                    |                |
      |            Push manifest             |                |
      |----------------+-------------------->|                |
      |                |                     |                |
      |                '                     |                '
      |                |                     | Validate       |
      |                |                     | Manifest       |
      |                |                     |---------+      |
      |                |                     |         |      |
      |                |                     |<--------+      |
      |                | Request firmware    |                |
      |                | X.Y.Z               |                |
      |                |<--------------------|                |
      |                |                     |                |
      |                | Firmware X.Y.Z      |                |
      |                |-------------------->|                |
      |                |                     |                |
      |                |                     | Verify         |
      |                |                     | Firmware       |
      |                |                     |--------------+ |
      |                |                     |              | |
      |                |                     |<-------------+ |
      |                |                     |                |
      |                |                     | Store          |
      |                |                     | Firmware       |
      |                |                     |-------------+  |
      |                |                     |             |  |
      |                |                     |<------------+  |
      |                |                     |                |
      |                |                     |                |
      |                |                     | Trigger Reboot |
      |                |                     |--------------->|
      |                |                     |                |
      |                |                     |                |
      |                |                     | __..-------..._'
      |                |                    ,-'               `-.
      |                |                   |      Secure Boot    |
      |                |                   `-.                 _/
      |                |                     |`--..._____,,.,-'
      |                |                     |                |
      | Device running firmware X.Y.Z        |                |
      |<-------------------------------------|                |
      |                |                     |                |
      |                |                     |                |
]]></artwork></figure>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document describes terminology, requirements and an architecture for 
firmware updates of IoT devices. The content of the document is thereby 
focused on improving security of IoT devices via firmware update mechanisms
and informs the standardization of a manifest format.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their feedback:</t>

<t><list style="symbols">
  <t>Geraint Luff</t>
  <t>Amyas Phillips</t>
  <t>Dan Ros</t>
  <t>Thomas Eichinger</t>
  <t>Michael Richardson</t>
  <t>Emmanuel Baccelli</t>
  <t>Ned Smith</t>
  <t>Jim Schaad</t>
  <t>Carsten Bormann</t>
  <t>Cullen Jennings</t>
  <t>Olaf Bergmann</t>
  <t>Suhas Nandakumar</t>
  <t>Phillip Hallam-Baker</t>
  <t>Marti Bolivar</t>
  <t>Andrzej Puzdrowski</t>
  <t>Markus Gueller</t>
  <t>Henk Birkholz</t>
  <t>Jintao Zhu</t>
  <t>Takeshi Takahashi</t>
  <t>Jacob Beningo</t>
  <t>Kathleen Moriarty</t>
  <t>Bob Briscoe</t>
</list></t>

<t>We would also like to thank the WG chairs, Russ Housley, David Waltermire,
Dave Thaler for their support and their reviews.</t>

</section>


  </middle>

  <back>


    <references title='Informative References'>





<reference  anchor="RFC8240" target='https://www.rfc-editor.org/info/rfc8240'>
<front>
<title>Report from the Internet of Things Software Update (IoTSU) Workshop 2016</title>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<date year='2017' month='September' />
<abstract><t>This document provides a summary of the Internet of Things Software Update (IoTSU) Workshop that took place at Trinity College Dublin, Ireland on the 13th and 14th of June, 2016.  The main goal of the workshop was to foster a discussion on requirements, challenges, and solutions for bringing software and firmware updates to IoT devices. This report summarizes the discussions and lists recommendations to the standards community.</t><t>Note that this document is a report on the proceedings of the workshop.  The views and positions documented in this report are those of the workshop participants and do not necessarily reflect IAB views and positions.</t></abstract>
</front>
<seriesInfo name='RFC' value='8240'/>
<seriesInfo name='DOI' value='10.17487/RFC8240'/>
</reference>



<reference  anchor="RFC6024" target='https://www.rfc-editor.org/info/rfc6024'>
<front>
<title>Trust Anchor Management Requirements</title>
<author initials='R.' surname='Reddy' fullname='R. Reddy'><organization /></author>
<author initials='C.' surname='Wallace' fullname='C. Wallace'><organization /></author>
<date year='2010' month='October' />
<abstract><t>A trust anchor represents an authoritative entity via a public key and associated data.  The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative.  A relying party uses trust anchors to determine if a digitally signed object is valid by verifying a digital signature using the trust anchor's public key, and by enforcing the constraints expressed in the associated data for the trust anchor.  This document describes some of the problems associated with the lack of a standard trust anchor management mechanism and defines requirements for data formats and push-based protocols designed to address these problems.  This  document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract>
</front>
<seriesInfo name='RFC' value='6024'/>
<seriesInfo name='DOI' value='10.17487/RFC6024'/>
</reference>



<reference  anchor="RFC7228" target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='M.' surname='Ersue' fullname='M. Ersue'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2014' month='May' />
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference  anchor="RFC8778" target='https://www.rfc-editor.org/info/rfc8778'>
<front>
<title>Use of the HSS/LMS Hash-Based Signature Algorithm with CBOR Object Signing and Encryption (COSE)</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='2020' month='April' />
<abstract><t>This document specifies the conventions for using the Hierarchical Signature System (HSS) / Leighton-Micali Signature (LMS) hash-based signature algorithm with the CBOR Object Signing and Encryption (COSE) syntax. The HSS/LMS algorithm is one form of hash-based digital signature; it is described in RFC 8554.</t></abstract>
</front>
<seriesInfo name='RFC' value='8778'/>
<seriesInfo name='DOI' value='10.17487/RFC8778'/>
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>An Information Model for Firmware Updates in IoT Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='June' day='2' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality.  One component of such a firmware update is a concise and machine- processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-07' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-07.txt' />
</reference>



<reference anchor="I-D.ietf-teep-architecture">
<front>
<title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>

<author initials='M' surname='Pei' fullname='Mingliang Pei'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<author initials='D' surname='Wheeler' fullname='David Wheeler'>
    <organization />
</author>

<date month='July' day='13' year='2020' />

<abstract><t>A Trusted Execution Environment (TEE) is an environment that enforces that any code within that environment cannot be tampered with, and that any data used by such code cannot be read or tampered with by any code outside that environment.  This architecture document motivates the design and standardization of a protocol for managing the lifecycle of trusted applications running inside such a TEE.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-12' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-teep-architecture-12.txt' />
</reference>



<reference anchor="I-D.ietf-suit-manifest">
<front>
<title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<author initials='K' surname='Zandberg' fullname='Koen Zandberg'>
    <organization />
</author>

<date month='July' day='13' year='2020' />

<abstract><t>This specification describes the format of a manifest.  A manifest is a bundle of metadata about the firmware for an IoT device, where to find the firmware, the devices to which it applies, and cryptographic information protecting the manifest.  Firmware updates and secure boot both tend to use sequences of common operations, so the manifest encodes those sequences of operations, rather than declaring the metadata.  The manifest also serves as a building block for secure boot.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-09' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-manifest-09.txt' />
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC8392" target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='E.' surname='Wahlstroem' fullname='E. Wahlstroem'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2018' month='May' />
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>


<reference anchor="LwM2M" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf">
  <front>
    <title>Lightweight Machine to Machine Technical Specification, Version 1.0.2</title>
    <author initials="." surname="OMA" fullname="Open Mobile Alliance">
      <organization></organization>
    </author>
    <date year="2018" month="February" day="09"/>
  </front>
  <format type="PDF" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf"/>
</reference>


    </references>




  </back>

<!-- ##markdown-source:
H4sIALwkdl8AA+19/XLcyJHn/4zgOyBm/jBldTdnZO/a1s15l6I0HnmHklak
PHsbEzFGN9BsmGigDaDJaUu6uNe417snufzlR30AaFKUxp67iGXYI7IbyKrK
ysrvzJpOp4cHXdGV+ePkJPm6aNY3aZMnbzZZ2uXJSbNYFV2+6Lb02bJukudV
lzdV3iX1MrlYFdVle3iQzudNfv1hr9cXhwdZvajSNY2XNemymxZ5t5y226Kb
psHj0y9/dXiwICCXdbN7nBTVsj48ODwoNs3jpGu2bffoiy9+98UjGr3J08fJ
eb7YNkW3Ozy4qZury6bebujDN89puKt8R59lj93cp08xLqC1XVplP6RlXdFs
djmtZVM8PjxIkma5yLO225X2eZJ09SL8vaiyvOrcJ23ddE2+bP0Hu3X8d9cU
C//8ol6v6X3/fVGVRRWMlv/YTcui7aYEaF6X9OC0/uVDfEXoW6ebDeFen063
3apuMO8pvuefoqI3nsySs7pJK/epoP1Jk1dZWvW+q5vLtCr+lnZFXdFeNuvk
22JNu5G5J/J1WpTu9Rm//q9ps57RYoDN/vDfzJKLdrGql3lVXPbm8E1aVXk7
9v0Hz2PFIGadA3HbXJ7OaN71TR8VT9PrIut9E0/g26JKm7o/dob3ZnO8968l
PzGj18YGPqM9yJsiXfRGPivKmmbe/zIe/LSu2m1JRNr1J7CW1/91za/bqnFK
mjW9fJ0zGb/++vS3j379hf3+z188+rX9/ptHj37rnvnNb+T359OnM38cHbS6
mq7rLC/jZ7o830RHdgTEmhazzNtuMBJm8E9f/s59/qvfPeLfv705e3T2WFbb
pc1lTkdm1XWbx8fHNzc3s3qTV+t6XpR5WpZFWi1y4P24yemDNj/+trhcdTc5
/ktgjv/05Q9f/PBo+uiLL3/7xaMvfjc9OX55djK9OJ/Gz00Hz8022VLnIJzx
s+CN5CylNVc5cQH360W+WFXFIi2T802+KJb0K9A2Sf6UNy39knw5+2L26DOB
6c+rJxOamP0t9PGSVkonFEtNTnSt8gQ46+MEk51+8Wj6xe/kU9kqB/TV069/
PsQdHkyn0ySdE89LF8xo/7Qtq7xJafyiK+jc3xTdakSWJEckIB4kWX5dLOip
VXqdJ01atDj83SpPqjzPWI6kxHBLOrnEvpMWrJ/Ei8mercieNW0JUV+7TrpV
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
g9VlSfefrtXesGBsmvSrxMnbTQtaEY6vXGtEJLTrlrt5znXv+I6RHhD28slt
G8ojtXcMOxCCnpjEYQvJn+gpDsNbRYw5a86B6Qqpu/xkyC4KuYUB/bOKUBMy
eWrz6OnAQ4NTbzoIG78NqLnXUlg7rYipoanqQZ1jwD6cA0b0IGK+NR1ZSPjb
1zfiU/RQQVDagSWv2JaMVTGMo86t/jI35bYNHIS9/nrqNBjWCHEHGE7QmYrS
GC4RB13qK0JjQtoRqQmJe0+qVls+stnb1psVl5RLKnhwLH32S0+cSOlCGtF8
T3nuvMyGqrERypU9dYVC0TuPVQtMTqN8fXeZg5yqFTima8Q2GekTxIGGIzbD
+5crPJig2xAKObWMht7miAA/7p9mEPqKZd6GTVXc0vTGm5H2OL6cR44BARxM
dZYc9ahLbsMRgkRfJIFl3fsYinMuj61k9kAne+KZF+048m/CjYXK5ToymRQN
1CAeyNGic7qbuI08Lw+s+ZXkJfKrYJkrJvXRknauVK+CXrGaaew7PDEUHacv
BPsmCycxijDSWnjeFSuI5949rHknL4VsOzSAHtx24CvqGFNrsmS22h555uue
RvBrFVQ9FXjizIY9d7ZYswEyRVvL4HrQb1mdxlcDgSZ8dX08L17lhbi03F1c
rjnojeYbBglWYzYW3KDojr3ogt54vjh5RLuIe4iY8cOSVkywvVsXJDpfFip3
CylQYxq8daLaIRFqSVDW6jPeXWkmj1Dgfo5+KamknfccFs7hikGdMAUfLtNN
WKN7K0H2pUTMHGmSkiALPwJ3Kplw+9NyF9nB6UB8BRxl6ILCwwgWHR7wHV6W
ch2waIf3p7VcLOLpzGtRbCqL/neXBhs0cw+nyrcIRUVXbPXsn7zaBuaYRI/M
GkVXfKVTIRY8N4dn1KfrDReeSSO/xln1Rk62Er7+JhupEeNmGOiTP1elNUp7
dNdcGKMdmDLqfhpxnxz5snlT/PB2XmatanE5t5x/oOnz5rqI7y4Q6ZIOutHv
YkeEi8TqJI5jlRruL+RMAyPcQhs1bWlDXKYRLcaBx2brAECNdXw1A4BodKQt
3MC706/Tw8Vs1lyfxYvnmCo1I99XsD9EwGpb3nrM0GJOU5YHpdasN3EVRIFu
nVIjLQ02bgpUorSu+xZuB9xJ9WUvqDxjD23g9Rjg3nPBgetQtVgXsmXrZXS5
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
jubw4P8C8C/Av7vXAAA=

-->

</rfc>

